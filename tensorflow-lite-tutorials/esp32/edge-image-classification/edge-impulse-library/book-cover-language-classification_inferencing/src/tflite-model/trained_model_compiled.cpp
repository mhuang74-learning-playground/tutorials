/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 31.07.2021 09:11:47

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 85856;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[186];
TfLiteEvalTensor tflEvalTensors[186];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[73];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data4[8] = { -243, 83, -130, 592, 7, -127, 116, -331, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<1, float> quant4_scale = { 1, { 1.593752131157089e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[3] = { 41, -87, 14, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const TfArray<1, float> quant5_scale = { 1, { 7.9574798292014748e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[2] = { 4, 1280, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data7[8] = { 28187, 44341, 6346, 91975, 29957, 84251, 17733, -777, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 6.8443834607023746e-05, 4.0222959796665236e-05, 1.9519766283337958e-05, 9.4634888228029013e-06, 1.183945823868271e-05, 6.6758902903529815e-06, 5.0840681069530547e-05, 0.00011732187704183161, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 7513, 6568, 4029, 17244, 18315, 13880, 4871, 437, 9351, 2906, 7372, 2367, 7084, 7830, 4672, 1366, 13231, 5718, 9753, 2893, 627, -2972, 5137, 6884, 15358, 5138, -1225, -2946, 2681, 895, 5595, 3843, 5083, 9781, 18475, 1833, 990, 165, 810, 1403, 12433, 210, 9576, 43881, 7097, 10401, 6215, 199, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 9.8250624432694167e-05, 8.6380670836661011e-05, 0.00012174579751444981, 5.1698785682674497e-05, 5.2301926189102232e-05, 6.0100752307334915e-05, 9.2407397460192442e-05, 0.00015935319242998958, 9.0465946414042264e-05, 0.00010065376409329474, 8.4362611232791096e-05, 0.00013963159290142357, 7.7880242315586656e-05, 0.0001002064673230052, 8.8291119027417153e-05, 0.00012541617616079748, 6.5640611865092069e-05, 0.00010523815581109375, 8.6885171185713261e-05, 0.00013742964074481279, 0.00019974054885096848, 0.0001644171861698851, 9.7808784630615264e-05, 8.8681830675341189e-05, 5.6746885093161836e-05, 0.00015676910697948188, 0.0001474713790230453, 0.00011549514601938426, 0.00012783132842741907, 0.00013113814929965883, 9.5154136943165213e-05, 0.00011539977276697755, 0.00013351559755392373, 8.7742439063731581e-05, 5.2001709264004603e-05, 0.0001390280231134966, 0.00018277601338922977, 9.6994313935283571e-05, 0.000178091911948286, 0.00013342648162506521, 6.5623156842775643e-05, 0.0001391958212479949, 8.7572050688322634e-05, 2.652514012879692e-05, 0.00011004393309121951, 7.8486365964636207e-05, 9.1064874141011387e-05, 0.00013148589641787112, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { -1162, 19877, 6010, -1186, -1284, 449, -2413, 116, 7772, 16011, 16197, 8749, 5291, 3876, -9372, -5458, 18402, 13566, -1258, -4944, -121, 20, -10266, -19122, -2433, 17693, -3384, 1755, -4104, -5710, -198, 19053, -2482, 9321, 19589, -1362, -4012, 22761, -1108, -1941, 18008, -1411, 1873, 20455, -3510, -1052, -3493, -1205, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00018523898324929178, 6.9553127104882151e-05, 5.5437838454963639e-05, 0.00014500167162623256, 0.00029266506317071617, 0.00011210552474949509, 0.00012222025543451309, 0.00014701561303809285, 9.6966949058696628e-05, 7.9254285083152354e-05, 7.3478397098369896e-05, 9.6228104666806757e-05, 7.5907388236373663e-05, 0.00022614002227783203, 6.6540662373881787e-05, 0.00017713120905682445, 9.4447779702022672e-05, 8.5405867139343172e-05, 0.00016459808102808893, 0.00013040719204582274, 0.00012512653484009206, 0.00041703003807924688, 0.00014793673472013324, 8.1090685853268951e-05, 0.00013200080138631165, 0.00010781552555272356, 0.00017929675232153386, 0.00020889377628918737, 0.00015501595044042915, 9.9721524748019874e-05, 0.00013838522136211395, 6.4979256421793252e-05, 0.00014712702250108123, 0.00012574679567478597, 0.00013071432476863265, 0.00014812596782576293, 9.9503769888542593e-05, 4.6331533667398617e-05, 0.00020592183864209801, 0.00011472353071440011, 7.5054937042295933e-05, 9.1033820353914052e-05, 0.00017732661217451096, 0.00018221371283289045, 0.00023533163766842335, 0.00010373950499342754, 0.00024546563508920372, 0.00013009816757403314, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 7094, -3222, 4109, 4245, 6256, 5148, -1424, 2511, 2435, 5063, 888, 3121, 8152, 383, 2963, -1619, -311, 8853, -1549, 11139, 3345, 3307, 2406, 1386, -3999, -491, 894, 1128, 6425, 2429, 1129, 2839, -425, 2818, 2278, -561, 4744, 6099, 11904, -302, 3690, -2135, -194, 4783, -6415, 10286, 24772, -974, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 9.7651827672962099e-05, 0.00010579507215879858, 0.00015599823382217437, 9.7373893368057907e-05, 0.00010347765783080831, 0.00012620155757758766, 0.00013230669719632715, 0.00014318354078568518, 0.00016752742521930486, 0.00011489884491311386, 0.00014636498235631734, 0.00012429289927240461, 8.2141923485323787e-05, 0.00013884286454413086, 0.00014762530918233097, 0.00013080243661534041, 0.00012896691623609513, 8.5232561104930937e-05, 0.00015811457706149668, 7.5594085501506925e-05, 0.00015115491987671703, 0.00013502819638233632, 0.00010449108231114224, 0.0001303492026636377, 0.00011363912199158221, 0.0001289358624489978, 0.00016346314805559814, 0.00016946940741036087, 9.8174656159244478e-05, 0.00010268230107612908, 0.0001078935747500509, 0.00010555847256910056, 9.865129686659202e-05, 0.00013783884060103446, 0.00014809567073825747, 0.00011110210471088067, 0.00011245066707488149, 9.1785797849297523e-05, 6.9484936830122024e-05, 0.00015336443902924657, 0.00010113357711816207, 0.00013907253742218018, 0.00010144868429051712, 8.9215958723798394e-05, 9.6816438599489629e-05, 7.9495977843180299e-05, 4.3246371205896139e-05, 0.0001025631936499849, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { -856, -601, 17169, -3059, -6749, 4555, -19, -1774, -169, -968, -10249, -656, -8568, 28527, -11240, -1348, 9514, -2912, -8301, -3516, -5322, 18254, -9287, 10638, -134, -673, 5985, 16359, -320, -1188, -2347, 19377, -1, -11506, 11821, 9964, -428, 37134, -4310, -2205, 14448, -979, -799, 5137, -4976, -1918, 42547, -158, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00018157534941565245, 0.00037883059121668339, 8.4069630247540772e-05, 0.00011414197797421366, 0.0001409955439157784, 0.00013061336358077824, 0.00041922481614165008, 0.00017206625489052385, 0.00015524491027463228, 8.0310557677876204e-05, 7.9964695032685995e-05, 0.00013751859660260379, 0.0001354687410639599, 4.5920387492515147e-05, 7.7776887337677181e-05, 0.00021133096015546471, 0.00010916055180132389, 0.00016757175035309047, 0.00014315135194920003, 0.00017266605573240668, 5.4780070058768615e-05, 7.4033188866451383e-05, 0.0001235286908922717, 0.00011123403965029866, 0.00025231775362044573, 0.00024908830528147519, 0.00010742903396021575, 7.040349009912461e-05, 0.00014138684491626918, 7.7297387178987265e-05, 0.00014138320693746209, 6.5465828811284155e-05, 9.8687291028909385e-05, 0.00012483556929510087, 0.0001217947865370661, 0.00010966445552185178, 0.00023536909429822117, 4.1086746932705864e-05, 0.00015856258687563241, 9.0580491814762354e-05, 8.0432808317709714e-05, 0.0001220491249114275, 0.00020236526324879378, 0.00012775191862601787, 0.00021653781004715711, 0.00015304310363717377, 8.8207656517624855e-05, 0.00025225456920452416, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { 5142, 8284, 14763, 1277, 9717, 12577, 4000, 3136, -3247, 9117, 5437, -1649, 8751, 5528, 9094, 2227, -3975, 2449, 4112, 8131, 4331, 81, 517, 3135, 4236, -781, 10369, 7167, -360, 1961, 1304, 6008, 4093, 173, 15858, 4243, 9236, 3281, 3859, 1338, 6940, 9478, 3984, 5872, 4436, 4680, 3367, -4089, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0001041836294461973, 8.4538762166630477e-05, 5.7327368267579004e-05, 0.00015298963990062475, 7.8971403127070516e-05, 6.5990025177598e-05, 0.00010529277642490342, 0.00010098403436131775, 0.00010771562665468082, 8.1381098425481468e-05, 9.2926151410210878e-05, 0.00011222637112950906, 7.7818534919060767e-05, 0.0001012488646665588, 7.8680524893570691e-05, 0.00011161811562487856, 0.00010578685032669455, 0.00014553373330272734, 8.2915328675881028e-05, 9.2854657850693911e-05, 9.3349175585899502e-05, 0.00012755686475429684, 0.00011165833711856976, 0.00011674296547425911, 0.00011067328159697354, 0.00013820429740007967, 7.5062744144815952e-05, 7.8317461884580553e-05, 0.00010972345626214519, 0.00012093396799173206, 0.00012362674169708043, 9.3381204351317137e-05, 0.00012174907169537619, 0.00014230955275706947, 5.9752659581135958e-05, 0.00010396575089544058, 8.6510401160921901e-05, 0.00011528276081662625, 0.00010828794620465487, 0.00012621008499991149, 9.5177267212420702e-05, 8.1121717812493443e-05, 0.00012287455319892615, 0.00010840360482688993, 0.00012856224202550948, 8.3759674453176558e-05, 0.00011929141328437254, 0.00010523513628868386, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { -36661, -5406, 24468, -5916, 6724, -1376, 4532, 1033, -371, -1592, -18849, -2033, 11137, 3146, 733, -5084, -919, 23203, -1616, 2518, -2853, -123, 7457, -314, 844, -5387, -4128, 24019, -11581, -16850, 5349, -197, -20, -3852, 2941, -3220, 16622, -1775, 2074, 13985, -1017, -3725, -698, 17081, 3640, 16, 18362, -1049, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 4.8233618144877255e-05, 9.4222981715574861e-05, 0.00010294499224983156, 0.0001084458563127555, 0.00018521427409723401, 7.8692137321922928e-05, 0.00015233112208079547, 0.00019084439554717392, 0.0002456352231092751, 0.00011088253086199984, 7.7206750574987382e-05, 0.00031955528538674116, 0.00011249013186898082, 7.3213384894188493e-05, 0.00014518837269861251, 7.6405049185268581e-05, 0.00016191946633625776, 4.2443476559128612e-05, 0.0001153227494796738, 0.00014222734898794442, 0.00010681383719202131, 0.00022871095279697329, 0.00011397479829611257, 9.3058079073671252e-05, 6.3913037593010813e-05, 0.00016270083142444491, 9.9791708635166287e-05, 6.3938001403585076e-05, 8.0197307397611439e-05, 9.3277682026382536e-05, 0.00010051223216578364, 9.3017435574438423e-05, 0.00017734375433064997, 0.00026669818907976151, 0.0001399892644258216, 0.0001425054797437042, 8.4675040852744132e-05, 0.00013972054875921458, 5.3351017413660884e-05, 7.8009245044086128e-05, 0.00015437374531757087, 0.00027817260706797242, 0.0001852360728662461, 9.522557957097888e-05, 0.00011644965707091615, 0.0001064760799636133, 6.2700077251065522e-05, 0.00013586963177658617, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { 4794, -567, 6336, 1245, 4295, -4464, 6762, 4803, 2229, 19106, 5267, -2910, -1362, -3516, 21687, 9053, 2584, 3001, 8603, 1424, 3455, 1233, 18587, 463, -3389, -2239, 8581, -3672, 4016, 7368, 17850, 5271, 23363, 4055, -5803, 24280, 5144, 6778, 2506, 2663, -3419, -637, 4154, 1295, 3475, -4943, 649, 5587, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 8.8097454863600433e-05, 0.00038221318391151726, 9.6578020020388067e-05, 0.00023615910322405398, 0.00016763838357292116, 0.00027307227719575167, 0.00016040234186220914, 0.00012512806279119104, 0.0002078228717437014, 3.6182453186484054e-05, 0.00042175402631983161, 0.00025186766288243234, 0.00039276434108614922, 0.00037594645982608199, 7.5945201388094574e-05, 0.00011978395923506469, 0.00014924291463103145, 0.00035610489430837333, 0.00021971088426653296, 0.00022459181491285563, 0.00013749866047874093, 0.00046635227045044303, 5.9786423662444577e-05, 0.0002207983925472945, 0.00018400535918772221, 0.0004312220262363553, 0.00015380831609945744, 0.0003977662418037653, 0.00032771809492260218, 7.3570219683460891e-05, 7.6988799264654517e-05, 0.00030689171398989856, 4.515552063821815e-05, 0.00034249332384206355, 0.00026305156643502414, 4.3316649680491537e-05, 0.00011565061868168414, 0.00010234153887722641, 0.00051986071048304439, 0.00039698116597719491, 0.00048749623238109052, 0.00057542388094589114, 0.00047560688108205795, 0.00014886855205986649, 0.00023498298833146691, 0.00039074753294698894, 0.00017665702034719288, 0.00018039708083961159, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { -1452, 2509, 6424, -1436, 7678, -2632, 5066, -183, -1123, -7443, 6980, -7418, 5399, 12066, 5514, -2076, -217, -113, 2060, -659, 7377, 9585, 9653, -766, 30372, -2303, 14411, 2405, 8175, 4430, 7690, -548, 15282, 9856, 11763, 2028, 7852, 4049, 4136, 969, 19252, 2224, -529, -1654, 9201, -3345, 3876, 1248, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00013109497376717627, 0.00015087693464010954, 9.6723655587993562e-05, 0.00012771830370184034, 9.2844908067490906e-05, 0.00015373848145827651, 0.0001076356929843314, 0.00016165168199222535, 0.00012023822637274861, 7.5601223215926439e-05, 9.95296795736067e-05, 9.0516958152875304e-05, 0.0001081302179954946, 6.4177940657828003e-05, 0.00010752512753242627, 0.00013465914526022971, 0.0001252480287803337, 0.00011796309263445437, 0.00014738510071765631, 0.0001826084335334599, 8.8652843260206282e-05, 7.9466561146546155e-05, 7.282617298187688e-05, 0.00018541836470831186, 3.120855035376735e-05, 0.00013186648720875382, 5.9293506637914106e-05, 0.0001262771402252838, 8.8776090706232935e-05, 0.00013554448378272355, 8.8624758063815534e-05, 0.00017580635903868824, 6.2531951698474586e-05, 8.3702863776125014e-05, 6.7701672378461808e-05, 0.00014616092084906995, 8.677117875777185e-05, 0.00012507333303801715, 0.00012362994311843067, 0.00019863355555571616, 5.1491511840140447e-05, 0.0002064408763544634, 0.00013175679487176239, 0.00012795982183888555, 8.2307364209555089e-05, 0.00016217872325796634, 0.0001320157025475055, 0.00018175785953644663, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[48] = { 1956, -4, -10677, -8859, 23736, 9893, -2226, -6755, -10007, -2289, -2969, -679, -1916, 17679, -3145, -6955, -5463, -18046, 8145, -15987, 213, -3808, 933, 4257, -17395, 24, -3808, -4771, 21470, 16597, -4431, -2147, 2146, 8209, 4118, 14248, -973, -1776, 6, 22936, 28781, -16137, -10293, -8366, -2745, -3502, 74, -6713, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00014923924754839391, 0.00023302189947571605, 0.00010976844350807369, 9.6718395070638508e-05, 6.3714680436532944e-05, 0.00010094539175042883, 0.00014731842384207994, 7.9365265264641494e-05, 0.00016660074470564723, 0.00025106128305196762, 8.4939158114138991e-05, 0.00018860888667404652, 7.1861708420328796e-05, 8.3739600086119026e-05, 7.9438475950155407e-05, 0.00014577701222151518, 9.2363872681744397e-05, 7.363839540630579e-05, 9.7257514426019043e-05, 7.9285906394943595e-05, 8.1513338955119252e-05, 0.00023041498207021505, 0.0001832192501751706, 8.0610589066054672e-05, 0.00017548714822623879, 0.00023702220642007887, 0.00017523585120216012, 0.00011510784679558128, 8.9715642388910055e-05, 6.9867164711467922e-05, 0.00022438743326347321, 0.00016392918769270182, 0.00023290049284696579, 0.00013752181257586926, 0.00022287455794867128, 8.1920639786403626e-05, 7.8082142863422632e-05, 6.0952886997256428e-05, 0.00011508742318255827, 4.7238536353688687e-05, 8.8874228822533041e-05, 4.6726017899345607e-05, 0.0001069768622983247, 7.6669493864756078e-05, 0.00014391484728548676, 0.00013950475840829313, 0.00018049016944132745, 9.7076641395688057e-05, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[48] = { 6923, 2958, 21368, -555, 376, -2216, 6823, 10536, 543, 5361, 1259, 8597, 2515, -1528, -5483, -5322, 3105, -802, 131, 4971, -2782, -2029, 7975, 14540, 4073, 4758, 5453, 13171, -266, 91, 3148, 695, 8826, 62, -1144, -174, 3771, 6421, 9031, 10217, 5136, 5390, 1981, 7990, -872, 402, 14077, -780, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00010502513032406569, 0.00017477439541835338, 4.3995307350996882e-05, 0.00016590629820711911, 0.00016130022413562983, 0.00013263877190183848, 0.00010150216985493898, 7.8210003266576678e-05, 0.00013738324923906475, 0.00010311967344023287, 0.00015412474749609828, 8.9250199380330741e-05, 0.00016631103062536567, 0.00015993107808753848, 0.00010199342068517581, 8.6747844761703163e-05, 0.00013234090874902904, 0.00012649914424400777, 0.00014579389244318008, 0.00012625603994820267, 0.00011536826787050813, 9.5375580713152885e-05, 0.00010367426875745878, 6.1958315200172365e-05, 0.00013459012552630156, 0.00010943831875920296, 0.00012906106712762266, 6.6001259256154299e-05, 0.00017575843958184123, 0.00018001267744693905, 0.00010404695058241487, 0.00018831757188308984, 8.8942200818564743e-05, 0.00022588727006223053, 0.00012591520498972386, 0.00014994325465522707, 0.00014935315994080156, 0.00012088820221833885, 8.5485546151176095e-05, 7.6790951425209641e-05, 0.00014682480832561851, 0.00013580186350736767, 0.00018216256285086274, 9.2386842879932374e-05, 0.00015151058323681355, 0.00014953901700209826, 6.400702113751322e-05, 0.00014386895054485649, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[48] = { 22815, 18668, 23509, 3584, 9520, -2351, 7094, 16920, -8976, 24774, 8313, 472, 21268, -6689, -4092, -2357, 38446, -89, -10789, 19565, 43, -16375, 3928, 199, 131, -13145, 29078, -11291, -3522, -11639, 170, -3261, 9202, -11338, -8987, -7465, 4667, -5443, -245, 5457, 20039, 67, 2166, 23, -9416, 2472, -4758, -2300, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 7.2615657700225711e-05, 8.2792590546887368e-05, 0.00011140869173686951, 4.8204776248894632e-05, 9.6086652774829417e-05, 0.00022407251526601613, 0.0002091763453790918, 0.00012351501209195703, 0.00011254959099460393, 5.971085192868486e-05, 0.00010576657223282382, 0.00018197343160863966, 5.3818956075701863e-05, 0.00014009412552695721, 0.00027112627867609262, 0.00034175178734585643, 4.2515341192483902e-05, 0.00012720137601718307, 8.3908496890217066e-05, 7.3155642894562334e-05, 0.00018476694822311401, 0.00010345125338062644, 0.00011527007882250473, 0.00021389804896898568, 0.00018109058146364987, 7.1235750510822982e-05, 4.9148158723255619e-05, 0.00018473640375304967, 0.00022726999304722995, 0.00010954932804452255, 9.5758092356845737e-05, 0.00016880796465557069, 0.00018081857706420124, 0.00010665984882507473, 0.0001861958735389635, 0.00012682279339060187, 0.00010934458987321705, 0.00024853565264493227, 0.00013172767648939043, 0.00017536632367409766, 7.157096843002364e-05, 0.00016185925051104277, 0.0001915852481033653, 0.00013678496179636568, 0.00014461982937064022, 0.00011757281026802957, 0.00022121414076536894, 0.00011534862278494984, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[48] = { 3478, 4479, 6523, 3958, 1640, 2871, 9149, -3638, 155, 8314, -591, 9847, 4392, -2692, 6034, 3450, 17091, 5589, 13053, 2436, 2077, 5833, 5661, 7664, 5709, 9342, 1955, 5428, 5783, -2745, -7103, 9175, 1623, 5862, 12914, 1899, 3447, 18062, 5703, 852, 9293, 1965, 5851, 6173, -9684, 11613, 8773, 12800, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00015416767564602196, 9.485103510087356e-05, 0.00011028219887521118, 0.00013756650150753558, 0.00016592870815657079, 0.00010998715879395604, 8.4091370808891952e-05, 0.00012995937140658498, 0.00013689462502952665, 8.0004268966149539e-05, 0.00017350632697343826, 6.7399247200228274e-05, 9.4542003353126347e-05, 0.00015404568694066256, 0.00010847389785340056, 0.00014964592992328107, 5.6366014177910984e-05, 8.7414620793424547e-05, 6.6589615016710013e-05, 0.00013688886247109622, 9.7848089353647083e-05, 8.9487235527485609e-05, 0.00010517053306102753, 9.3210510385688394e-05, 0.00011344108497723937, 7.4477080488577485e-05, 0.00011591381917241961, 0.00011820701183751225, 0.00010622123227221891, 0.00010646921145962551, 8.7980333773884922e-05, 8.1464895629324019e-05, 0.00016593966574873775, 9.758512896951288e-05, 6.1342769186012447e-05, 0.00012398482067510486, 0.00013687156024388969, 5.1750870625255629e-05, 0.00010700074199121445, 0.00014580746938008815, 7.2940281825140119e-05, 0.00012404883455019444, 0.00010061320062959567, 0.00011511234333738685, 5.5279480875469744e-05, 7.5032738095615059e-05, 8.6898777226451784e-05, 6.7740969825536013e-05, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[48] = { -3959, -6960, -4253, 41687, -9719, 10472, 21768, -923, -9, 6951, 32, 4957, -5976, -1450, 304, 20983, 393, 16864, -8761, 24963, 3361, 2974, 3038, 8735, -9468, -6356, -6967, 15203, -62, -638, -2257, 13613, 36558, 52704, -1052, 1958, 119, -2615, 3858, -508, 7567, -6, 490, 24287, -1104, -836, 4198, -6412, };
const TfArray<1, int> tensor_dimension20 = { 1, { 48 } };
const TfArray<48, float> quant20_scale = { 48, { 9.2234702606219798e-05, 0.00015570498362649232, 0.00012092097313143313, 3.0873277864884585e-05, 9.5231807790696621e-05, 6.1996950535103679e-05, 5.9710739151341841e-05, 0.00015642824291717261, 4.6859520807629451e-05, 0.00018344438285566866, 7.480573549401015e-05, 0.00016991647135000676, 0.00011068111780332401, 6.4982734329532832e-05, 6.9954628997948021e-05, 5.7117777032544836e-05, 0.00014243082841858268, 6.2579951190855354e-05, 0.00012853463704232126, 5.9220223192824051e-05, 0.00016626108845230192, 0.00010067119001178071, 0.00014248552906792611, 0.00010015211591962725, 0.00016963362577371299, 0.00017227395437657833, 0.00016575602057855576, 8.4578641690313816e-05, 0.00015326554421335459, 0.00016141771629918367, 0.00016401993343606591, 0.00010861457121791318, 3.6002998967887834e-05, 2.7328869691700675e-05, 0.00015223394439090043, 0.00013028684770688415, 9.1692869318649173e-05, 0.0002220660971943289, 0.00016745513130445033, 5.854847768205218e-05, 0.00012058349966537207, 0.000163580451044254, 0.00011474674101918936, 5.8965346397599205e-05, 0.00039633482811041176, 0.00018167016969528049, 0.00011793136945925653, 0.00019470883125904948, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { 4539, 5830, 9260, 10296, 3966, 7310, -5404, 1056, 3237, 24386, 4745, -733, 11237, 6812, 7062, -925, 5375, -5374, -2749, 3926, -321, 12199, 5605, 2641, 287, -15714, 1528, 5335, -8243, -7721, 3392, 3084, 912, 3730, -2542, 1064, -1253, -3215, 3609, -4672, 4914, 9789, 877, -2782, 3210, 6033, 3238, -2942, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00011714599531842396, 0.00012764017446897924, 8.1197591498494148e-05, 7.8689918154850602e-05, 0.00011103002179879695, 9.5908413641154766e-05, 7.7392782259266824e-05, 0.00010952202865155414, 0.00011537576210685074, 3.2199579436564818e-05, 0.00010110314178746194, 0.00018303414981346577, 7.8274824772961438e-05, 0.00010071928409161046, 0.00010387797374278307, 0.00012301643437240273, 0.0001030262210406363, 9.6992451290134341e-05, 0.00011619114957284182, 0.00014373278827406466, 0.00018986695795319974, 6.7893030063714832e-05, 0.00012153117859270424, 9.9246273748576641e-05, 0.00019128154963254929, 4.231461207382381e-05, 0.00015893827367108315, 0.00011272993288002908, 8.3465565694496036e-05, 7.8608558396808803e-05, 8.5601968748960644e-05, 0.00011176684347447008, 0.00013269094051793218, 0.00010858137829927728, 9.074345143744722e-05, 0.00011828854621853679, 0.00012861566210631281, 0.0001146381619037129, 0.00010801897587953135, 0.00010545377881499007, 0.00012688644346781075, 7.6291915320325643e-05, 0.00012717943172901869, 0.00013224859139882028, 0.00011720910697476938, 0.00010062357614515349, 0.00012221941142342985, 0.00012034374958602712, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[48] = { 1037, 6007, -15007, 7528, -22, 5464, 13, -9, -329, 9, -1296, -4963, 376, 3771, 40784, 81, 1825, 651, -56, 11515, 2858, 31135, 1230, -49, 810, 2800, 169, 742, 30936, -9200, 23, -620, 5402, -1746, 152, 23928, -217, 123, -150, 9366, 3536, 20798, -2073, 14827, -129, 31894, 322, 17071, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00027585626230575144, 0.00014848810678813607, 0.00014461317914538085, 6.9403729867190123e-05, 0.00034886907087638974, 7.5325449870433658e-05, 0.00031112018041312695, 0.0012658046325668693, 0.00022387408534996212, 0.00039949821075424552, 8.2068421761505306e-05, 7.8801291238050908e-05, 0.00020774755103047937, 0.00015700957737863064, 0.00020483246771618724, 0.00061731657478958368, 8.2222373748663813e-05, 0.00011965627345489338, 0.00018717300554271787, 0.00010809187369886786, 0.00024780677631497383, 4.142633406445384e-05, 0.00045343107194639742, 0.00039535519317723811, 8.5552797827403992e-05, 0.00010092247975990176, 0.00038780653267167509, 7.4165858677588403e-05, 4.984726183465682e-05, 0.00019827389041893184, 0.00071089068660512567, 0.0001718409766908735, 0.00069506460567936301, 0.00011664604244288057, 0.00010496647882973775, 0.00025606711278669536, 0.00042954404489137232, 0.00026285112835466862, 0.0001872202119557187, 8.6817519331816584e-05, 0.00013191456673666835, 5.4563872254220769e-05, 9.744367707753554e-05, 0.00012809464533347636, 0.00015266748960129917, 5.4014821216696873e-05, 0.00021659192861989141, 8.8956774561665952e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[48] = { 1482, -11438, 34844, 18250, -4774, 10949, 1776, -19235, 26798, -16454, 20176, 3990, 13396, 22018, 30571, 1495, -20269, -510, -613, 24932, 11, 16063, 35798, -1552, -282, 797, 72631, 34621, 4022, 2775, 2813, 833, 5127, -31770, 647, 2737, -8352, -417, 2930, -309, 44735, 24719, 19966, 8510, 41275, 1936, 24895, 2300, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 5.9074871387565508e-05, 7.8065902926027775e-05, 4.4104897824581712e-05, 7.5412885053083301e-05, 3.5644581657834351e-05, 5.8936911955242977e-05, 0.00010814494453370571, 5.5287739087361842e-05, 5.9929392591584474e-05, 0.00022863133926875889, 5.273592978483066e-05, 6.239429785637185e-05, 6.6177519329357892e-05, 7.2201393777504563e-05, 4.595936115947552e-05, 7.2941715188790113e-05, 4.4551052269525826e-05, 0.00011480506509542465, 7.8842669609002769e-05, 4.9050438974518329e-05, 4.3896980059798807e-05, 7.2876653575804085e-05, 3.9448535972042009e-05, 6.6183732997160405e-05, 5.6429817050229758e-05, 0.0004094160976819694, 1.9230827092542313e-05, 3.8968166336417198e-05, 0.00014065916184335947, 0.00011579423153307289, 5.7358396588824689e-05, 4.1730934754014015e-05, 3.5000259231310338e-05, 5.3576830396195874e-05, 7.461144559783861e-05, 5.8324822020949796e-05, 9.5535149739589542e-05, 7.5028052378911525e-05, 4.9483092880109325e-05, 9.8037940915673971e-05, 3.6766559787793085e-05, 5.7230572565458715e-05, 7.0535883423872292e-05, 4.7637640818720683e-05, 2.9987229936523363e-05, 6.0944232245674357e-05, 4.080412327311933e-05, 5.9112186136189848e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[48] = { 49360, 26402, 2477, 30724, 26781, 23969, 6737, 2213, 49704, 24952, 2215, 52506, 6443, 70036, 131926, 3268, 6415, 44825, -1808, 2641, 7574, -136, 13433, 14381, 91809, 8630, 3791, 23049, 16725, 19199, 13383, -1611, -1835, 17884, 10986, 4117, 355, 22201, 37031, 13323, 46120, 20416, 4778, 21653, 30837, 31692, 13546, 19035, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 1.918369707709644e-05, 3.9888036553747952e-05, 5.643848271574825e-05, 3.1917170417727903e-05, 3.5530480090528727e-05, 3.6827103031100705e-05, 7.6842741691507399e-05, 8.3735096268355846e-05, 1.9423250705585815e-05, 3.4316777600906789e-05, 6.6931534092873335e-05, 1.9953837181674317e-05, 8.5909705376252532e-05, 1.3754858628090005e-05, 8.9603281594463624e-06, 6.2575520132668316e-05, 7.2355018346570432e-05, 2.1410354747786187e-05, 7.8340417530853301e-05, 6.1239494243636727e-05, 4.8722442443249747e-05, 6.398336699930951e-05, 4.896326208836399e-05, 4.4777912989957258e-05, 1.2300496564421337e-05, 7.6495613029692322e-05, 6.2285966123454273e-05, 3.8368572859326378e-05, 4.2404157284181565e-05, 4.6020337322261184e-05, 5.7265886425739154e-05, 9.0994108177255839e-05, 5.7695786381373182e-05, 3.9615260902792215e-05, 6.2746737967245281e-05, 6.242160452529788e-05, 6.8138244387228042e-05, 3.5072043829131871e-05, 2.4994149498525076e-05, 5.1296225137775764e-05, 2.1204648874117993e-05, 3.852833469863981e-05, 8.8734312157612294e-05, 3.9608039514860138e-05, 3.1489154935115948e-05, 2.8178348657093011e-05, 4.9666334234643728e-05, 4.3181044020457193e-05, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[48] = { 4052, 22252, -4703, 26878, 16149, 1447, 3197, 6832, 10665, 1807, 1027, 34980, 720, -15138, 41968, -43, 2064, 2893, -2481, -1942, 5530, 2864, -18870, -4233, 44546, -2271, 27081, -869, 17182, 206, 1122, -127, -60, 1029, 4490, -1374, -847, 4461, 163, -3888, 13852, -15715, 2938, -3431, 42497, 16033, 5756, -20679, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00030000650440342724, 0.00011872308823512867, 0.00011104291479568928, 9.6941905212588608e-05, 0.00011393790191505104, 7.40542818675749e-05, 0.00013993462198413908, 3.941952672903426e-05, 0.00012219848576933146, 8.8168962975032628e-05, 9.4927221653051674e-05, 7.5459654908627272e-05, 0.00014076205843593925, 0.0001068094716174528, 0.00011706780787790194, 0.00012384557339828461, 0.00011579158308450133, 0.00017442293756175786, 4.7952500608516857e-05, 3.4042703191516921e-05, 3.7539040931733325e-05, 6.45876643829979e-05, 5.0881033530458808e-05, 5.709027755074203e-05, 8.8063155999407172e-05, 0.00017203728202730417, 3.9197475416585803e-05, 9.0904126409441233e-05, 6.9113062636461109e-05, 0.00014868458674754947, 0.00010309756180504337, 0.00010236845264444128, 0.00014717009617015719, 7.6811003964394331e-05, 9.5270283054560423e-05, 0.00017690689128357917, 5.8255362091585994e-05, 0.00014127812755759805, 8.4989973402116448e-05, 6.0076617955928668e-05, 0.00011425525008235127, 5.2731098548974842e-05, 0.00011966691818088293, 6.8326706241350621e-05, 4.5036293158773333e-05, 8.549477206543088e-05, 4.3947904487140477e-05, 7.2001901571638882e-05, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[48] = { 15701, 26337, 14157, 6122, 2822, 20481, 5812, -512, 21564, 3960, 2201, 1744, 4469, 9782, 6588, 249, -770, 1995, 11162, 8689, 6859, -2954, 16867, 20837, 70778, 15097, 23541, 9950, 18759, 13664, -447, 35233, 17, -1407, -1111, 1802, 8593, -5265, -5749, 12271, 5620, 18358, 17993, 37872, 5920, 3098, 11361, 556, };
const TfArray<1, int> tensor_dimension26 = { 1, { 48 } };
const TfArray<48, float> quant26_scale = { 48, { 4.4765754864783958e-05, 3.3842112316051498e-05, 5.7546483731130138e-05, 6.1328413721639663e-05, 8.6130326963029802e-05, 3.7953956052660942e-05, 5.160996806807816e-05, 9.321531979367137e-05, 3.8355050492100418e-05, 9.1635607532225549e-05, 6.1185703088995069e-05, 7.8060053056105971e-05, 8.7608132162131369e-05, 7.1314127126242965e-05, 6.071108509786427e-05, 9.7900367109104991e-05, 8.0144935054704547e-05, 4.0012095269048586e-05, 6.2787461502011865e-05, 4.2187664803350344e-05, 6.6428343416191638e-05, 6.3549174228683114e-05, 5.0013877626042813e-05, 4.0292816265719011e-05, 1.400793462380534e-05, 4.9541969929123297e-05, 3.4440952731529251e-05, 6.3301755290012807e-05, 4.04628153773956e-05, 5.5617452744627371e-05, 8.4238068666309118e-05, 2.6173072910751216e-05, 5.8084515330847353e-05, 6.5136860939674079e-05, 7.6267497206572443e-05, 9.65207873377949e-05, 4.8710087867220864e-05, 4.3393432861194015e-05, 8.6997133621480316e-05, 4.307365816202946e-05, 7.1715163358021528e-05, 4.03027624997776e-05, 4.5015000068815425e-05, 2.3350472474703565e-05, 7.9861332778818905e-05, 6.3929735915735364e-05, 6.1720747908111662e-05, 6.1259888752829283e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[48] = { -3842, 1234, 33304, 12308, 2136, -666, -8641, -7488, -480, -11452, -9875, 1533, -11322, 16161, -31390, 1026, -746, 6366, -15692, 397, -763, 1781, 3661, 657, 6035, -1050, 2534, 1803, -1459, -14166, 73, -4402, -45, 11109, -24, 12668, -8163, -810, -53, 22582, -2796, 294, -126, -4745, -562, -9531, -14669, -8163, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 6.7168628447689116e-05, 0.00010909567208727822, 7.8021403169259429e-05, 7.3529139626771212e-05, 0.00018120322783943266, 6.7053893872071058e-05, 0.00011726047523552552, 6.300866516539827e-05, 7.0124835474416614e-05, 4.8830359446583316e-05, 6.7530992964748293e-05, 0.00012404807785060257, 6.9512556365225464e-05, 7.6767842983826995e-05, 4.3394888052716851e-05, 7.7549972047563642e-05, 0.00010467961692484096, 6.5403582993894815e-05, 7.5552969065029174e-05, 6.6712651459965855e-05, 9.6481504442635924e-05, 0.00017364531231578439, 8.5840314568486065e-05, 9.614387818146497e-05, 0.00044707197230309248, 0.00013027992099523544, 0.00015764511772431433, 0.00010698746336856857, 8.3309241745155305e-05, 6.2439321482088417e-05, 0.00015042441373225302, 8.2894250226672739e-05, 0.00011409039871068671, 5.8807061577681452e-05, 0.00013911556743551046, 9.226952533936128e-05, 0.00012493308167904615, 7.4275376391597092e-05, 0.00028794180252589285, 7.7858268923591822e-05, 0.00014552506036125124, 0.00015308937872759998, 8.0004516348708421e-05, 0.00017509832105133682, 5.9131565649295226e-05, 7.802517939126119e-05, 4.5978849811945111e-05, 9.0867659309878945e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[48] = { -901, 7005, 3078, 2292, -2890, 6842, -688, 8317, 8569, 1469, 24489, -156, 3790, -680, -5842, -1980, -1861, 7088, 2293, 1858, 8788, 49712, -4902, 5540, 7483, 11769, 8366, 1464, 1427, 6081, 3084, 6730, 1855, 5821, 16985, 35970, -46, 3407, 683, 5266, 14063, 53115, 8382, 10975, 12379, 26070, 41810, 10590, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00011823585373349488, 7.2417133196722716e-05, 9.2265887360554188e-05, 0.00011282080231467262, 7.9987534263636917e-05, 8.8403947302140296e-05, 0.00010625455615809187, 6.7294262407813221e-05, 7.3232338763773441e-05, 9.5146562671288848e-05, 3.949154051952064e-05, 0.00010153170296689495, 7.9322766396217048e-05, 0.00010900951747316867, 5.1295020966790617e-05, 7.4419214797671884e-05, 8.2738479250110686e-05, 6.4736108470242471e-05, 7.5462674431037158e-05, 8.6685962742194533e-05, 5.1642782636918128e-05, 2.0795439922949299e-05, 4.6286077122204006e-05, 8.2705264503601938e-05, 8.0552963481750339e-05, 6.3935585785657167e-05, 4.8888949095271528e-05, 0.00010464609658811241, 7.1753041993360966e-05, 8.6130581621546298e-05, 7.1810871304478496e-05, 7.1575625042896718e-05, 0.00011828274000436068, 5.2302621043054387e-05, 4.7873683797661215e-05, 2.8083220968255773e-05, 0.00011449521116446704, 7.6485717727337033e-05, 0.0001186119916383177, 7.2142538556363434e-05, 5.2552954002749175e-05, 1.877894283097703e-05, 8.3386825281195343e-05, 6.1011633079033345e-05, 5.6877714087022468e-05, 3.4235526982229203e-05, 2.3340468032984063e-05, 7.1975016908254474e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int32_t tensor_data29[48] = { 2632, 291, 6753, -791, 3118, 57259, 275, 56389, -12641, 21611, 19796, -443, 100477, -379, 5356, -82, -811, 26885, 7310, 36747, 44146, 14171, -235, 33410, -1609, 43689, 3332, -547, -37, 6169, -2295, 35567, -1046, 624, -14897, 491, 803, 182, -1128, 17929, -11999, 5886, -1365, -3017, -1690, 11087, 17, -2288, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00010542642121436074, 5.0420556362951174e-05, 6.9803259975742549e-05, 5.8711051678983495e-05, 6.644400127697736e-05, 4.1373339627170935e-05, 8.2249986007809639e-05, 3.1751194910611957e-05, 7.0205511292442679e-05, 3.9609843952348456e-05, 0.00016488271648995578, 8.0832629464566708e-05, 2.2748601622879505e-05, 8.9221488451585174e-05, 0.00015000904386397451, 7.5922413088846952e-05, 0.00012115203571738675, 3.7871883250772953e-05, 4.8905127187026665e-05, 2.5929068215191364e-05, 6.3214436522684991e-05, 0.00038881413638591766, 0.00015268099377863109, 3.1232422770699486e-05, 7.4083247454836965e-05, 3.4151998988818377e-05, 8.2390979514457285e-05, 9.8478441941551864e-05, 8.7625376181676984e-05, 9.8413569503463805e-05, 5.1697232265723869e-05, 5.4381758673116565e-05, 9.7632495453581214e-05, 9.8696356872096658e-05, 3.1330466299550608e-05, 0.00014252259279601276, 0.00011176586849614978, 5.0539892981760204e-05, 0.00010520614159759134, 6.6086737206205726e-05, 0.00012207361578475684, 9.9284166935831308e-05, 9.9860902992077172e-05, 8.8675784354563802e-05, 6.2739934946876019e-05, 0.00012963321933057159, 9.456233965465799e-05, 7.1446571382693946e-05, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int32_t tensor_data30[1280] = { -3682, -1854, -2296, -492, 1177, -2142, -2405, -2042, -335, -48, -1031, -3, -79, 547, -1955, -1557, -395, -1047, -472, -1577, -602, 9, -1864, 527, -2172, -4503, -3511, 1115, -2443, -501, -752, 1436, -965, 302, -1835, -1299, 1057, 1179, 1897, -1535, -367, -1379, -226, -923, -1236, -1445, -904, -2789, -1129, -960, 86, 1869, -468, 689, -4097, -493, -1222, -3268, -3247, -2426, -983, -3811, -1388, 2155, -2285, -1553, -1038, -1145, -2301, 2391, -2532, -2312, -64, -329, 2094, -1825, -2822, -2603, -1275, -2261, -834, -4159, -5391, -1155, -2856, 357, 1866, -1679, -2297, -2779, -1717, 868, -1449, -2876, 728, -2780, -3073, -417, -1674, 991, -1606, -790, -3424, -798, -241, -1293, 392, -713, -5192, 705, -3241, -3661, -3036, -763, -548, -2065, -2320, -925, -2425, -2971, -2853, 1286, -1193, 1736, -1574, 304, -3443, -462, -3305, -826, -1879, -2264, -3060, -804, 1822, -2840, -493, -699, -2646, -5887, 968, 1559, -3904, -1506, -3863, -1808, -535, -1667, 995, -2008, 439, -722, -656, -2406, -2666, -1261, -2192, -1387, -1677, 884, -1964, -2758, 1730, -78, 3551, -1174, -1403, 1840, -2936, -557, 1251, -4082, -1750, -1536, 189, -5107, -1816, -4075, -1264, -2428, -1122, -1077, -1081, 1571, -3194, -539, 24, 1208, -2265, -1401, -314, -1129, -305, -2150, -1938, 194, -2179, 234, -1228, -1028, -4146, -711, 397, -18, -3741, 116, -39, 565, -1388, -23, -146, -2976, -1899, -1235, 1138, -3836, 875, -4165, -2952, -1238, 1106, -1921, -1809, -518, -764, -957, -1496, -4846, -2202, -912, -1268, -781, -1095, -1290, -201, -2321, -1639, 2685, -2247, 1916, -2840, -332, -3484, 344, -1449, -116, -2330, 1387, -3574, -127, 788, -1194, -528, 161, -4281, -742, -1456, -362, 1698, -3100, -4847, -642, 137, 920, -1421, -3999, -2413, -1491, -375, -2413, -376, -562, -501, -1659, -1247, 1035, 852, -3806, -405, -2330, -3453, 701, -331, -2053, -2133, -3582, -932, 1413, -2320, -2132, -3345, -1224, -130, 578, 381, -1356, -2332, -684, -1961, -1689, -560, -28, -6355, -3892, -200, -1372, -3238, 1159, -1696, -810, -2596, -1598, -1365, -817, -1542, -1900, -3964, -2375, -2561, -808, 1027, -67, -1720, -202, -1208, -5289, -994, -500, -2490, 799, -1491, -677, 539, -6276, -1909, -2419, 665, -4213, -2429, -3513, -712, 805, 9, 355, -120, -206, -3568, -2505, -3050, 423, -4675, -858, -1261, -866, -1510, -740, 213, -3201, -682, -2321, 127, -860, -1012, 872, -1991, -1859, -3094, -1478, -2866, -2523, -2673, -2531, -875, -2616, 1392, 215, -1707, -2733, -1273, -1411, -1854, -1062, -813, -3592, -489, -2405, -786, -4697, -2238, -834, -1505, -639, -2920, -2309, -2904, -411, -265, 1435, -1158, -1251, -2616, -1389, -622, 161, -1753, -483, -341, -1048, -580, -608, 807, 2943, -2440, -639, -4888, -769, 355, -1112, -2890, 780, -2738, -2217, -1812, -1200, -1235, 648, -1651, 577, -3706, -335, -6269, -975, 932, -1879, -4070, -3224, -895, 776, -2038, -267, -4105, 223, -1711, -1310, -462, -3696, -1126, -2279, -534, -3762, -897, -3072, 69, -90, 767, -826, -618, 846, -1255, -597, 1332, -554, -3550, -498, -2498, 373, -464, -3187, -2091, 2459, -2101, -5396, 246, 1991, -643, -1710, -831, -846, 165, -1071, -162, -1271, -1468, -229, 2149, -2123, -861, -1150, -2612, -782, -3788, 78, -2428, -1583, -1113, -3071, -2731, 65, -2034, -3094, 500, -2597, -50, -46, -4964, -614, -3485, -3688, -285, 833, -392, -1234, -2192, 909, -627, -1345, -936, 1404, -777, -766, -2048, -4002, -677, -77, -1763, -4531, -4344, -4176, -628, -404, -580, -3821, -3374, -88, 1925, 629, -2452, -2597, -3402, -746, -3338, -2093, 922, -2104, -3544, -2288, -3796, -1377, 297, -5771, 196, -1219, -1351, -1775, -1341, -1016, -958, -1411, -1815, -836, 0, -2642, -2523, 532, -1237, -1627, 1433, -1010, -843, -166, -2657, -2965, -950, -2266, -2584, -3084, -673, 950, -1883, -3127, -148, -283, -203, -2468, -1486, -365, -3151, -1423, -791, -1661, -1696, -555, 118, -2681, -3308, 1342, 352, -2330, 1143, 721, -1655, -63, 4049, -1135, -2599, -2644, -434, 281, -1152, -392, -5027, -1437, -3098, -3959, -2730, -793, -1249, -1738, -1189, -3573, -644, -18, -1222, -1032, -1309, -2674, -1619, -1013, -2549, -982, -1777, -2696, -3660, -1974, -1234, 1152, -3523, -780, -2548, 808, -2449, 483, -1409, -2307, -1134, -456, -1594, -2101, -1880, -1722, -1897, -2631, -119, -501, -2568, -964, -3645, -789, -2133, 293, 1016, -4737, -2682, -1104, -2229, -2510, -171, 415, -346, -2387, 14, -4600, -1763, -854, -1220, 1073, -521, 324, -2202, 779, -3838, -3828, -438, -83, -1654, -464, -2378, -340, -362, -4545, -1187, -2299, -1130, -704, -2710, -2365, -1145, 586, -3692, 317, -4552, -2036, -656, -1402, -1229, -1256, -1008, -692, -3519, 426, -2950, -1826, -2273, 149, -1456, 353, -2082, -4751, -692, -2511, 376, -1802, -1898, -889, -238, -649, -1869, -1085, 2061, -1349, -468, -411, 1184, -3125, -3330, -2295, -894, -1633, -1516, -253, 102, 406, 1644, 1027, -4346, -2392, -1919, -3059, 4072, -442, -1597, -3651, -1287, 1425, -2127, -664, -314, -1430, 606, -975, 434, 2715, -2276, 681, -1054, -404, -2399, -3072, -1212, -422, -1904, 840, -2306, -232, 1412, -288, -1611, -290, 738, -445, -1808, -2140, 34, -3516, -1622, -596, -822, -2039, 901, -2821, -2621, -463, 3033, -4973, -398, -463, -2584, -310, -1636, -1672, -1790, -3957, -3729, -891, -1451, -356, 1042, 542, -1325, -2373, -194, -1847, -1781, -1228, -572, -2168, 920, -1251, -791, 778, -3012, -2709, -1367, -3310, -1061, -2037, -2126, -1820, -1500, -2656, -1962, -4573, -3522, -3403, 1115, 1023, -1834, -108, -1146, -888, -1994, -2696, -5418, -1623, -1270, -2007, -2286, 1359, -1069, -883, -569, -623, 927, -1160, 2886, -1362, -1277, -1910, -1373, -184, -1482, -2604, -1359, 991, -4148, -1445, -2449, -2928, -3830, -1929, -437, -3232, -1120, -2590, -1302, -1872, -221, -2840, 973, -187, -2765, -3319, 511, -904, -1287, 274, 219, 1362, -3701, 1304, -2829, 466, -2176, 653, -2836, -1800, -688, -2237, -1717, -1593, -1954, -2916, -1940, -805, -1258, -1315, -2948, -3440, -1673, 860, -1756, -419, 243, -2864, -279, -292, -2197, -1170, -4122, -3299, -839, -2830, -1608, 978, -1297, 1117, -1264, 52, -2129, -1230, -1505, -1897, -1289, -585, -2585, -1919, 1157, -2102, 412, -3809, -1804, -3708, 1438, -6226, -951, 2365, -4432, 1020, -5591, -950, -1067, -3530, -2452, 596, -283, -1880, -1314, -3249, -2578, -1993, 261, -1882, -3122, -838, -4754, 158, 249, -1383, -3718, 575, -4192, -88, -2189, 806, -1925, -2659, 77, -3063, 1283, -3935, 874, -2980, 8, -3407, -1013, -1221, -2969, -1593, -1537, -268, -2794, -2280, -1020, -2531, 527, -3230, -2162, 317, -747, -1118, -2460, -1367, -2024, -992, -550, -2887, -836, -1410, -2755, -195, -504, 761, -5974, -1701, -1203, -1168, -3211, -4418, -624, -683, -2356, -2335, -1686, -3799, -2377, -1813, -4331, -3577, -278, -2503, -2397, -1182, -1824, -2556, -2272, -1848, 684, -1007, 472, 5, 1042, -1425, -3218, -2447, -2216, -1066, -2081, -3635, 365, -1448, -2182, -1249, -4743, 243, -2601, -2087, -910, -1835, -3360, 1197, 284, 426, -1285, -3115, -2912, -1827, -1443, -1925, -1075, -6455, -1615, -1811, -2039, 301, -605, -178, -598, -184, -1631, -816, -592, 320, -157, 2697, -2398, -1920, -3643, -1476, -2853, -934, 769, -176, -1313, 87, -1125, -1104, -3, 833, -3968, -1158, 530, 888, 1243, -2329, -2180, -811, -1912, 512, -3383, -1061, -2964, -2944, -3590, -131, -396, -313, -2017, 1218, -1223, -2562, 1928, 178, -2484, -597, -2096, -3997, -2309, -2177, -2840, -1391, 478, -2735, -3646, -3237, -3508, -2168, 26, -1162, -899, 371, -3646, -677, -1749, -4185, -2240, -100, -1406, -1994, -471, -1855, -438, -2368, 105, -2026, -255, -1467, -614, -2992, -3545, -423, -3494, -1343, 1624, 1578, -2869, -1188, 3285, -184, -4751, -1160, 1785, -817, -385, -1550, -193, -1609, -2538, -1483, -1375, -8322, -711, -1605, -2836, -4039, -2883, -2398, -89, -789, -3765, -423, -595, 3394, -1344, -2456, 5078, -1348, -225, -1722, -3375, -1886, -3166, -2089, -3750, 1786, -1590, -6162, -2607, -856, -4084, 705, -1231, 124, -397, -3011, -2033, -1203, -2517, -2616, -2797, -2044, -4205, -113, -287, 161, -2876, -2328, -2465, -2236, -1603, -1485, -2943, 160, -1050, -821, -2103, -1590, -185, -1276, -1064, -98, 368, -2033, -1454, -2313, 348, -2027, 1399, -2512, -3217, 891, -2522, -464, -2950, -27, -171, -4874, -1973, -2528, -2317, 1654, -2623, -1416, -949, -2848, -2156, -3495, -2109, -1161, -1047, -581, -1727, -2561, -1298, -740, -4186, -969, -3163, -3444, -1066, -1033, };
const TfArray<1, int> tensor_dimension30 = { 1, { 1280 } };
const TfArray<1280, float> quant30_scale = { 1280, { 0.00017776880122255534, 0.00015832642384339124, 0.0001437023893231526, 0.0001803489140002057, 0.00017864444816950709, 0.00012644803791772574, 0.00016419598250649869, 0.0001479348138673231, 0.00019866837828885764, 0.00018456424004398286, 0.00015983288176357746, 0.00017260391905438155, 0.00026472739409655333, 0.0002050363109447062, 0.00014499267854262143, 0.00020737743761856109, 0.00020580079581122845, 0.00014334608567878604, 0.0001689878263277933, 0.00017310596012976021, 0.00019515512394718826, 0.00020938551460858434, 0.0001529100991319865, 0.00018015863315667957, 0.00020472327014431357, 0.0001600171672180295, 0.00014687638031318784, 0.00014822695811744779, 0.00018505009938962758, 0.00017649335495661944, 0.0001919139176607132, 0.00021014874801039696, 0.00016557944763917476, 0.00015689204155933112, 0.00021804850257467479, 0.00018714263569563627, 0.00021469747298397124, 0.00011379910574760288, 0.00034629646688699722, 0.00016451011470053345, 0.00017795192252378911, 0.00015938488650135696, 0.00016305672761518508, 0.00020513944036792964, 0.00018885832105297595, 0.00024695511092431843, 0.00027194831636734307, 0.0001795613206923008, 0.0001618510577827692, 0.00016728763876017183, 0.00021002984431106597, 0.00016981433145701885, 0.00018206432287115604, 0.00014088483294472098, 0.00015002574946265668, 0.00020917145593557507, 0.00014337990432977676, 0.0001326048222836107, 0.00017030330491252244, 0.00015502852329518646, 0.00024577122530899942, 0.00019472702115308493, 0.00018270408327225596, 0.00014418740465771407, 0.00021245068637654185, 0.00016172745381481946, 0.00023351376876235008, 0.00021096842829138041, 0.00014519502292387187, 0.00011875037307618186, 0.00021894938254263252, 0.00019301266002003103, 0.00027573487022891641, 0.00017738582391757518, 0.00018016621470451355, 0.00019783107563853264, 0.00017248967196792364, 0.00019589037401601672, 0.00022022736084181815, 0.00017435585323255509, 0.00019870421965606511, 0.00013055640738457441, 0.00015524357149843127, 0.00014922504487913102, 0.0001494314637966454, 0.00015983601042535156, 0.00015305043780244887, 0.00016071251593530178, 0.0001824883947847411, 0.0001693122903816402, 0.00017110021144617349, 0.00019502548093441874, 0.00018794320931192487, 0.00020254723494872451, 0.00019901084306184202, 0.0001413501740898937, 0.0001747380883898586, 0.00014971908240113407, 0.00017427185957785696, 0.00023605021124240011, 0.0001814827264752239, 0.00019014344434253871, 0.00017249450320377946, 0.00018355877546127886, 0.00019155423797201365, 0.00020217342535033822, 0.00020334207511041313, 0.00022719625849276781, 0.00012629515549633652, 0.00018578543676994741, 0.00018445674504619092, 0.00018962005560752004, 0.00020741559274028987, 0.00023203603632282466, 0.0001892469881568104, 0.00014720937178935856, 0.00013450076221488416, 0.00018302221724297851, 0.00014229603402782232, 0.00016382811008952558, 0.00021202661446295679, 0.00023201455769594759, 0.00017189198115374893, 0.00018281645316164941, 0.00014925080176908523, 0.000184223274118267, 0.00024108123034238815, 0.00018627653480507433, 0.00017755774024408311, 0.00018055425607599318, 0.00013802989269606769, 0.0001861858181655407, 0.00014279397146310657, 0.0001210639820783399, 0.00017534686776343733, 0.00020932161714881659, 0.00026200732099823654, 0.00021550283418036997, 0.00019285001326352358, 0.00015856913523748517, 0.00018001745047513396, 0.00027139388839714229, 0.0001595760986674577, 0.00018661125795915723, 0.00019209216407034546, 0.00020863169629592448, 0.00012727759894914925, 0.00020273168047424406, 0.00028187586576677859, 0.00017238552391063422, 0.00019720919954124838, 0.00015555167919956148, 0.00016642868285998702, 0.00016084178059827536, 0.00015041978622321039, 0.00025868494412861764, 0.00018609881226439029, 0.0001934803876793012, 0.00013374387344811112, 0.00023144787701312453, 0.00013561881496571004, 0.00015639707271475345, 0.00023469238658435643, 0.00014988737530075014, 0.0001642771385377273, 0.00024916350957937539, 0.00016288849292322993, 0.00018874186207540333, 0.00027922200388275087, 0.00022856505529489368, 0.00023209639766719192, 0.0001365914213238284, 0.00022433089907281101, 0.00015885174798313528, 0.00016460639017168432, 0.00014167885819915682, 0.00016116094775497913, 0.00014464187552221119, 0.00015305208216886967, 0.00020727445371448994, 0.00016188637528102845, 0.00017688826483208686, 0.00019523888477124274, 0.00019616993085946888, 0.00017255431157536805, 0.00017289396782871336, 0.00016978973872028291, 0.00018426473252475262, 0.00014382635708898306, 0.00016204659186769277, 0.00018583599012345076, 0.00022411221289075911, 0.00023249608057085425, 0.00010957377526210621, 0.00017909893358591944, 0.00019947673717979342, 0.00022898211318533868, 0.00015382688434328884, 0.00020370316633488983, 0.00019715489179361612, 0.00020329697872512043, 0.00024941231822595, 0.00016436215082649142, 0.00022803951287642121, 0.00014991169155109674, 0.00021196687885094434, 0.00019196212815586478, 0.00021583505440503359, 0.0001338357396889478, 0.00017394981114193797, 0.00014713130076415837, 0.00014371950237546116, 0.00023791399144101888, 0.00018532625108491629, 0.00014478796219918877, 0.00019062479259446263, 0.0001456406171200797, 0.00013635268260259181, 0.00014185348118189722, 0.0002095733507303521, 0.00021173650748096406, 0.00026476636412553489, 0.000178758185938932, 0.00016387508367188275, 0.00021662322978954762, 0.00018578353046905249, 0.00018042667943518609, 0.00017407603445462883, 0.00013652711641043425, 0.00014270788233261555, 0.00021224138617981225, 0.00018759725207928568, 0.00018146038928534836, 0.00020148130715824664, 0.0001439883781131357, 0.00019539694767445326, 0.00014826160622760653, 0.00015959511802066118, 0.00019982046796940267, 0.00016845755453687161, 0.00014484222629107535, 0.00022446356888394803, 0.00015896069817245007, 0.00014860818919260055, 0.00020447539282031357, 0.00025576874031685293, 0.00016031111590564251, 0.00016137506463564932, 0.00016452695126645267, 0.00025495022418908775, 0.00015453615924343467, 0.00014619712601415813, 0.00020051401224918664, 0.00022860981698613614, 0.00015223288210108876, 0.00020705084898509085, 0.00019083725055679679, 0.00013515198952518404, 0.0001661560672800988, 0.00016485941887367517, 0.00010173531336477026, 0.00014858048234600574, 0.00015585923392791301, 0.00025953762815333903, 0.00017589506751392037, 0.00015353609342128038, 0.00017447375284973532, 0.00019199552480131388, 0.00027180305914953351, 0.00016281606804113835, 0.00022331415675580502, 0.00020297228184062988, 0.00015494826948270202, 0.00016881746705621481, 0.00024119581212289631, 0.00020647275960072875, 0.00019505535601638258, 0.00017505083815194666, 0.00017409096471965313, 0.00018839897529687732, 0.00014054888742975891, 0.00022068229736760259, 0.00020648395002353936, 0.00017432935419492424, 0.00024545961059629917, 0.0002107689215335995, 0.00017202254093717784, 0.00016476550081279129, 0.00013792855315841734, 0.0001858034374890849, 0.00016310988576151431, 0.00025006255600601435, 0.00021822580310981721, 0.00018423350411467254, 0.00023238433641381562, 0.00018338023801334202, 0.0001441310450900346, 0.0001768353977240622, 0.00023002264788374305, 0.00019986250845249742, 0.00016055034939199686, 0.00019605176930781454, 0.00011858045763801783, 0.00023509335005655885, 0.00013648095773532987, 0.00014584156451746821, 0.00021562613255809993, 0.00017477400251664221, 0.0001664576557232067, 0.0001696456311037764, 0.00015393509238492697, 0.00019106674881186336, 0.00015371796325780451, 0.00026482008979655802, 0.00022290644119493663, 0.00023122114362195134, 0.00016048119869083166, 0.00014879349328111857, 0.00018288852879777551, 0.00025500351330265403, 0.00020260382734704763, 0.00018745903798844665, 0.0002106402680510655, 0.00014521054981742054, 0.00018043658928945661, 0.00015591605915687978, 0.00015284301480278373, 0.00020797971228603274, 0.00015603376959916204, 0.0001589510211488232, 0.00015106373757589608, 0.00015676711336709559, 0.00019077092292718589, 0.00015555295976810157, 0.00013485368981491774, 0.00015921417798381299, 0.0001823798957047984, 0.00013851845869794488, 0.00019263944705016911, 0.00014379875210579485, 0.0001997627696255222, 0.00017679207667242736, 0.00020491215400397778, 0.00021068075147923082, 0.0002451585023663938, 0.00018641278438735753, 0.0001701276923995465, 0.00015741302922833711, 0.00016260689881164581, 0.00020002720702905208, 0.00018600943440105766, 0.00017534660582896322, 0.00018351194739807397, 0.00019057485042139888, 0.00018333467596676201, 0.00018903422460425645, 0.00017250943346880376, 0.00016185446293093264, 0.00018703911337070167, 0.00017208156350534409, 0.00016740980208851397, 0.00014010687300469726, 0.00024286832194775343, 0.00013912015128880739, 0.00018929273937828839, 0.00017837418999988586, 0.00018203363288193941, 0.00016396661521866918, 0.00015470421931240708, 0.00018642460054252297, 0.00018194258154835552, 0.00017625589680392295, 0.00024045979080256075, 0.00017997647228185087, 0.00019127639825455844, 0.00022278625692706555, 0.00023892927856650203, 0.00017295629368163645, 0.0001347155193798244, 0.0001733197714202106, 0.00026565973530523479, 0.00022246377193368971, 0.0001542208920000121, 0.00015895113756414503, 0.00018438469851389527, 0.00017306713561993092, 0.00017447149730287492, 0.00013293608208186924, 0.00021353007468860596, 0.00017425579426344484, 0.0001780182501534, 0.00014911717153154314, 0.00018996946164406836, 0.00016682394198141992, 0.00019690119370352477, 0.00018271488079335541, 0.00017623452004045248, 0.00020558320102281868, 0.00020831408619415015, 0.00016181229148060083, 0.00018649281992111355, 0.00021725321130361408, 0.00015456501569133252, 0.00020508347370196134, 0.0001963320974027738, 0.00022766816255170852, 0.00014557089889422059, 0.00020030330051667988, 0.00021768682927358896, 0.00019083402003161609, 0.00016350093937944621, 0.00015852373326197267, 0.00018662505317479372, 0.00018439626728650182, 0.00012819841504096985, 0.00015836846432648599, 0.00014158568228594959, 0.00012827586033381522, 0.00010936710896203294, 0.00015712213644292206, 0.00013254806981422007, 0.00022428639931604266, 0.0002164905599784106, 0.0001809977984521538, 0.00015166249067988247, 0.00027357760700397193, 0.0001748640788719058, 0.00015393442299682647, 0.00018697317864280194, 0.00016695694648660719, 0.00011725065269274637, 0.00015383555728476495, 0.00016800526645965874, 0.00017702059994917363, 0.0001939308422151953, 0.00013708471669815481, 0.00019194795459043235, 0.00020348085672594607, 0.00017346293316222727, 0.00021155623835511506, 0.00013985551777295768, 0.00024784397101029754, 0.00024463474983349442, 0.00020820141071453691, 0.00020041762036271393, 0.00017576215032022446, 0.00021002542052883655, 0.00016564065299462527, 0.00020467553986236453, 0.00016552492161281407, 0.00018296341295354068, 0.00018288374121766537, 0.00019408662046771497, 0.00024139210290741175, 0.00024261781072709709, 0.00023591294302605093, 0.00018458360864315182, 0.00018606273806653917, 0.00018724313122220337, 0.00020410382421687245, 0.00019073454313911498, 0.00017950852634385228, 0.0001526497071608901, 0.00023178440460469574, 0.00015470359358005226, 0.00018669200653675944, 0.00015035796968732029, 0.000143540179124102, 0.00026497378712520003, 0.00013983639655634761, 0.00017809275595936924, 0.00013229498290456831, 0.00019426619110163301, 0.00019325273751746863, 0.00029633176745846868, 0.00020155096717644483, 0.00017318005848210305, 0.00014192906382959336, 0.00020630337530747056, 0.0001775990822352469, 0.00018368169548921287, 0.00013984943507239223, 0.00015677382180001587, 0.00015775271458551288, 0.00022324887686409056, 0.00023265280469786376, 0.00022754730889573693, 0.00016225692525040358, 0.0001713517849566415, 0.00018634810112416744, 0.00016681676788721234, 0.00020756383310072124, 0.00014546510647051036, 0.00017574754019733518, 0.00019701838027685881, 0.00016629887977614999, 0.00016356910055037588, 0.00017177405243273824, 0.00016680450062267482, 0.0001664308801991865, 0.00020860150107182562, 0.00017011900490615517, 0.00015938504657242447, 0.00022560931392945349, 0.0001430877746315673, 0.00015450804494321346, 0.00014329196710605174, 0.00015624977822881192, 0.00025585826369933784, 0.00020290071552153677, 0.00022188098228070885, 0.00017438546638004482, 0.00019440017058514059, 0.00017460697563365102, 0.00017851346638053656, 0.00019325647735968232, 0.00019141881784889847, 0.00024138402659446001, 0.00018563074991106987, 0.00018456879479344934, 0.0002163331228075549, 0.00012647105904761702, 0.00021256993932183832, 0.00015364111459348351, 0.00017394304450135678, 0.00015862994769122452, 0.00014424489927478135, 0.00015130887913983315, 0.00018338141671847552, 0.00022577092749997973, 0.00018477122648619115, 0.00016948425036389381, 0.00019877168233506382, 0.00017080838733818382, 0.00026200644788332283, 0.00023551743652205914, 0.00022391954553313553, 0.00014592171646654606, 0.00017629042849875987, 0.00014192039088811725, 0.00017375520837958902, 0.00018271073349751532, 0.00020560818666126579, 0.00020631926599889994, 0.00015934757539071143, 0.00017832528101280332, 0.0001576005743118003, 0.00016596411296632141, 0.00017243846377823502, 0.00012226779654156417, 0.00015503147733397782, 0.00017598010890651494, 0.00018733950855676085, 0.0001832831185311079, 0.0002218024164903909, 0.00019234250066801906, 0.0001917563786264509, 0.00016209374007303268, 0.00012407604663167149, 0.00021081481827422976, 0.00018035268294624984, 0.00017790899437386543, 0.00018051613005809486, 0.00019948146655224264, 0.00021530680533032864, 0.00020130038319621235, 0.00022714273654855788, 0.00015182539937086403, 0.0001921175280585885, 0.00015699178038630635, 0.00015879294369369745, 0.00018518845899961889, 0.00021524765179492533, 0.00017890993331093341, 0.00022970660938881338, 0.00017623341409489512, 0.00020637996203731745, 0.00017213737010024488, 0.00013243412831798196, 0.00023457856150344014, 0.00016149782459251583, 0.00019441291806288064, 0.00017197996203321964, 0.00017155900422949344, 0.00015951041132211685, 0.0001860524935182184, 0.00014554115477949381, 0.00022868027735967189, 0.00025183273828588426, 0.00020793122530449182, 0.00016679703549016267, 0.00017514584760647267, 0.00014851076412014663, 0.00021570071112364531, 0.00015711686864960939, 0.00028442946495488286, 0.00020408589625731111, 0.00021669837587978691, 0.0002382501115789637, 0.00015929715300444514, 0.00018756504869088531, 0.00012629515549633652, 0.00016058258188422769, 0.00018839127733372152, 0.00012804183643311262, 0.00024134218983817846, 0.00015261884254869074, 0.00016708520706743002, 0.00020823626255150884, 0.00021883474255446345, 0.00014897162327542901, 0.00020187215704936534, 0.00020931800827383995, 0.00022173330944497138, 0.00017035550263244659, 0.00023942968982737511, 0.00016868641250766814, 0.00018358914530836046, 0.00018488486239220947, 0.00016909700934775174, 0.0001940394431585446, 0.00018761263345368207, 0.00023527903249487281, 0.00020979736291337758, 0.0002169645595131442, 0.00016459102334920317, 0.00019546510884538293, 0.00019088508270215243, 0.00024116913846228272, 0.00015667428669985384, 0.00014003779506310821, 0.00014764851948712021, 0.00013081086217425764, 0.0001684373855823651, 0.00017775568994693458, 0.00014726621157024056, 0.00016355501429643482, 0.0002060951228486374, 0.0001425969967385754, 0.00016882424824871123, 0.0001745889603625983, 0.00016323465388268232, 0.00020005018450319767, 0.00026987001183442771, 0.00027087950729764998, 0.00023409703862853348, 0.00015131043619476259, 0.00022440597240347415, 0.00019822129979729652, 0.00020740440231747925, 0.00012770263128913939, 0.00016646504809614271, 0.00016732754011172801, 0.00020071904873475432, 0.00019658802193589509, 0.00013863903586752713, 0.00013035791926085949, 0.00021520166774280369, 0.00016128335846588016, 0.00012941622117068619, 0.00027451268397271633, 0.00014229255612008274, 0.00021224608644843102, 0.00023054922348819673, 0.00016689806943759322, 0.00018014574015978724, 0.00020873532048426569, 0.00015826064918655902, 0.00017112582281697541, 0.00016443464846815914, 0.00023364537628367543, 0.00017847634444478899, 0.00015717078349553049, 0.0001891814754344523, 0.00020873315224889666, 0.00015237208572216332, 0.00023686497297603637, 0.00028775827377103269, 0.00020586671598721296, 0.00023902510292828083, 0.00015276370686478913, 0.00016503328515682369, 0.00025402390747331083, 0.00026472951867617667, 0.00023273934493772686, 0.00015883371816016734, 0.00015384955622721463, 0.00020429538562893867, 0.00022551778238266706, 0.00013133558968547732, 0.00020411457808222622, 0.00016747234622016549, 0.00011939542309846729, 0.00019970924768131226, 0.00018219937919639051, 0.00021495741384569556, 0.00020538009994197637, 0.00022111064754426479, 0.00016769095964264125, 0.00017654722614679486, 0.00014201502199284732, 0.00023262981267180294, 0.00020408780255820602, 0.0001299707219004631, 0.00016697867249604315, 0.00025883654598146677, 0.00022504031949210912, 0.00023212366795632988, 0.00017363215738441795, 0.00020299288735259324, 0.0001744396286085248, 0.00017882650718092918, 0.00016294358647428453, 0.00010636949446052313, 0.00021494895918294787, 0.0001689504279056564, 0.00019220552348997444, 0.00013384588237386197, 0.00019560747023206204, 0.00020788019173778594, 0.00022546808759216219, 0.0002006373688345775, 0.00015287174028344452, 0.0002395821938989684, 0.00019346937187947333, 0.00026558342506177723, 0.00020674735424108803, 0.00016947495169006288, 0.00022487969545181841, 0.00015274051111191511, 0.00017128628678619862, 0.00014380202628672123, 0.00016542742378078401, 0.0001748551003402099, 0.00017705977370496839, 0.00014659590669907629, 0.00018044759053736925, 0.00017014975310303271, 0.00016830717504490167, 0.00016929682169575244, 0.00016205740394070745, 0.00025437553995288908, 0.00024803902488201857, 0.00012232261360622942, 0.00014485380961559713, 0.00021000883134547621, 0.00016207023872993886, 0.00019837102445308119, 0.00011825124238384888, 0.00018773655756376684, 0.00020711591059807688, 0.00018023252778220922, 0.00015877748955972493, 0.00020687087089754641, 0.00020154427329543978, 0.00017387750267516822, 0.0001745593617670238, 0.00016424505156464875, 0.00016220247198361903, 0.00019258445536252111, 0.00020156954997219145, 0.00018995891150552779, 0.00014661600289400667, 0.00014001570525579154, 0.00016011866682674736, 0.00018333941989112645, 0.00018226646352559328, 0.00014218584692571312, 0.00018175120931118727, 0.0001538288634037599, 0.00018630015256348997, 0.00028264120919629931, 0.00019793611136265099, 0.00015617733879480511, 0.00020395922183524817, 0.0002193229302065447, 0.00024106063938234001, 0.00022548247943632305, 0.00017151072097476572, 0.00026857067132368684, 0.00020632866653613746, 0.00017509699682705104, 0.00021368786110542715, 0.0001547159772599116, 0.00024866059538908303, 0.00018149855895899236, 0.00018978914886247367, 0.00015746710414532572, 0.00021827468299306929, 0.00018292092136107385, 0.00021022908913437277, 0.00021422574354801327, 0.00015202369831968099, 0.00012368957686703652, 0.00020345894154161215, 0.0001502739469287917, 0.00014904007548466325, 0.00015080385492183268, 0.0002114617673214525, 0.00021353148622438312, 0.000193639105418697, 0.0001275136019103229, 0.00013805639173369855, 0.00021995158749632537, 0.00019554080790840089, 0.00019370809604879469, 0.00016368631622754037, 0.00013562141975853592, 0.00020518025849014521, 0.00015097024152055383, 0.00014335884770844132, 0.00016119840438477695, 0.00019723775039892644, 0.00017139378178399056, 0.00023268816585186869, 0.00021215146989561617, 0.00020395847968757153, 0.00023482715187128633, 0.00015973388508427888, 0.00015753002662677318, 0.00016927476099226624, 0.0002109608321916312, 0.0001678437547525391, 0.00018553216068539768, 0.00026021533994935453, 0.00023672354291193187, 0.00015140537288971245, 0.00017204115283675492, 0.00020380776550155133, 0.00017595358076505363, 0.00014950594049878418, 0.00013161769311409444, 0.00015785520372446626, 0.00015920739679131657, 0.00017624202882871032, 0.00016571961168665439, 0.00020516941731330007, 0.00025737856049090624, 0.00015845616871956736, 0.00022240192629396915, 0.00021517006098292768, 0.00013901706552132964, 0.00016381926252506673, 0.00015830073971301317, 0.00019378718570806086, 0.00021028767514508218, 0.00015601236373186111, 0.00021024064335506409, 0.00015307850844692439, 0.00016161602979991585, 0.00015285849804058671, 0.00018162110063713044, 0.00017087467131204903, 0.00020651286467909813, 0.00014923150592949241, 0.00020162742293905467, 0.00013498215412255377, 0.0001652656210353598, 0.00018381787231191993, 0.00018638222536537796, 0.00014644557086285204, 0.00013414538989309222, 0.00017062075494322926, 0.00018578366143628955, 0.00020419954671524465, 0.00020932956249453127, 0.00023079317179508507, 0.00016733088705223054, 0.00013205358118284494, 0.00019173015607520938, 0.00014617199485655874, 0.00023123648134060204, 0.00027474522357806563, 0.00014640629524365067, 0.00015601547784171999, 0.00017520166875328869, 0.0002832622267305851, 0.00014556756650563329, 0.00021697582269553095, 0.00015591889678034931, 0.00020940016838721931, 0.00015655881725251675, 0.0001724205503705889, 0.00014466409629676491, 0.00020100364054087549, 0.00017282299813814461, 0.00019425306527409703, 0.00018409939366392791, 0.00017931793991010636, 0.00022391750826500356, 0.00017219748406205326, 0.00022178345534484833, 0.00017553768702782691, 0.00021734695474151522, 0.00018583450582809746, 0.0001508716813987121, 0.00018822222773451358, 0.00014377370825968683, 0.00014339487825054675, 0.00016812766261864454, 0.00016025469813030213, 0.00013355669216252863, 0.00019058138423133641, 0.00015314620395656675, 0.00014385100803337991, 0.00016242422861978412, 0.0001876975002232939, 0.00017120575648732483, 0.0001297120179515332, 0.00014187490160111338, 0.00024980853777378798, 0.0002174844266846776, 0.00018958878354169428, 0.00018391975027043372, 0.00023538993264082819, 0.000156345748109743, 0.00017990056949201971, 0.00017532122728880495, 0.00016732481890358031, 0.00020545265579130501, 0.00019781570881605148, 0.00017647670756559819, 0.00024699050118215382, 0.0002421518147457391, 0.00018078464199788868, 0.00018838270625565201, 0.00016706838505342603, 0.00016451424744445831, 0.00021572154946625233, 0.00016302125004585832, 0.00016658809909131378, 0.00020376089378260076, 0.00021269681747071445, 0.0001543031248729676, 0.0001658588444115594, 0.00019800364680122584, 0.00016025666263885796, 0.00020194370881654322, 0.00018987290968652815, 0.00017475921777077019, 0.00019557110499590635, 0.0002032579795923084, 0.00020025666162837297, 0.00015469803474843502, 0.00014268075756262988, 0.0001109676159103401, 0.00013761449372395873, 0.00026270179660059512, 0.00016916434105951339, 0.00026992984930984676, 0.00021563007612712681, 0.00013990413572173566, 0.00019350516959093511, 0.00012534293637145311, 0.00017549547192174941, 0.00018811710469890386, 0.00026592673384584486, 0.00017973105423152447, 0.0001631050108699128, 0.00022762604930903763, 0.00016986556875053793, 0.00020175985991954803, 0.00011902795085916296, 0.00014855572953820229, 0.0001783609768608585, 0.00019613573385868222, 0.00020651711383834481, 0.00018115139391738921, 0.0001630886981729418, 0.00024092751846183091, 0.0001381301844958216, 0.00024452910292893648, 0.00018255623581353575, 0.00016683217836543918, 0.00017801094509195536, 0.00015365392027888447, 0.00016034200962167233, 0.0001827613014029339, 0.000180548828211613, 0.00016880502516869456, 0.00025024870410561562, 0.00014431140152737498, 0.00020162988221272826, 0.00019251227786298841, 0.0001851934939622879, 0.00015815881488379091, 0.00024528408539481461, 0.00024901554570533335, 0.00022768240887671709, 0.00017232981917914003, 0.00019395412527956069, 0.00018838683899957687, 0.00021277627092786133, 0.00015483255265280604, 0.00018771414761431515, 0.00018647224351298064, 0.00020424644753802568, 0.00011006623390130699, 0.00018131684919353575, 0.00024811594630591571, 0.00016698424587957561, 0.00016635011706966907, 0.00017941562691703439, 0.00016509024135302752, 0.000222571543417871, 0.00015093157708179206, 0.00018449677736498415, 0.00019235964282415807, 0.00021033373195677996, 0.00014845571422483772, 0.00018575541616883129, 0.00022037872986402363, 0.0001375634892610833, 0.00017961586127057672, 0.00022746884496882558, 0.00015345549036283046, 0.00012181218335172161, 0.00014720403123646975, 0.00027111740200780332, 0.00016045477241277695, 0.00018779504171106964, 0.00021497211128007621, 0.00017973082140088081, 0.00015614584845025092, 0.0001497295597800985, 0.00016464531654492021, 0.00013068370753899217, 0.00014858214126434177, 0.00017331328126601875, 0.0001519221841590479, 0.00020820365170948207, 0.00021451343491207808, 0.00017171198851428926, 0.00018721546803135425, 0.00016878171300049871, 0.00016411255637649447, 0.0002173759276047349, 0.0002481699048075825, 0.00015747977886348963, 0.00016708153998479247, 0.00016641245747450739, 0.00022998161148279905, 0.00018605527293402702, 0.00016513851005584002, 0.0001732331293169409, 0.00019307217735331506, 0.00015483908646274358, 0.00016483083891216666, 0.00020029406005050987, 0.00016338212299160659, 0.00021380702673923224, 0.00021852884674444795, 0.00014126565656624734, 0.0002702584897633642, 0.00019115224131383002, 0.00015988051018211991, 0.00019802416500169784, 0.00018336191715206951, 0.0001990626915358007, 0.00033587214420549572, 0.00016596715431660414, 0.00022486280067823827, 0.0002326261019334197, 0.00015125615755096078, 0.00014998712867964059, 0.00018827557505574077, 0.00018698450003284961, 0.0001459404593333602, 0.00017979912809096277, 0.00014246196951717138, 0.0002204986521974206, 0.00020842178491875529, 0.00015042503946460783, 0.00018107124196831137, 0.00021407182794064283, 0.00020093255443498492, 0.00024292130547109991, 0.00018721826199907809, 0.00020075660722795874, 0.00018660695059224963, 0.0001437840546714142, 0.00018008099868893623, 0.00018314730550628155, 0.00029544412973336875, 0.00016404317284468561, 0.00014367866970133036, 0.00012969506497029215, 0.0001992433681152761, 0.00017079438839573413, 0.00018914097745437175, 0.00017422698147129267, 0.00015824248839635402, 0.00015683422680012882, 0.00018057058332487941, 0.00020361371571198106, 0.00022380496375262737, 0.00017918665253091604, 0.00015151214029174298, 0.00018248581909574568, 0.00013096723705530167, 0.00014601227303501219, 0.00016353325918316841, 0.00016790239897090942, 0.00024458928965032101, 0.00017271401884499937, 0.00021613523131236434, 0.00017551073688082397, 0.00016870131366886199, 0.00017305869550909847, 0.00019611942116171122, 0.00019523943774402142, 0.00015706490376032889, 0.00015846549649722874, 0.00017184342141263187, 0.00014292025298345834, 0.00032817042665556073, 0.00019277021056041121, 0.0001731331431074068, 0.00019774145039264113, 0.00016140731167979538, 0.00024899444542825222, 0.00018375209765508771, 0.00014468605513684452, 0.00022256509691942483, 0.00020164567104075104, 0.00010540345101617277, 0.00022038612223695964, 0.00014798674965277314, 0.00019928284746129066, 0.00019271715427748859, 0.00016916979802772403, 0.00016193413466680795, 0.00018479257414583117, 0.00017726540681906044, 0.00015019260172266513, 0.00015178578905761242, 0.00016851830878295004, 0.0002419872471364215, 0.00018984721100423485, 0.00018360072863288224, 0.00013824147754348814, 0.00018843710131477565, 0.00031628992292098701, 0.00016717135440558195, 0.00022588885622099042, 0.00018189867842011154, 0.00016059716290328652, 0.00019609332957770675, 0.00014068942982703447, 0.0002493861538823694, 0.00024095008848235011, 0.00015116462600417435, 0.00016588077414780855, 0.00020222025341354311, 0.00019071139104198664, 0.00023946134024299681, 0.0002538660482969135, 0.0001406448136549443, 0.0001968042051885277, 0.0001760369777912274, 0.00016808597138151526, 0.00013650978507939726, 0.00015438465925399214, 0.00020795014279428869, 0.00017542476416565478, 0.00020467596186790615, 0.00019732661894522607, 0.00016268469335045666, 0.00016843453340698034, 0.00013380471500568092, 0.00019527811673469841, 0.00018094638653565198, 0.000151014857692644, 0.00019747817714232951, 0.00018186628585681319, 0.00024988592485897243, 0.00020909534941893071, 0.00016625637363176793, 0.0002208278892794624, 0.00011420564260333776, 0.00017123697034548968, 0.00016740005230531096, 0.00016481979400850832, 0.00018103329057339579, 0.0001708169438643381, 0.00020133177167735994, 0.00022166012786328793, 0.000120460033940617, 0.00022507048561237752, 0.00013305858010426164, 0.0001936936896527186, 0.00029308907687664032, 0.00020459365623537451, 0.0001541537931188941, 0.00016532004519831389, 0.00016715844685677439, 0.00017351641145069152, 0.00016990514995995909, 0.00015847267059143633, 0.00011949249892495573, 0.0001471271098125726, 0.00014725298387929797, 0.00019148399587720633, 0.00018868014740291983, 0.00020129817130509764, 0.00012650260759983212, 0.00020071053586434573, 0.00015483141760341823, 0.0001168829039670527, 0.00015117740258574486, 0.00022595423797611147, 0.00012955549755133688, 0.00019104441162198782, 0.0001627837773412466, 0.0001589259336469695, 0.00016396511637140065, 0.00017136603128165007, 0.00015834055375307798, 0.00023184216115623713, 0.00011305526277283207, 0.00015463665477000177, 0.00021037386613897979, 0.00020002333621960133, 0.00019450359104666859, 0.00019246511510573328, 0.00016961318033281714, 0.00018016398826148361, 0.00019369643996469676, 0.00020745291840285063, 0.00018953859398607165, 0.00014670491509605199, 0.00015653081936761737, 0.00021851166093256325, 0.00022825939231552184, 0.00015380427066702396, 0.00020723223860841244, 0.00017861952073872089, 0.00021272921003401279, 0.00021503001335076988, 0.00016029416292440146, 0.00017765966185834259, 0.00015247885312419385, 0.00016684121510479599, 0.00021263129019644111, 0.0001881154312286526, 0.00024933766690082848, 0.00017701501201372594, 0.00016426440561190248, 0.00019043125212192535, 0.00012595472799148411, 0.00013743231829721481, 0.00023103231796994805, 0.00018110514793079346, 0.00014238167204894125, 0.00018046221521217376, 0.00016563787357881665, 0.00018703340901993215, 0.00018493641982786357, 0.00015209530829451978, 0.00019514742598403245, 0.00013884002692066133, 0.00017039713566191494, 0.00020480186503846198, 0.00017429271247237921, 0.00014418172941077501, 0.00021076956181786954, 0.00022241294209379703, 0.00019897757738362998, 0.00019236172374803573, 0.00016024737851694226, 0.00014568452024832368, 0.00018168753013014793, 0.00022746778267901391, 0.00014503809507004917, 0.00015760076348669827, 0.00017997829127125442, 0.00023465516278520226, 0.00015652607544325292, 0.00022615217312704772, 0.0002183973410865292, } };
const TfArray<1280, int> quant30_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[8*1280] = { 
  6, -44, -18, -23, 39, -56, 25, 54, 25, -116, -89, 91, -75, -2, 117, 68, -70, 61, 90, 69, 26, 9, -62, -23, -9, -13, 82, -113, 51, -99, 94, 91, -26, 77, -38, -17, -37, -97, 38, -70, -101, 94, 60, -86, -68, -66, -36, 67, -95, -28, -40, 3, 92, -99, 54, 7, -31, -91, -83, 3, 41, -8, -39, -59, 25, 35, 35, 0, 88, 57, 66, 16, 10, 85, -41, -45, -20, -59, -41, 59, -33, 77, -116, 84, -87, 58, -23, -15, -35, 81, -102, -2, 24, -27, 15, 24, 102, -52, 83, -36, -93, -102, -58, 58, -19, 17, -67, -64, 108, -71, 10, -23, 71, -75, -24, 72, -66, -74, 69, 108, 40, -102, 115, 76, 3, -5, 12, -22, -53, -18, -70, 100, 62, -11, -44, -38, 27, -94, -1, 0, -46, 83, 29, -4, -17, -114, -20, 12, 13, -84, 86, -14, -64, -64, -90, -53, -4, -60, 59, -93, -76, -18, 41, 17, -40, 1, 20, 97, 93, 37, 66, -65, -80, -27, -39, 23, 68, -23, -71, -29, -10, -50, -17, 52, -83, -11, -81, 22, 104, 65, -68, -66, -81, 54, -32, -90, 64, 61, 19, -43, -81, -16, 74, 13, 25, -38, 52, -33, -14, 110, -53, -65, 65, 25, -113, 80, -9, -22, 25, 79, 68, -84, 31, -23, -77, -19, 33, 41, -93, 7, 71, -29, -8, 5, -41, -5, 21, 15, -48, -31, 10, -94, 33, 80, 77, -13, -6, 34, 36, -88, 16, 42, -110, 67, 41, -34, 50, -4, -23, -103, -109, -38, 36, -10, -102, 12, 50, -55, 49, -44, -50, 81, 53, -65, 3, 53, -79, 45, -43, -90, -11, -79, 44, -27, 108, 42, 26, 32, -42, 31, 62, -3, 46, 73, -22, -88, -28, 83, 57, 5, 95, 70, -65, -21, -42, 93, 76, 27, -50, 2, -36, -52, -21, -3, -95, -14, -18, -6, -36, 47, -85, 9, -17, 66, 44, 78, 23, -37, 81, -17, -24, 74, 35, 66, -77, -36, -35, 68, 85, -54, -65, -47, -63, -64, -53, -39, 6, -30, -48, 55, -88, -47, 23, 41, 114, -61, 37, 44, -70, 55, 16, -59, 85, -44, 31, 45, -86, -15, -87, -99, 32, -47, -82, 116, 16, -60, -47, 88, 73, 62, 37, -35, -100, 101, 78, 21, -19, 33, -5, 24, 44, -99, -100, -33, -17, 71, 27, 97, 31, -94, -88, -1, -88, -5, 36, 46, 77, 100, -68, -57, 84, -25, -29, -86, -105, 83, -49, 73, -92, 12, 6, -26, -92, 73, -33, -8, -25, 79, -45, 92, -10, 10, -25, 87, -102, -48, 22, -119, -113, -76, 45, 76, -55, 62, 65, -38, -84, 52, -29, -11, 7, -66, 49, -29, 79, 37, 77, 12, -87, 99, 22, -2, -7, -43, 35, 95, 56, -47, 34, -62, 91, 13, 66, 102, -6, 78, -30, -74, -56, 15, -89, 98, -39, -48, -85, 80, 4, -82, -21, -68, 59, 61, 55, -68, 5, -74, -51, 84, -11, -42, -108, -26, 63, 44, -12, 7, -90, -36, -18, -70, 37, -95, 103, 9, -14, -46, 93, -108, -39, -19, 58, 20, 67, -93, -53, -51, -2, -35, 54, 19, 96, 69, -23, 62, -7, -35, 91, -70, -9, -55, -1, 16, 17, -28, -32, -50, -44, 20, -72, 70, -6, -9, 53, -90, -41, -80, 36, -92, -77, -39, 26, 2, 33, 75, 43, 30, 19, 12, -8, 21, -6, -41, 50, -21, 87, 73, 65, 112, -61, -15, 15, 16, -96, 4, 55, 6, 36, 21, -5, -64, -11, 65, -18, 0, 39, -55, 106, 51, 37, 3, 84, -13, -83, -77, -5, -54, -91, 68, 102, -95, -8, -73, 59, 107, 48, 84, -64, 27, 47, 51, 27, 72, -14, -73, 51, -72, 53, 44, -26, 69, 17, -20, -93, -15, 37, -81, -90, 10, -82, 40, 71, 57, 38, -47, 2, -9, -24, 76, -20, 6, -107, 55, -109, -37, 115, 47, 37, 40, -69, 68, 45, -62, -95, 80, 78, 72, 53, -84, -30, -88, -5, 47, -94, -23, 103, 54, -1, -12, 3, -85, 57, 17, 40, 17, 19, 108, 55, -68, 45, -78, -75, -75, 39, 27, -60, -62, 96, 47, -51, 80, 65, 24, -1, -55, -18, 70, -13, -42, 1, -7, 100, 10, 22, 11, 26, -71, -1, 91, -45, 90, 79, 0, -86, 5, 109, -63, 14, -46, 2, -68, 34, 79, -59, -105, -90, -81, 49, -9, -25, -52, 6, 41, -85, 77, -1, 56, -6, -32, -14, 63, -45, -43, 47, 4, 40, -70, -1, -13, 64, -101, -54, 67, 29, -72, 68, -89, 82, 1, -41, -40, -29, 59, 8, -31, -26, 13, -99, -52, -77, 51, 74, 4, -110, -47, 70, 25, -89, -75, -27, -48, 87, 94, 56, -82, -48, 15, 12, 47, -85, 78, 103, -57, 21, -34, 69, -21, -17, -88, 41, -64, 28, 2, -90, -2, -7, -24, -90, -79, -79, -65, -52, -89, 24, -28, 21, 31, 78, 40, 61, -13, 4, -51, 45, -21, 7, -74, -82, -46, 38, -99, 96, -81, 84, -106, 26, 60, -52, 7, -41, 78, 80, 45, -40, 69, 98, 107, 44, -80, 27, -49, -36, 64, 35, 53, 20, -6, 52, -71, -49, -56, 42, -21, -70, 81, -97, 57, 36, -16, 14, -13, -55, -45, 17, 34, 58, 88, 102, 13, -83, -76, -83, 11, -3, 78, -51, 1, 88, 23, -80, 48, 25, -80, 25, -78, 64, 57, 79, 32, 46, 63, 69, -26, -2, -62, 82, -35, -26, 33, 82, -91, 61, -32, 73, 41, 11, -60, -13, -80, -75, 73, -6, -4, -21, -60, 45, 48, 37, 43, -7, -41, -23, -66, -40, 37, -71, 39, -112, -88, -64, 59, -104, -11, -45, 50, -89, -98, 21, 60, -6, -61, -58, -3, -78, -108, -24, 57, -68, -65, -6, -35, -60, -41, -77, -95, 113, 37, -53, -108, 25, -95, -87, 104, -86, 114, -81, -11, -60, 71, 85, -84, -75, 22, -4, 37, 19, -75, -12, 12, 0, 49, -107, -86, 110, 10, -33, -43, 18, -2, -10, -59, 30, -33, -30, 29, -11, -9, -16, -15, -67, 45, -85, 63, 54, -39, 15, -80, -91, -69, -32, -75, -66, 0, 17, -89, 13, 0, -12, -15, -106, -57, 12, -38, -110, -23, -93, -20, 34, -92, -83, 0, 24, 70, -46, 79, 45, 67, 86, 43, -68, -32, -8, -54, -75, 78, 49, 51, -42, -34, 39, -81, 47, 79, 33, 76, 54, 97, -85, -112, 42, -49, 75, 49, -55, 73, -62, -18, 21, 53, -72, 88, -83, 72, 59, 38, 34, 98, -36, 8, 68, -71, 69, -24, -98, 60, 12, -36, 17, -84, 77, -99, 51, -90, 66, -42, -17, 34, -68, -59, 21, -43, -7, 56, 81, -10, 80, 65, 3, -10, 47, 79, 106, 9, -5, 86, -36, 46, -60, 57, 70, 27, -75, -30, -51, 49, -45, -19, -33, 95, 8, -89, -42, 43, -58, 81, 71, 19, 14, 55, 100, 92, 53, -98, -82, 4, 74, 106, 24, -76, 7, 80, -84, -8, 74, 6, 77, -57, 1, -109, 100, 9, -20, -64, -16, 89, 59, -41, 21, 41, -78, -53, -60, 91, 43, 47, 6, -51, 16, 81, -34, -94, 85, -7, 31, 85, -75, -87, -24, -80, -24, 43, -70, 71, -51, 19, 84, 7, 75, -10, 6, 84, 59, -77, -1, 75, -27, -30, 84, -100, 97, 27, 39, 20, 3, 23, -17, -5, -23, -31, 31, -56, -14, -102, -64, -63, 71, -85, -68, -89, -82, 54, -45, 78, 27, 43, -100, 32, -58, -40, 98, -4, -97, 67, -89, -56, 58, 43, 19, -105, -40, -61, -76, -20, 86, 32, 1, -79, 77, -83, -41, -97, 
  71, -14, -21, 0, 0, -47, 72, -7, 64, 33, -104, -15, 27, 67, -39, 80, 17, 23, -18, 3, -49, 31, 15, 4, -13, 58, -37, -81, 106, 32, 84, 45, 33, 36, 6, -9, 47, 38, -12, 42, -80, 75, 89, 56, 53, 53, -22, 57, -87, 112, -25, -68, -81, 47, 79, 90, 37, -16, 19, 72, -68, -29, -66, -73, -50, -17, 33, -58, -24, -53, 64, -22, 7, -52, -15, -69, -8, -64, 61, -4, 92, -71, -2, 38, 72, 79, -11, 88, -83, 11, -55, -30, -57, 6, -37, 100, 29, -67, -82, 51, -5, -59, 3, -75, -43, -26, -29, -46, -50, 56, -61, -41, 90, 65, -40, 66, 35, -87, 38, 70, -20, -25, 66, -76, -45, 35, -97, 61, -77, -86, 80, -92, -79, -54, -26, -61, -92, 99, -31, 83, -49, -1, 56, 106, 20, -25, 49, -110, -53, -12, -38, 53, -27, -41, -4, -69, 14, -45, 30, 121, -15, 100, -37, -89, 98, 72, 86, 83, -6, 10, -25, 56, 30, 12, -60, -1, 32, 20, 84, -9, 10, 55, 17, -74, -27, 27, -76, -73, 17, -19, -74, -96, 3, -12, 23, -41, -109, -21, -104, 22, 13, -85, -8, -67, -39, -65, -103, -38, -7, -94, -65, -1, -97, 49, 8, -21, -58, 12, 23, -83, -71, 67, 15, -100, 42, 2, -52, 30, 36, -59, 46, -40, 98, 0, -52, 78, 8, 10, -41, 20, 36, 10, 76, -55, -72, -53, 78, 99, -38, 37, 47, -83, -16, 52, 64, 28, 104, -114, -30, -48, -18, 74, 33, -58, 9, 75, -66, -91, 82, 76, 68, 80, 64, 84, -62, 27, 81, -46, -64, 6, 40, -92, 12, 20, 116, 11, -28, 67, -11, 44, -16, 18, 33, 32, -29, 61, 25, 67, -16, -13, 32, -61, 43, 1, 72, 115, -100, 30, -59, -49, -43, -8, 108, 8, 78, 32, -5, -24, -63, -68, -62, -89, -43, -64, 103, -32, -26, 14, -41, 74, 97, -70, 78, -72, -40, 49, 34, 69, 89, 67, 29, -50, 36, 32, -99, -65, -41, -38, 13, 34, 89, 45, -55, -64, 10, -97, -39, 78, 110, 82, 50, 24, -48, -57, -21, 21, 55, 4, -50, -83, -70, -12, 26, 28, -43, 77, 34, 26, 63, 96, 17, 49, -33, 71, 42, 3, -41, -57, 40, -18, 120, -32, 56, 105, -66, 20, -6, -45, -28, -75, -20, 9, -54, -82, 3, -63, 43, -63, -73, -80, -74, -79, -38, 98, 68, 24, -76, -11, -59, 83, -72, -65, 4, -2, -82, 22, -36, -18, -69, 42, 72, 40, 15, -75, -85, 20, 14, -102, -11, -33, 40, 7, 69, 93, -58, 73, -22, -6, -70, -72, -82, 7, 78, 88, 91, -95, -41, 36, 109, -18, 116, 90, 19, 21, 120, -59, 23, 41, 59, 86, 44, 16, 51, -103, 19, 81, -5, 88, -85, -34, -77, 48, 86, 25, -12, -50, -64, -57, -78, 18, 56, 46, 4, -44, -65, -42, -52, 4, 26, 52, -34, -14, -39, -50, -114, 71, -68, 10, -56, 86, -3, 63, -71, 6, -87, -65, 24, 21, 93, -24, 76, 71, -81, 35, 91, -83, -49, -66, -40, -35, -36, 43, 112, 7, 60, -36, -5, -81, -37, -42, -49, -28, 62, 88, -101, 32, -53, 48, -24, 19, 1, -53, -61, 76, 0, -62, -11, 108, -49, -25, 15, -76, -63, -22, 43, -10, 1, 47, -18, -74, -6, -34, -53, 34, 35, -46, -14, -52, 72, -62, 101, 49, 36, -60, 40, -4, -34, -5, -58, 68, -96, 72, 15, 21, -42, 27, 18, 58, 97, -86, -61, 31, -5, 76, -87, -45, 52, -25, 78, 103, -38, 2, -56, -73, -5, -24, -25, 12, 9, -56, -80, 12, 84, 4, -60, 99, 34, -58, -22, -49, 87, -25, -106, -20, -1, 28, 46, 94, -61, 43, 7, -25, 23, 35, -5, 8, -63, 1, 83, -52, 69, -31, -82, 116, -81, 65, -20, -16, -61, 12, -87, -59, -5, -32, 79, -83, 34, 93, -76, 18, 71, -6, -65, 87, 31, 61, 38, -47, -1, 87, -29, 25, -87, -8, -9, 49, -67, 71, -35, -117, -87, -64, -20, 10, 63, -81, 59, 34, -32, -73, -41, 46, 85, -77, -73, -49, 12, -11, 82, -59, 60, 70, 3, 29, 1, -47, 30, 15, -68, -63, 12, -30, 23, 33, -86, -40, 91, 105, 68, -22, -61, 50, -24, -50, -76, 36, -67, -82, 8, 62, -57, 6, -90, -50, -40, -82, -55, 14, 17, -80, 73, 85, -80, -34, 64, -89, 55, 77, -70, 10, -48, 31, 59, 30, 64, -2, -73, -47, 95, -61, 102, 78, 72, -73, 76, 17, -49, 61, 0, -48, 12, -60, 72, -50, -27, -13, -49, -66, -52, 103, 97, 80, 71, 25, 98, -88, -84, 94, -97, -59, 34, 83, -26, -43, 62, 76, 13, 26, 45, -65, 23, -60, -7, -4, 45, 68, 97, 111, -62, -43, -19, -38, 94, -54, -81, -63, -37, -1, -58, 70, -44, -60, -67, -3, -10, -83, -23, 51, -90, -30, 109, -50, 75, -47, 43, -55, 37, 72, -30, -51, 55, -73, 45, 98, -20, 85, -53, 24, -58, -20, 70, -32, -42, 72, -70, 21, 52, 79, -13, -39, 64, -62, 51, 98, -20, 94, 102, -87, 91, -84, 92, -60, -85, 69, 6, -48, 18, -74, 50, 77, 100, 34, -81, -87, 72, -13, 14, 28, -34, -45, -55, 67, -11, 25, 102, -10, 19, -5, 44, -93, 15, 6, 28, 12, 72, 7, -17, -8, 12, -92, -75, 49, 84, -41, -22, -46, 82, 80, 51, -23, -40, -24, 25, 9, -63, -58, -57, 41, 51, 5, 77, -17, -38, 11, 43, -71, -13, 51, -67, 95, -77, -75, -43, 52, -76, 70, 5, -45, -23, -85, 84, 35, 21, -38, 22, -27, 95, 82, 9, -68, -18, -111, 2, -14, 20, 68, -82, -8, 97, -11, 50, 102, -42, 80, -35, 56, 51, 66, 69, 5, 92, -42, -30, -80, -82, -30, 89, -87, 92, -27, 48, 51, -66, -28, 2, 37, -1, -36, 81, -63, -65, 49, -22, 106, -1, -46, 92, -17, -45, 103, 74, -76, -16, -34, 85, 100, 85, 121, 54, -92, -34, -45, -89, 91, -47, 23, -16, -14, 2, -10, -39, 79, 116, -101, -90, -94, 42, -65, 45, -94, -70, 46, 39, 27, -62, 68, 51, -44, -10, -30, 2, 52, -73, 77, 56, 25, 14, 52, 42, -58, 0, -84, -90, 98, 60, -74, 78, 0, -55, 103, -7, 10, 40, 62, 24, -63, 62, -70, 84, 63, 19, 29, -57, -10, 38, -36, -45, -94, -29, 8, 38, 29, 7, 69, 91, 56, 20, 11, -32, -105, -57, 17, -28, -57, -68, -85, -8, 14, 26, 46, -29, -31, 20, 81, -81, 74, -78, 42, -90, 48, 55, -48, -49, 18, -52, -51, 103, -41, 101, -6, 45, -91, -75, 75, 81, -66, -61, -26, 0, -56, 41, 1, -86, 28, -76, -23, -95, -2, 0, 78, 1, 97, 66, -73, -41, -1, -48, -40, 5, 65, 26, 38, 36, -26, -100, 79, 35, 80, 50, 86, 40, -33, 50, 50, 26, -15, -87, 13, 42, 39, -60, -54, 78, 67, 20, 99, -4, -98, -81, -1, 61, 13, 11, -100, 57, 15, -100, 64, 46, -87, -44, -52, 1, 62, -85, -15, 8, 86, -24, -97, -1, 15, -12, -59, -68, 63, -35, -15, -90, 26, 4, -68, -54, -102, 40, 44, -37, 43, -19, -60, -83, -54, 64, 17, 34, -75, -98, 74, 39, -30, 68, -18, 21, 44, 98, -9, -31, 86, 81, 80, 14, 91, 84, 89, 100, -14, 89, 18, -92, -89, -49, -25, 79, -51, 49, 49, 90, 6, -61, -47, 
  -11, -80, 46, 47, -61, 36, -92, -84, -79, -64, -101, 1, -112, -75, -14, 1, -29, -43, 41, 72, 11, 67, 17, -98, 77, -100, -112, 97, -9, -77, -83, -40, 21, 83, -43, 23, -47, -89, 37, -21, -43, 85, -64, -80, -50, 68, -68, 5, 38, -15, -7, -34, 66, 20, 62, -62, -64, 69, 11, 23, -75, 5, 16, -13, -93, 87, 8, 83, 35, 23, 87, -8, -38, -65, -59, -77, 54, 22, -53, -73, -85, 13, -62, 40, -25, -41, 33, -26, 24, -45, 0, 63, 25, 68, 20, 73, -49, 30, 11, -7, 47, 90, -34, -38, -17, -28, 34, 42, -26, -29, -93, 63, 1, -88, -26, 24, -24, -64, -96, 5, -76, -22, 44, -28, 35, -88, -71, -34, 63, 42, -12, -16, -48, 35, 64, 48, 43, 72, 86, 40, 18, -75, -48, 122, -79, 90, 27, 8, 14, -55, -26, 72, -44, 40, -50, -93, 77, 93, -75, 105, 56, 64, -95, 70, -22, 19, 37, 24, 86, 27, 92, -8, 52, 34, -60, -79, -56, -14, -31, 23, -18, 32, 20, 32, 43, 12, 72, 87, 23, 7, -67, 16, -13, -59, 88, 32, -65, 91, -8, 47, -9, 60, -51, 66, 65, 75, -56, 5, -71, 95, -62, 75, -64, -87, -5, 70, 3, 84, -6, 61, -44, 48, 38, 12, -46, 21, 52, 56, 13, -13, 5, 25, 60, 84, -103, -53, 101, 5, 70, -6, 74, 61, -57, -1, 71, 42, -3, 100, -58, 68, 56, -79, 98, 53, 101, -97, 102, -42, 6, 40, 68, 89, 18, -27, -59, 3, -82, -93, -66, 63, -80, -19, 9, 6, 84, -7, 18, -14, -26, -22, 52, 61, -63, 43, -33, 12, 59, 41, 18, -93, -90, -105, 9, -85, 107, -52, -29, 23, 8, -50, -64, 52, 82, -54, 70, 71, 33, -15, 104, 89, 69, 41, -94, 67, -26, -19, -54, 19, -13, 38, -74, -19, -55, 85, 83, 36, -47, 12, 85, -6, -78, -48, 44, 33, 74, -7, -54, 34, 6, -3, 26, 53, -40, -14, 32, -71, 79, -31, 18, 23, 7, -81, 80, 2, 80, 16, 61, 25, 18, 8, 79, -23, -54, 78, 77, 80, 98, 98, -50, 34, -100, -42, -8, 77, 2, 43, 68, 18, 9, 35, 56, -4, -79, -13, -14, 101, 76, 67, -29, 64, 84, 5, 2, 98, 99, -95, 113, 17, -9, -29, -98, 78, 16, -85, 7, 86, -1, 3, 4, 3, 77, -90, 98, 29, -49, 53, -113, 97, 54, 11, 81, -29, -36, 83, 37, 33, 94, -67, -20, -89, -41, -77, 16, 0, -48, -83, -80, 86, 63, 33, 16, -82, -33, -37, 74, 10, 17, -85, 45, 55, -33, -12, -68, 57, -71, -103, -12, 52, 81, -89, 20, 44, 27, 30, 34, -12, -42, -73, 24, -29, 111, -69, 49, -79, 93, -44, 43, 70, -103, -90, 92, 21, -45, 6, -21, 31, -102, 84, -59, 16, 39, -48, 48, 47, 69, 23, -57, -22, -35, -61, -96, 39, -18, 30, -48, 34, -95, -80, 63, -56, -18, 65, 67, -41, -60, -96, -52, 100, 25, 71, -24, -18, 75, -3, -37, 45, -86, 90, 99, 36, 61, -27, 87, 15, -78, 102, 28, -74, -26, -9, -74, -38, -71, -29, 57, 29, 51, -38, 40, -94, -94, 94, -100, -101, -57, 20, -99, -50, -14, -48, -54, -38, 102, 68, 47, 113, -39, 35, -75, 23, -3, -18, 23, -88, 27, 15, -51, 37, 81, 1, 17, 38, -84, -57, -6, 56, -64, -32, 35, 31, -17, 50, -9, -25, -74, -40, -46, 71, -22, -46, 38, 63, 94, 24, 89, -3, 12, 94, 60, -41, -15, -67, -86, 12, 76, -96, 94, 37, 62, 67, -21, -70, -42, 55, 12, -77, -45, 19, -19, -49, -59, 7, 73, 53, -10, 85, 9, 101, -33, 38, -24, 52, 61, -6, 12, -81, 127, -39, -54, -2, 45, 64, -59, 56, -33, -54, -67, -26, -32, 81, -23, -60, -73, 6, -58, 12, 45, -24, 27, 80, 36, 76, -88, 2, 54, -55, -83, -93, 10, 65, -11, 31, 92, -12, -47, 100, -58, -75, -23, -94, -41, -31, -25, -18, 75, 4, -5, -46, 87, -91, 82, -73, -105, 75, 28, 0, -79, -84, -41, 58, -44, -85, -9, 4, -26, 111, -10, 77, 86, 39, 6, -50, 36, -9, 69, 71, 59, 18, 56, -24, -2, -102, -19, 24, 81, 31, 56, -69, 13, 36, -41, 67, -76, 37, 0, 26, 59, -7, -75, 16, 36, 108, -49, 73, 11, -4, 64, 45, -79, 16, -27, -32, -89, 49, -90, 40, -52, 105, 36, 98, 94, 7, 55, 79, -97, 57, 49, -37, -33, -23, -44, 9, -40, -19, -26, -78, 64, 24, 79, 48, 73, -74, -72, 77, 31, 41, -109, -87, 75, -25, 67, -48, 35, 88, -4, 85, 54, 16, 16, 3, 3, 0, 62, 68, 55, 43, 38, -46, 47, 16, -66, 26, 58, -82, -76, -9, -3, 0, -78, 79, -40, 37, -26, -64, 2, -8, -92, 72, -19, -72, 1, 45, 75, 23, 2, -76, 19, -43, 7, -51, -16, -52, 91, 74, 10, 103, 84, -18, 20, -60, -32, -22, 6, -34, 103, -25, -60, 59, 68, -27, 7, 100, 4, 17, -89, 18, -29, -16, 12, 49, -9, 80, -64, -79, -1, 34, 26, -87, -113, -89, -23, -50, -49, 79, -35, 46, -46, -22, 56, -14, 26, -86, -48, -77, -41, -86, 56, -93, -50, 62, -104, 60, -55, 19, 29, 114, 102, -14, -4, 68, 38, 24, 28, 20, 18, -30, 108, 2, -78, 5, -53, 64, 26, -8, 31, 59, 58, 87, -46, -93, -75, -40, -7, -27, -52, 18, 8, 81, 101, -20, -81, -47, 7, -51, -88, -61, -45, 21, 87, -109, -86, -19, -46, -7, -37, 45, -79, -60, -70, -53, -69, 72, 54, 42, 73, -12, 39, 0, 49, -80, 29, 26, 6, -68, -103, -48, 51, -68, -20, -39, -120, 81, 36, -25, 92, -46, 76, 1, -93, 9, 95, -80, -92, -67, -43, 7, 43, -15, 80, -39, 24, 88, 11, 84, 8, -1, -22, -59, -31, 31, 16, 71, 69, 39, 25, -5, 23, -103, -57, -42, -6, 86, -33, -45, 13, -73, 23, -54, -14, -80, 54, -68, 32, -33, 67, -2, 5, -60, -105, 49, -39, -81, 89, -34, 0, -82, 37, -63, -21, 6, 49, 42, -59, -104, -12, -50, -32, -85, -24, -58, -75, 33, -82, 9, 48, 1, 1, -5, -96, 73, 15, 84, 28, -88, 43, 53, 33, -85, -40, -30, 104, -46, 100, 15, -82, -80, -61, 23, -29, -53, -44, 52, 79, -37, -74, 51, 54, -15, -4, -49, 83, 69, 48, -67, -53, 47, -69, 80, 91, 6, 6, 94, 24, 1, -95, 17, -5, 25, -102, 51, 92, 74, -97, -13, -21, 53, -82, 15, 74, 77, 0, -9, 60, 40, 59, 28, 27, 90, -30, 36, 35, 93, -40, -48, -17, 83, -99, -53, -60, 74, 57, 23, 38, 42, 45, 75, 51, 34, -99, 56, -36, -57, -36, 76, 1, 96, 11, 55, 93, 82, -55, -105, -36, 8, 39, -102, 102, -37, 27, 38, 63, 47, -46, 95, -76, 64, 65, -6, 18, 32, -45, -57, 31, 77, 62, -39, -13, -37, 26, 68, -95, -8, -87, 108, 53, 33, -98, -79, -51, 51, -49, -81, -76, -23, -98, 60, 85, -56, -61, 20, -79, -32, -63, 82, 1, 73, 65, 10, -53, 44, 45, 62, 46, -54, -77, -62, 87, 74, 26, -31, 14, -23, -70, 110, 40, -74, 13, -37, -92, 67, -36, -26, 16, 8, -24, -17, -82, 27, 85, -13, 36, 27, -31, -67, 55, 82, 89, -33, 3, 97, 
  -55, 48, 51, 67, 100, 69, 41, 61, 34, -58, -64, -78, -54, -61, 78, 94, 111, 89, 79, -8, 112, -13, 67, -7, 51, -35, -62, 6, 50, -68, 20, 17, 87, -78, 77, -58, 23, 32, -23, 85, 40, 50, 30, -19, -49, 2, -23, -4, 95, 14, 59, -80, 61, -52, 56, 48, 87, 39, 98, 64, 99, -52, -19, -19, -78, -109, 9, 55, 56, 44, -71, -74, -30, -12, -26, 8, 77, -29, 82, -79, -60, -58, -88, -9, 93, -59, -65, 62, -52, 52, 40, 84, -12, -85, 114, -58, 88, -80, 64, -85, 79, 71, 13, 66, -91, 41, 45, -39, 6, 73, -1, 21, 50, 16, 84, 62, 43, 42, 45, -45, -10, 14, 94, 29, 80, 45, -95, -95, -104, 59, 35, 112, 42, 74, 3, -60, 24, -80, -73, 11, -98, -56, 48, 98, -50, 5, -89, 101, -15, 103, -30, 68, -81, -37, -73, -81, -35, -36, 21, -54, -71, 27, 69, 50, -27, -78, 17, 53, -42, 69, 43, -38, 40, -70, 22, 76, -52, 94, -20, 59, -76, 9, 53, -60, -11, -62, -76, 115, -5, -13, 107, -42, -40, 53, 111, -5, 88, 91, 37, -61, -30, -35, 77, 34, -86, 94, -26, 59, 10, 55, 70, 122, 26, -76, -46, 33, 104, -41, 46, -101, -71, -66, 92, -71, -65, -24, 57, 104, -56, 64, 25, -29, 42, -90, -87, -36, -96, 78, -42, 20, -58, -24, -42, 48, 30, 22, 65, -61, -91, 109, 88, -78, -18, -22, -22, -74, -12, 69, 67, 11, 93, -21, -11, 108, -64, 90, -80, 41, -22, -17, 81, -77, -42, 75, 88, 15, -26, 59, -17, -23, 96, -22, -100, 6, -11, 34, 25, -90, 88, -60, -10, 42, 89, -30, 60, -86, -24, 4, 15, -14, -46, -103, 94, -58, -100, -25, 17, -77, -22, 52, 86, -16, 81, -46, -51, 43, -29, -8, 93, 32, 41, -56, -68, -45, 108, -22, -33, -93, -85, -87, 103, 78, -91, 85, -67, 10, 66, -6, 15, -98, -81, -61, 0, -100, 113, -18, 63, 36, -72, -32, -65, -43, -1, -60, -49, 110, -110, 62, -2, 14, 72, -12, -20, 48, 72, -68, -8, 80, -56, 55, -8, 65, -24, 6, -23, 41, 36, 119, 84, 58, -15, 11, -91, -94, -7, 79, -26, -45, 100, -34, 80, 71, 27, -42, 89, 35, -119, 35, 0, 60, -51, 63, -84, -61, -35, -60, -60, -62, -46, -61, -46, 64, -19, -23, -78, -49, 89, 10, 7, -44, -68, 57, 111, -83, 11, 43, 78, 36, 15, 63, -85, -31, -84, 21, -44, 66, -18, -35, 30, 66, 64, -99, -41, -22, -22, -36, 3, -63, -67, -38, -116, -35, -62, -70, -77, -48, -76, 84, -62, 26, 59, -61, -21, -47, 30, 44, -83, -19, -51, 20, -28, -12, 103, 45, 87, 53, 12, 1, -87, -70, 99, -1, 36, 91, 96, 42, 100, 38, -62, 8, 86, -24, 108, 74, 52, -14, -90, -16, 80, -78, -45, 17, -24, -42, 42, 2, 45, -1, 61, -41, -62, 92, -68, -10, 77, -19, -43, -117, 71, 25, 69, -62, 94, -22, 16, -104, -68, 43, -10, 11, 76, -41, -24, -11, 21, 33, -38, -29, 12, -47, 68, 37, 44, -97, -59, 21, -81, -59, -29, -44, -58, 70, -38, 79, 52, 41, 80, -87, 1, 37, 24, 64, -98, 30, 101, 108, -103, 61, -32, 27, 1, -88, -76, -64, -1, -20, 0, 31, -1, 50, 5, 37, 18, 28, -15, 5, 38, 49, -49, -24, 1, -57, 106, -22, -15, -42, -63, 45, 73, -58, 17, 89, 56, 91, -67, -33, -26, -29, -74, 94, 43, -45, -35, 75, 27, 19, 57, -8, 55, -86, -66, 60, -94, 6, 118, 9, -54, -69, 52, 11, -86, -31, 10, 5, -74, -2, 52, -88, 2, -2, 24, -56, -53, -114, 7, 27, -45, 57, -57, 4, -55, 71, 8, -69, -74, -43, 101, 0, -44, -60, -37, 48, -22, 84, 54, -52, 95, -45, -55, 60, 92, -25, 96, 4, 22, -56, 79, -25, 36, -60, 56, 50, 85, 65, -108, 49, 91, 47, -29, -36, -8, 29, 3, -93, -78, 6, 31, 64, 80, -17, 51, -87, 41, -31, -55, -91, 63, -75, 76, -24, -37, -28, -118, -86, 14, -8, -74, 38, 86, -37, -5, -117, 12, 47, -5, 43, -29, -93, -61, -72, -27, 5, 34, -53, -75, -50, -76, -74, 43, 12, -29, -36, 14, 0, 29, 46, -93, 70, 104, -10, -54, -58, -66, -53, 12, -4, 95, 39, 87, -59, 50, 52, -74, 54, 69, -10, 85, -7, 83, -32, -61, 108, -7, -90, -47, -40, -76, -55, -10, -38, -1, 22, 57, 17, -25, -33, -37, 43, 69, -21, -39, 49, -71, 60, 85, 58, 81, 4, 96, -70, 29, 88, 100, 93, 61, 10, -62, -75, -52, -80, 1, 20, -10, 41, 99, -20, 1, -60, -18, -92, -80, 71, 86, -70, 4, -59, -55, 45, 77, -48, -103, -97, 11, -71, 61, 29, 70, -72, 7, 57, 39, -17, -67, -57, 73, -86, -31, -70, -48, -85, 0, 58, 76, -26, 8, 37, 95, -25, 16, -78, 61, -50, 26, 54, -51, 23, -72, -48, -78, -84, 36, 27, -81, 31, -58, -23, -68, -57, 10, -87, 77, -106, -124, -46, 90, -80, 0, -31, -70, 49, 17, 40, 18, -45, -40, -9, 50, 80, 100, 69, 68, -47, -58, 35, 89, 46, 65, 52, 46, -3, -91, 84, -18, -81, -63, -83, 72, -15, -37, -66, 74, -91, 45, -97, -57, 85, -21, 71, -92, 24, -46, -94, -21, -27, -107, -65, 13, 43, 89, -76, 34, -100, -33, 40, 41, 78, -67, 2, 10, 85, -26, -19, 28, 48, -81, 76, 82, 14, 37, -74, 86, -75, 66, 39, -61, 80, -10, -60, 48, -14, -25, -39, 30, 90, -6, -55, 44, -98, -28, -119, 55, 34, 3, 81, 40, 2, 32, -50, 9, -22, -5, 0, 84, 19, 76, 21, -88, -71, -67, 9, -18, -21, -37, 5, 48, 93, -27, -53, 23, 5, 7, -51, -26, -74, 56, 62, 40, 20, 6, -2, -22, 30, 68, -36, -106, -91, -63, -53, 52, -107, 91, 55, 42, -19, 55, -57, -86, 82, 114, 44, -73, 18, -58, 69, 37, 68, -27, 16, 10, -59, -106, 62, 71, 84, 99, -14, 71, 88, 18, -80, -5, 50, 3, 104, 68, -54, 52, 54, -78, 67, 70, -67, 44, -42, -57, 44, -30, -24, 123, 65, -58, -8, -17, 33, 16, -18, -55, 87, -44, -19, 70, 98, -13, 93, 103, 103, -54, 2, -47, -5, -10, -121, -100, 27, -74, 30, 73, 96, 62, 101, 54, -12, 26, -55, 70, -47, 79, 50, 41, 17, 51, 101, -34, 17, 35, 1, 71, 57, -43, 40, -8, -78, 36, -15, -25, -16, 53, 4, 1, 13, 8, 39, 3, -31, 111, 53, 8, -74, -15, 24, 3, 45, -85, 13, -9, 92, 29, -9, 94, 10, -70, 6, -13, -48, 62, 34, -30, 31, -5, 35, -63, 88, 90, -68, -4, -46, 12, 41, 44, 25, -79, 64, -76, -5, 88, 33, -6, 37, -16, -32, 95, -120, 99, -106, -17, 41, -22, -16, -26, 62, -59, 26, -69, 100, 12, -12, 40, -78, -9, -11, 10, 74, 90, -41, -20, 15, 17, 105, 38, 7, 52, 14, 75, 7, -75, 111, -23, 107, 5, 73, 102, 39, -42, -4, 32, -63, 118, -82, -39, 96, 115, 36, -17, -63, -82, -32, -13, 110, 47, -111, 1, 64, 66, -20, 15, -50, 66, -71, -45, -20, -18, 24, 111, -117, 11, -33, 61, 41, -48, -79, 9, 39, 10, -89, 34, -51, 1, 69, -33, 37, 
  -70, -56, 12, -85, 21, -46, -90, 82, 82, -81, -31, -43, -10, 106, 46, 77, 50, 2, 96, 6, 11, -47, 38, 61, -9, -54, 84, -92, -32, -59, 39, -5, 15, -7, -52, 58, 43, -4, -41, -60, -78, -38, 8, -81, -49, 46, -5, 78, -57, -51, -18, 47, 74, -83, -76, -42, 37, -38, 5, 22, -86, 51, -79, -84, 61, 48, 8, -72, 44, -45, -47, 52, -33, 24, 98, 29, -44, 99, 51, 78, -67, -76, 61, 64, 55, -11, -84, 64, -106, 60, 72, 7, -20, 60, -40, -63, -34, -10, -73, 64, -104, 97, 96, -65, 82, -76, -69, 74, 45, 6, 6, 93, 28, 90, -2, -31, -100, -85, -69, 27, 83, 65, -58, 2, 51, 57, 24, 43, -92, 16, 59, -39, 46, -25, 90, 14, -43, 6, 69, -32, -32, -53, -27, -43, 68, 6, 105, 33, -15, -69, 30, 80, -87, 69, -86, -19, -77, 52, 27, 121, 88, 83, 88, -95, 84, 80, -77, -45, -84, 51, -65, 16, -91, -72, -7, 41, -21, 9, 45, 93, 81, -1, 11, 86, -30, -63, -36, -21, -51, 69, -42, 2, 82, -82, 82, 101, -37, 93, -15, 3, 112, -43, 105, -92, 103, 37, -58, 18, 77, -47, 11, 38, -95, -75, 66, -33, -25, 80, 13, 14, 45, 31, -83, 53, -73, 7, -45, 73, -34, -88, -117, 41, 89, -94, 68, 51, -40, -86, 30, 74, 50, 50, -13, 44, -28, -23, 70, -18, -16, 100, 69, 3, 74, -38, 67, -98, -26, -88, 39, -76, 22, -6, 95, 1, -82, 2, 24, 75, -68, -38, -68, -33, 32, -100, 32, -52, 82, -84, 71, 62, 16, 22, -60, 83, 14, -24, 11, 106, -60, -98, -75, -94, -7, -56, -85, 50, -1, -3, -30, 103, -60, 5, 103, 32, -15, -83, -22, 61, 69, -11, -71, -26, -25, 69, 36, 1, 33, -49, -53, 75, 37, 11, 21, -53, -99, 72, 77, 75, 53, 80, 97, 48, 21, -15, -39, -5, 47, 64, 70, 57, 97, -53, 42, 33, -5, -16, -62, -87, -59, -41, -91, -43, -46, -64, 111, -76, 10, -77, 25, -2, 93, -2, -92, 64, 32, -9, -78, -69, 57, -94, 64, 41, -23, -85, -39, 51, -92, -100, 28, -7, -94, 87, 77, 102, -10, -94, 100, -57, 37, -98, -49, -73, 59, 67, -72, -81, 78, -83, -31, 3, -38, -7, -20, -3, 56, 24, 40, 8, -78, 110, 36, -40, -68, -54, 45, -5, -29, -86, 51, -68, 62, 61, -78, -60, -103, 0, -36, -69, -18, -5, 103, 20, 7, -64, 16, -106, -68, -87, -32, -10, 10, 32, 65, -72, 10, -38, -9, -17, -93, 62, 67, -51, 44, 115, -3, 47, 56, -79, -29, 45, 98, -45, 81, 12, 58, 79, -51, 60, -40, 2, 65, -61, -21, 32, 53, 5, 12, 3, -66, -57, -9, 42, -73, 2, -68, 66, 60, -43, 96, 10, 101, -94, -14, -13, -39, 96, 100, -49, 44, 82, -34, -84, -60, -30, 9, 78, 42, 16, -80, 102, -42, -54, 47, 17, 76, -83, -62, -1, -43, 96, 88, -36, -42, -34, 0, 4, 26, 38, 81, -86, 12, -77, 60, 47, 5, 61, -42, -7, -53, 14, 63, -98, 85, 76, 63, 38, 24, -60, -66, -94, -48, 36, -95, 76, -90, 75, -29, 66, 55, 42, 58, -93, -107, -72, -57, 88, -11, 50, -84, -81, 96, -71, -22, 86, 93, -33, 69, -44, -24, -71, -69, 89, 64, -30, 73, 23, 75, 26, 75, 87, 89, -32, -2, -91, 10, -94, -62, -98, -75, 82, 26, 103, -59, 76, 82, 65, -74, -53, 68, 4, -90, -68, 101, -67, 87, 35, -71, -29, 66, 42, -94, 81, 36, 27, 53, 98, 93, -79, -20, -90, -88, -8, -30, 94, -87, -47, 36, 71, 86, 94, -39, 12, 38, 42, 36, 62, 81, 47, 62, -17, 86, -79, 95, -2, -36, 52, 88, 57, 43, -22, -80, 41, 64, 42, -32, -20, 113, -90, 6, -66, -29, -18, 21, 85, 57, -85, -75, 97, 34, 38, -5, -78, 35, -17, 16, 21, 2, -42, -36, 78, 29, 87, -93, -60, 34, -33, 46, -21, 27, 21, 59, 2, -10, -9, -88, 43, 39, -18, 20, 21, -95, 33, 17, 79, 28, 2, -59, -38, 54, -1, -69, -97, 4, -92, 47, 99, -75, -6, -16, 1, -12, -13, 12, 98, -37, -23, -59, -2, -13, -36, 97, -13, 13, 71, 20, 88, 92, -71, 101, -51, -28, -49, 79, 37, -93, -41, 24, 82, -61, 72, 3, -33, -2, -37, 45, -59, 46, -98, 88, 24, 3, 19, -13, 32, -13, -91, 15, -42, 34, -44, 82, -35, 11, -111, 6, 20, 90, 20, -99, 95, 6, 13, -92, -4, 60, 29, 44, 79, 12, -14, 26, 58, 55, 93, -79, -1, -33, -64, 39, -37, 42, 28, -51, 16, -92, -7, 33, -8, -56, 60, 24, 38, -80, -81, 44, 70, 80, 76, -31, 8, 86, -80, -75, 24, -58, -3, -75, -2, 12, 42, 56, -93, -33, -93, -87, -37, -67, 53, 21, 62, -53, 15, -54, -87, -29, -13, -12, 87, -58, -17, 39, 95, -80, -88, -15, 35, -62, 106, 54, -70, -48, 87, 63, -54, -73, 37, 28, 83, 44, 33, -49, 25, -8, -48, -64, 29, -5, -62, -74, 8, -7, -74, -60, -50, -75, -6, -5, 19, 1, 67, -52, -29, 38, 17, 91, 67, 6, 36, 16, 31, -85, 60, -17, -21, -17, 6, -7, 6, -17, 53, 48, -68, 61, 44, 4, -105, -13, -55, -38, 54, 37, -14, -15, -82, -9, 33, 3, 13, -69, -79, -74, -67, -17, -75, 91, -6, -70, -5, 94, 9, -15, 0, -33, -10, -41, 60, 22, -73, 21, 6, -42, -70, -80, 108, 33, 1, 23, 28, -60, 57, -62, 36, 95, -16, -4, -79, 103, -32, -62, -8, -19, 17, 58, -1, 42, 69, 17, 87, -55, -61, -99, -5, -34, 17, 93, -86, 40, 9, -41, -19, -92, -11, 26, -67, -22, -44, -2, -19, -8, 24, -78, 4, -47, 80, -112, 27, 52, -55, 98, 27, 2, 43, -71, -41, -50, -29, 121, -18, 105, -6, -18, 17, 38, -84, 77, -56, 38, 8, 58, -87, -53, -16, 108, 53, 61, -19, 91, -108, 55, 4, 88, -41, 5, 0, -77, -49, -58, -21, -40, -56, 33, 100, -30, -73, 42, -51, 84, -69, 38, -80, 10, -88, 20, -45, 46, -69, -12, 7, 30, -42, -65, 11, -85, 115, -21, -26, 60, 1, 28, 44, 53, -78, -81, 83, 14, 14, 68, 18, -73, 105, 9, -52, -38, 22, 45, 65, -24, 3, 112, 57, 31, 22, 92, 50, -26, -20, 65, -38, -56, -47, -5, 33, -3, 80, 47, -97, -41, -104, 37, -29, 96, -24, -17, -14, -90, 46, -89, -48, 105, -88, 62, -66, -46, 49, 30, -28, 84, -4, -81, 41, 56, 19, -75, 33, -47, -96, -91, 65, 14, 12, -52, -89, 101, 0, -10, -82, -9, 46, -20, 65, 11, 66, -83, 65, -10, -98, 42, 25, 4, -45, -5, 5, 44, 92, 74, 97, 28, 12, 67, -70, -14, -72, 33, 71, -47, -4, 94, -28, 94, 11, 78, -51, -46, -2, 75, 37, -88, -60, 52, 102, 22, -48, -55, -57, -73, 60, -42, -27, 65, -60, -22, -79, 7, 10, -46, -4, 13, 75, 27, -81, -33, -70, -11, 64, 101, 102, -81, -18, -28, 88, -64, 83, 34, 59, 19, -53, 65, -87, -16, -31, -60, -95, -77, 93, -56, 25, 96, -15, 11, 25, 19, 20, 64, -47, 27, 87, -32, 3, -10, 33, 34, -49, -104, 98, -56, -6, 21, 8, -47, 47, 
  -99, 36, 62, 8, 81, 42, 94, -16, -46, 66, 88, 33, -60, -62, -46, 10, 19, 85, -30, -12, -8, 8, -15, 11, -27, 29, -81, 9, 41, -69, -33, -99, -16, 10, -15, -44, -87, -110, 81, -20, 63, 36, 52, -51, 21, 41, -63, -70, -70, -15, -44, 53, 43, 59, -66, -16, 106, 54, -73, -72, 103, 60, -87, -28, -110, 87, -30, 92, 83, 49, -4, 76, 77, 7, -67, -66, 4, 78, -86, 88, 89, 110, -20, 30, 10, -15, 37, -56, -44, -2, 90, -62, 106, -72, -43, -66, -100, 79, 74, 66, 28, -70, 37, -31, -30, 7, 81, -86, -52, -65, 14, -53, -6, 13, -41, -49, 37, -100, -76, 75, 33, -64, 113, -43, 7, -17, 12, 29, -62, -13, -75, -62, 64, -99, 28, 108, 63, 1, 99, 80, 63, 4, 80, 3, 107, 37, -102, -21, -58, -97, -66, -67, -37, 49, -105, 15, -26, 31, 21, -20, 71, -13, -3, 109, -10, -66, 56, -47, -26, 52, -38, -21, -46, 64, 1, 39, 90, 72, -56, -57, 93, -8, 78, 41, 9, 66, -99, -106, 11, 60, 55, -3, 22, -55, 75, -33, 106, 64, -67, 69, 76, -29, -23, 9, 27, -6, -37, 57, -75, -24, 41, -44, -48, -96, -27, -22, 40, 3, -73, 63, -34, 85, -25, 90, 87, 11, -25, 31, -39, -34, -60, 1, -62, 86, 65, -45, 56, -71, 78, 1, 55, -109, 35, 84, 57, -11, -12, 84, -21, 60, 18, -76, 60, -27, 42, 24, 74, -73, -44, 48, -36, 43, 47, -76, 43, -38, -59, -99, 37, -90, 1, 31, 90, -84, 0, 59, -59, -75, -38, 0, 46, -80, -15, -19, -11, 64, 8, -34, -102, -52, -40, -28, 78, -19, -74, -100, 11, 93, -35, -9, -79, -11, 27, -83, -56, -20, -74, -55, 46, 102, 102, 46, 14, -20, 124, 9, 26, -30, 72, 35, 53, 81, -25, -7, 98, 41, 92, -47, -71, -27, -7, 21, -28, 115, -7, -6, 50, 83, -105, 35, -13, -48, -43, -84, -57, -106, 14, -68, -25, 68, 18, 68, 87, -67, -21, -7, 106, -52, 39, 14, -26, 39, -63, -52, 112, -27, 59, -62, -12, 50, -24, -96, 82, 97, -67, -17, 1, -2, 98, -51, 76, -58, -19, -48, -5, 56, 9, -21, -1, 68, -55, -38, -34, -36, -28, -44, -5, -23, 38, 34, 4, -82, 42, -2, -48, -20, 24, -54, 8, 70, 33, 102, 42, 74, 97, -75, -43, 43, -55, 2, 23, 18, 65, 55, -59, -60, 27, -95, -4, -52, 47, -21, 97, -20, 66, -45, 31, 32, 58, -24, 47, 78, -37, -50, 21, -62, 85, -89, -2, -60, -74, 39, 17, 86, 10, 54, -62, 77, -10, -51, 12, 13, -52, 68, -18, -31, 42, 23, 42, -50, 16, 105, -36, 82, -88, 109, -54, 29, 29, -75, 5, 83, 57, 4, 63, 26, 81, -6, 2, -29, -104, -50, 84, 91, 7, -80, 81, -78, 77, 52, -106, -32, -14, -59, 25, -57, -14, -67, 10, -4, -43, -87, 25, 96, -80, -54, -105, 39, 12, -13, 92, 25, -88, -50, 68, -42, -85, 109, 32, 38, 88, -56, -97, 16, 91, 10, -98, 70, -38, -105, -34, 35, 75, -11, 13, 93, 63, 27, -80, 104, 8, 74, -55, 50, 26, -71, -94, -87, -25, 44, 50, -65, 31, -82, -61, 84, -71, 42, 97, 5, 9, -43, 83, -39, -86, -107, 23, -47, 63, -27, -51, 74, -71, -24, 58, 77, 7, 71, -30, -17, 19, -27, -1, -67, -56, -2, -42, -10, 18, 67, 15, 82, -19, -2, 80, -74, -42, 63, 49, 66, -69, 24, 35, 61, 95, 89, -8, 101, -58, -70, -66, 32, -97, 63, 56, -52, -8, -44, 17, -105, -81, 20, 18, -78, -3, -36, 23, 110, 81, -92, 6, -34, 54, -57, 21, 108, -10, 98, -23, 27, -106, 92, 59, -51, -72, 42, 20, 40, 112, 92, 90, 14, 52, 48, -3, 43, 10, -89, -68, -83, -52, 23, -23, -93, 60, 49, -19, 79, -12, 13, -13, 60, -24, -49, 32, 17, 90, 6, 66, -97, 73, -56, -75, -6, -58, -61, 74, -60, 27, -81, 79, -97, 101, -58, -32, 1, -63, 16, -31, 43, -61, 28, -4, 67, -63, 25, -14, 88, 37, 45, -113, 37, -15, -97, -29, -11, 93, -10, 83, 98, 33, 30, 31, 100, -38, 12, -31, 63, 82, -107, -6, 74, 65, 59, -3, 8, -15, 7, 35, 6, 71, -79, -12, 6, 64, 25, 28, 59, 15, -15, -16, 102, -8, 48, 102, 94, 42, -53, -62, -15, 49, 43, 11, -52, 95, 3, -51, 0, 73, -84, 28, -30, -107, 8, 65, 78, 58, 6, -9, 91, -13, -33, -47, 5, 56, 93, -61, 66, 81, -18, -66, 93, -62, 17, 15, 21, -8, -16, -51, 15, 9, -46, 51, -109, -75, -60, -33, 23, -6, -37, -49, -24, 69, -7, -84, -9, -2, -73, -95, -65, 61, 38, 1, -59, -3, -44, -7, -76, 59, -5, -39, 45, 16, -41, -68, 45, 25, 77, -64, -52, 8, -58, -25, 33, 92, -48, -29, 47, -41, -5, 76, 47, 53, -17, 29, 78, 24, -43, -12, 60, -41, -38, -78, 98, -49, -69, 61, 38, -77, -7, -75, -9, -90, 26, 86, 63, 11, -25, -7, 71, -30, -54, 78, 0, -29, 30, 3, 68, -92, -16, 38, -30, -26, -40, 87, -92, -22, -30, 47, -54, 106, -56, 78, -5, 41, -17, -17, 5, -71, -15, 52, 68, 0, -19, 80, -25, 67, 12, -77, -17, -78, 29, 66, 75, 56, 29, 1, -6, 12, 36, -53, -62, -66, 66, -102, -61, -73, -79, 48, -103, 85, 115, -71, -110, 30, -13, -71, -11, -66, -102, 5, 9, -75, -65, 107, -56, -22, -51, 19, 91, -24, 36, -35, 67, 24, 75, 29, -8, 65, 111, -21, 38, 29, 99, -6, 77, -4, 21, -88, 67, -75, 8, 84, 31, 72, 89, -79, 84, 9, -58, -11, -17, 32, -42, 87, -80, -94, 78, -106, -23, -15, -15, 60, -108, -74, -75, 13, 21, 55, 106, 29, -47, -73, -28, 14, 89, 34, 75, -38, -92, 33, 24, -37, 3, -11, -73, 49, -25, -83, -56, 41, -17, -26, 1, -39, -8, -73, -42, 78, 101, 84, -38, 74, 78, 25, 28, -14, -72, -51, -18, 76, 12, 15, 12, 70, -55, -1, 28, 13, -11, -61, 50, 75, -26, 32, 26, -65, -28, -75, -12, 17, -99, 86, 12, -58, 26, -94, 64, -99, 2, -48, -2, -72, -43, 42, 59, 61, -54, -24, 20, 33, -43, -109, -93, -36, 60, -6, -13, -92, 58, 88, -76, 20, -21, -8, -81, 65, -99, 74, -7, -46, 84, -44, -44, -10, -53, 90, 86, 31, 71, -29, -2, -60, -73, 91, 103, 60, -93, 17, 64, 74, -61, 29, 96, -29, -23, -20, 14, 72, 56, 31, 68, 63, 90, -78, 113, 112, 97, -39, -46, 17, 76, -24, -71, 76, -11, 5, -46, 16, -17, -38, 62, -37, 47, 31, -6, 75, -97, -38, -51, 86, 65, -102, -75, -73, -61, -44, -32, 2, -18, 46, 93, -100, 85, -14, 23, 52, 28, 90, 107, 12, 49, -72, 52, -93, 77, -84, 22, -15, 66, -27, -37, 91, 85, 6, -99, -83, 8, -21, -39, 74, -63, -59, -36, -44, 0, 44, 15, -23, -63, -4, 56, -68, -86, 22, -29, 8, 4, 17, 25, 34, -77, -89, 101, 36, -14, 29, 106, 74, 51, 82, 78, 22, -67, 60, 11, -70, -7, 36, 42, -39, 91, -26, -1, 13, 55, -81, -107, 95, -70, -16, 75, 27, 62, -75, -41, -82, -74, -61, 65, 
  95, -49, -18, -56, -14, -36, -49, -60, 2, 87, 75, -69, -69, 32, -45, -40, -87, 31, -99, 33, -40, -65, -86, 89, 40, 24, 75, 51, -72, -2, 57, 12, 31, 20, 51, -76, 65, 66, -24, 44, 1, -9, -15, 43, 96, -74, 7, 57, 52, 6, -63, 101, -40, 107, 47, 31, -44, -25, -49, -84, 98, 43, -87, -100, -49, -86, -106, 77, 86, -26, -6, 108, 36, -29, -70, 65, 69, -75, 60, 2, -95, -17, 25, -6, 96, 12, 110, -73, 84, -64, -2, 93, 10, -46, 80, -65, -57, -19, -81, 16, 42, -12, 46, 37, -109, 40, -70, -38, -98, 11, 68, 10, -65, 76, -46, 47, -85, -54, -55, -21, 19, 80, -40, -7, 21, -28, -82, 32, -75, -27, -88, 6, 17, 74, 119, -4, 58, 110, 9, 4, 46, 27, 25, 25, -113, 23, 39, -74, -50, 64, -97, -41, 17, -55, -72, 52, 24, -74, -61, -24, -66, 71, -16, -20, 43, 109, -26, -73, 72, 81, -72, -77, 17, 29, 11, -57, -92, 71, 59, 68, 57, -75, -31, 113, -72, -3, 105, -13, -42, -36, -54, -24, 30, -72, -88, -72, 84, 23, -13, 91, -27, -33, -76, -95, -19, -46, 54, -52, -75, -19, -63, -79, -105, -101, 114, -13, -45, 78, -21, 89, -82, -74, 24, -106, -54, 25, 91, 83, 10, -95, 99, 37, 2, -19, -99, -10, 68, -77, 71, -7, 49, -79, -77, -35, -46, -78, -28, -104, 55, 23, -27, 46, 23, 23, 17, 82, 86, 12, 98, 122, 85, 58, -108, 96, -40, -6, -101, 37, 41, 4, -17, 52, -16, -90, 58, 58, -74, -20, 79, 55, -39, 22, -82, 86, -39, -44, -36, -85, 56, -75, -12, 29, -59, -54, 73, -105, 82, 46, -97, -76, 103, -30, -24, 5, -22, -94, -81, 34, 45, -12, -100, -32, -45, 46, 37, -14, -53, -6, -43, -13, 0, 116, 81, 21, -18, -30, -62, 29, -32, 109, -109, 91, -93, 15, -61, 17, 45, -42, 26, 61, 11, -50, 59, -66, -8, -58, -44, 72, 91, 45, 91, 18, 9, 61, 9, 94, -104, 10, 82, 46, -86, -63, 104, 42, -14, -41, 13, -104, -59, -4, -110, -3, 15, -90, 66, 68, 87, -53, 66, -50, -73, -63, 68, -34, -73, -36, -40, 62, -9, -25, 56, 122, 83, 93, 5, 9, 13, 71, -69, 10, -3, -76, -68, -69, -68, 25, -51, -17, -85, 57, -27, 27, -98, 19, -16, -48, -31, -45, -105, 72, 46, -71, -27, 93, -51, 18, 85, 19, -39, -99, -91, 17, 79, -17, -77, 24, -79, 107, 11, 49, 66, -58, -54, -67, 14, -102, -31, 92, -7, -35, 58, -20, -49, -27, -11, -14, 58, -61, 42, 70, 22, 4, 21, -60, 4, 79, -23, 21, -72, -58, -73, 30, 10, -91, 107, -97, -30, -43, 19, -57, -69, -88, -34, -35, -58, 74, 108, -17, -82, 50, 37, 19, -53, 24, 18, 73, 43, 99, 94, -54, -68, -25, -39, -95, -81, 78, -97, -16, -37, 70, -41, -18, 47, -62, 118, 77, 55, -37, 10, 47, -112, 19, -58, 105, 49, -57, -73, 61, 45, 118, 28, -32, -89, -49, 54, -97, -80, -104, 33, 19, -19, 4, -30, -13, 57, -100, -102, 53, 34, 21, 108, 88, 30, -54, -36, 65, 65, 58, -52, 42, -96, -105, -62, 99, -61, -52, -63, -77, 88, 67, -54, -70, 63, -13, 26, -75, -43, 30, 26, 65, -31, -25, -68, -48, -39, 19, -92, -64, 14, 92, 15, -88, 19, 34, 17, -85, -87, 41, 0, -66, -62, -71, 39, -45, 45, 53, 80, 17, -85, -42, 120, -55, 86, 79, -21, 104, -89, -121, -68, 36, -52, -22, -87, -32, 22, 56, 56, 35, -91, 29, -13, 60, 17, -16, 14, -58, 7, -109, 62, 74, -33, 30, 71, -37, 6, 78, 91, 54, 101, -27, 74, 94, -22, 39, 77, -106, -4, -57, 64, 73, 11, 15, 69, 40, 69, -79, 97, -53, 78, 36, 10, 72, 46, 74, -60, 78, -66, 33, 98, -71, -15, 60, -105, -65, 23, 47, 66, 46, -54, -28, 24, 14, 97, -70, 34, 26, -30, 74, -76, 31, 1, -39, 39, -27, -9, -28, -87, 42, 29, 109, 108, 29, -33, -9, -75, -6, 56, -95, -63, 90, 50, -9, -51, -26, -39, -70, -42, 104, -21, 82, 10, -53, 76, 13, 6, 91, -67, -88, 23, 36, -46, -15, 55, -81, -56, 29, -110, -57, 10, -88, 46, 0, -36, 73, 75, 41, 28, 29, -98, 14, 27, -77, -91, 9, 24, 68, -18, -83, 78, -84, 9, -4, -88, -62, -74, 3, -42, 70, 3, -14, -30, 58, 22, -47, 11, 59, 46, 5, -75, 81, 63, -86, -62, -44, -53, -90, -99, -38, 93, 92, 107, -67, -62, -97, 53, -111, -32, 92, 3, 76, 91, 34, -81, 78, -42, 80, 9, -29, 46, 42, 78, -94, 81, 73, 29, 38, 77, -42, 72, -83, 48, 26, 88, -56, 91, 50, 100, 73, 20, 36, 96, 66, 80, 59, -4, 53, 81, 102, -4, -39, -4, 8, -20, 2, -78, -70, 63, -57, 85, 21, 33, 76, -42, -59, 20, 5, 93, -13, -92, -70, -22, 69, 25, 68, -14, -73, 15, -73, -37, 93, 24, -63, -32, 61, 107, 64, 86, 59, 43, -104, 54, -62, -88, 64, -74, -96, -100, -84, 91, 79, 58, -68, 62, 99, -46, 13, -39, 83, -67, -37, 4, 27, -60, 85, -16, -89, 37, -50, -65, -23, -32, -98, 11, -54, 106, -71, 18, 32, -23, -57, -110, 55, 51, -16, 78, -62, 39, -51, 89, -80, 8, 1, -41, -71, -102, -36, -11, 72, 74, -23, 86, 32, -81, -75, -65, 59, 87, 41, -79, 11, 90, -98, -36, -79, 0, 91, 64, -43, 85, 29, -61, -45, -115, 15, -21, 90, 53, 11, 100, -33, -98, -9, 58, -104, -35, -1, -25, -3, 72, 82, 18, 29, -28, 109, 95, -70, 15, 4, -101, 49, -27, -39, -80, 4, -59, -16, 55, -47, 1, -3, -5, 99, -48, -56, -23, -79, 71, -51, 84, 43, 74, 97, -67, 39, 81, -67, 55, 42, -69, -46, 105, 7, 43, -70, 44, -56, 39, 33, 108, -11, 86, -21, -82, -57, 54, -92, 72, -54, 63, 89, -5, 86, 73, 75, -42, 56, 73, 77, 3, -17, -83, 1, -20, -47, 90, 102, -22, 48, 101, 84, 58, -26, -100, 40, 32, 46, 90, -31, -75, 7, -70, 3, 78, 30, -38, 25, 31, 1, 2, -65, -39, -16, -38, -64, -91, 28, 66, -100, 34, 91, 26, 17, -86, 57, -16, -26, 25, -13, -9, -82, -75, -55, -92, -77, 66, -63, 75, 89, -26, 20, -66, -114, -18, -24, -104, -105, -40, -64, 98, -60, -13, -14, -15, -16, 3, 30, -63, 58, -59, 14, 29, 66, 27, 72, -14, 65, 3, -44, 25, -58, 40, 41, 82, -43, -6, -79, 27, 108, -33, -6, 66, -50, -41, 33, -78, 56, 71, 92, 84, -6, -54, 42, 112, -68, -109, -61, -105, -13, 61, 45, -7, -67, 62, 9, -32, -55, 92, -64, 2, 52, 83, -10, 8, 8, -26, -65, 49, 47, -57, -51, -69, 95, -24, 7, 64, 39, -46, 18, 97, 77, -65, 53, 35, -42, 14, 93, -29, -114, 75, -22, -16, 106, 103, 1, -31, -47, -88, 103, 85, 21, 40, -50, -4, 18, 101, -8, -33, -65, 58, -1, 80, -15, -63, -81, 55, -17, -5, 10, 28, -42, -91, -66, -46, 110, 37, -84, -1, -93, 54, 7, -76, 26, -49, -94, -67, 103, -40, -16, 43, 45, 5, -99, 38, 68, -34, -2, 50, 9, -9, 0, 
  72, 14, -28, 29, 32, 44, -8, 97, -49, -8, 6, 60, -99, -63, -40, -38, 86, -90, -86, -60, -20, 77, 6, -8, -30, 4, 44, 79, -46, 43, 2, -72, 20, -101, 13, -58, -71, -44, -91, -39, -12, 85, 46, 50, -30, -41, -97, -56, -45, -18, -99, -70, 94, -52, 67, -74, 80, -40, 47, 73, 44, -39, -44, 13, 63, -29, 18, -7, -7, 72, 26, 42, -40, -98, 35, -28, 41, 15, 18, 21, 57, -30, 36, -20, -79, -83, 76, -37, -14, -56, 51, 74, -54, -27, -11, 5, 87, -10, 35, 50, -64, -8, -50, 71, 43, 80, -66, -38, 84, 88, -56, -50, -76, -18, -92, -20, -26, -75, 58, 68, -13, -107, -2, 41, 5, 14, 88, 50, -99, 44, 60, 60, -39, 83, -63, 29, 51, -42, 80, 44, -36, -30, -25, 86, 95, -32, -9, 37, -7, 82, 83, 86, 6, -35, 55, -18, -88, -75, -75, -74, -83, -60, 90, -6, 27, 96, 28, 84, -55, 87, 75, -80, 64, -48, -86, 27, 5, 69, -91, 27, -57, 40, -10, 81, -78, -70, -89, 38, -46, -86, 81, -10, 49, 22, 13, -92, -39, -34, 76, -25, -33, -29, -48, -50, 84, -75, -23, 46, -40, -74, -75, 23, 30, -11, 85, -71, 48, 23, 48, -16, 24, 10, -1, -9, 42, 39, 23, 4, -99, -20, -6, 26, -8, 85, 37, 32, -96, -49, -29, 89, 13, -101, -50, -5, -62, -90, 39, -108, -43, -93, 60, 92, -45, -52, -105, -92, -11, -46, 79, 15, -50, 20, -91, -75, -97, -14, 0, 66, -89, -72, -21, -58, 33, -16, 77, -95, -97, -70, 83, 21, -103, -79, -70, 86, 4, 7, 85, -30, -93, 53, 76, 57, 53, 34, 26, -54, -32, -8, 11, -27, 52, 64, -39, 46, -62, -34, -96, -9, -44, 87, 9, 62, -64, -96, -85, 47, -5, -30, -19, -63, -95, -25, -101, -7, 28, -64, 9, -17, 10, -45, -86, -92, 52, -56, -78, -61, -58, -46, -53, -29, -70, -40, -108, 58, -20, 83, 91, 95, -72, -40, -105, -89, 39, 52, -39, -61, 91, -90, -72, 67, 89, -81, -33, 26, -70, 78, -72, -24, 28, -4, 5, -46, -72, -36, -55, -36, 70, 98, -69, -91, -99, -74, 91, 62, -91, 12, -7, 7, -53, 26, -69, -48, -11, 5, -32, -104, -52, 38, -30, -83, -40, -4, -105, -89, 71, 11, -12, -32, 72, -76, 83, 46, -54, 54, -34, -6, 39, 49, -85, -27, 83, 52, 6, 78, -68, -2, -106, 39, 34, 75, -12, 37, -51, 92, 65, -5, -63, -60, -79, -30, 69, -49, 64, -66, 19, -30, 15, -21, -18, -56, 51, -67, 68, 49, 44, -83, -21, 62, 39, 28, -81, 23, -49, 56, 35, 61, -15, 20, 89, 88, -77, 43, -26, 80, -31, -76, -102, 16, -57, 3, -16, -64, 94, 48, 44, 56, -7, -20, 4, 28, -100, 61, -99, -57, 44, 32, -40, 15, 80, -69, -90, -90, 77, 19, 76, -58, -58, 24, 68, -75, 74, 12, 13, 91, -7, -57, -90, -72, 11, -78, -12, -67, 51, -11, -79, 32, 14, -90, 9, 52, 63, -24, 8, 56, 15, -71, -98, -34, -52, 53, 58, -77, 93, -27, -54, -49, 24, -5, 40, 66, -24, -97, -44, 16, -24, 61, 0, -78, 48, 2, -20, 27, -84, 46, -12, -55, 87, 39, -25, 81, -95, -98, -64, -2, -55, 89, -13, -48, 30, -101, -86, -82, -102, -73, 32, 24, -38, -47, 66, -49, -70, -10, 25, -6, 88, -90, 15, -33, -26, -68, -5, -81, -80, 36, -51, -22, -39, 31, -98, 82, -43, -87, 29, 55, -38, -103, 20, -90, -8, 54, -98, -65, 68, 55, 88, 68, 67, -8, 29, -57, -59, -81, 88, 41, -72, 52, -40, 41, 73, -39, 74, 24, 39, 55, 35, -36, 13, -17, -39, -62, -70, -102, -9, 57, 35, 34, -72, -44, -2, 60, 86, -90, -71, 35, 76, -80, -53, -33, 37, 47, -60, 91, 13, 23, -67, -64, 5, 16, 38, -15, -83, -13, -50, 57, 50, -24, 18, 36, -93, -100, -59, -10, -93, 78, 57, -97, -91, -84, 21, 26, -82, 21, 45, -39, 46, 51, -48, -41, 21, 56, 23, -68, -62, 5, -29, -100, -62, -4, -5, 67, 3, 55, 73, -92, -71, -46, -9, 12, 45, 31, 10, -74, 25, -65, -50, -77, -30, -43, -13, -22, -38, 77, 29, 24, 7, -104, 79, 64, -51, 13, -78, 48, 75, -86, 85, -88, -61, 74, -104, 27, 69, -93, 34, -30, 27, 67, -3, -22, -54, 75, -78, -5, -45, 29, 83, -29, 6, 80, -74, 44, -95, 75, 55, 72, 25, -50, -100, -35, -7, 1, -5, -102, -75, 46, -4, -81, 90, 68, -95, 58, 9, 57, 48, -78, 53, -32, 68, -90, -100, -14, 73, 27, 100, 31, -40, 24, 13, -57, -32, -57, -28, 17, -74, -88, 22, 8, 80, 47, 77, -39, 28, -34, 2, -85, -8, -45, 51, -44, -27, 26, -100, 3, -24, 58, 90, -54, -37, -70, -92, -82, 75, -19, -21, -37, 53, -52, 39, 6, -88, 72, 20, 78, 50, -42, -82, -66, -50, -41, -57, 37, 19, -76, -67, 17, 33, 45, 3, 15, -14, 68, 25, -95, -99, -40, 67, -65, 85, 45, -88, -31, -3, 19, 9, -57, -80, -44, -5, 18, 27, -25, 63, 90, 35, -107, 26, 93, 50, 80, -50, -49, 75, -47, -44, 28, -57, 29, -33, -81, -73, -107, 40, -83, -34, 66, 11, -105, 49, 44, -87, -63, -52, 79, 53, -100, 72, -85, -87, 5, 70, -50, 8, -57, -67, -26, 36, -48, -39, -70, 22, -17, 56, -59, -81, -56, 75, 24, 72, 50, -28, -66, -79, 65, -25, -44, 3, -94, 63, -80, -40, 56, 19, 50, 45, -93, 46, -76, -79, 79, -13, 25, -81, 76, 70, -78, -42, -95, -81, 83, -36, 76, 60, -50, 90, 15, 28, 73, 75, 44, 20, -43, 75, -74, -48, 11, -92, -53, 61, -104, -2, -54, -82, -78, 71, -32, 48, -18, -28, 1, 13, -27, -21, -69, 45, 103, 43, -74, -101, -71, 37, -24, 45, -93, -1, -69, 58, 37, 74, 27, 45, -33, 52, -81, -59, -98, 24, 87, 52, -74, 45, 78, 91, 36, -85, 17, -47, 14, 86, -60, 79, -2, 69, 69, 1, 84, 77, -96, -4, 94, 94, 6, 85, 77, -24, -39, -105, 75, 92, -8, -69, -59, -65, -81, -36, -20, -5, 90, -16, -33, -21, 32, -65, 79, 32, 34, 89, 53, 82, -70, 96, 5, 33, 36, -78, -55, 25, -93, 17, -38, -30, -62, 14, -44, -47, -37, -8, -7, 94, -67, -40, -98, -93, -31, -38, 11, 67, 10, -3, 37, 47, -92, -42, -87, -49, -99, 91, -73, 6, -97, -28, 83, 77, 41, 3, -14, -80, 88, 65, 21, -76, -103, 61, 63, 64, 31, 3, 48, -2, 14, -56, -98, 4, 81, 44, 9, -93, 23, 8, 51, -13, -89, 66, -74, 10, 63, 3, 28, -52, 28, -97, -43, 72, -10, 41, -100, -26, -101, -67, -36, 33, 77, -64, 92, 40, 23, 24, -10, -56, 82, -84, -69, 66, -62, 17, 42, -91, -48, -34, 36, 67, 84, -87, -85, 36, -1, -56, -73, -7, -16, 16, 59, -22, 48, 59, -72, -91, -90, 24, -10, 73, 65, 32, 3, -95, -61, -60, -18, 0, -50, 56, 59, -84, 4, -36, -70, 69, 62, -99, -25, -63, 63, -19, 21, -29, 80, -65, 87, -17, -72, 51, -103, 77, 67, -4, 40, -42, -78, -79, -22, -50, 93, -52, -79, 69, -43, 90, 41, 75, 41, 3, -85, 
};
const TfArray<2, int> tensor_dimension31 = { 2, { 8,1280 } };
const TfArray<1, float> quant31_scale = { 1, { 0.00067734462209045887, } };
const TfArray<1, int> quant31_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int8_t tensor_data32[3*32] = { 
  -52, 127, -61, 12, 113, -54, -102, -93, 76, 4, -25, -91, 92, 75, -44, -17, -46, -7, -118, 60, 31, -115, 100, -61, -7, 47, 84, -33, 33, 68, -53, 122, 
  98, -57, -77, 1, 13, 43, -100, -59, -67, 119, 90, 7, 106, 86, 1, -59, 103, 10, -89, -97, 118, 1, 9, 47, -75, 71, -21, -35, 73, 10, -67, -33, 
  -14, -94, 108, 106, 2, 72, -109, 57, -31, 29, -107, 102, 13, -75, 100, 49, 92, -88, -83, 96, 10, 29, 21, 51, -117, -54, -7, -15, 18, 90, -57, 53, 
};
const TfArray<2, int> tensor_dimension32 = { 2, { 3,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.0032955610658973455, } };
const TfArray<1, int> quant32_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { 11087, 3672, 4232, 2493, 4780, 4235, 906, -246, 14571, 1341, 5204, 4848, 6929, 17661, 2492, 4655, 1527, 17977, -2328, 4395, 4960, 5016, 6245, -2244, 1946, 9070, 5992, 1478, 5194, 13103, 6921, 18648, 11235, -52, 9130, 3240, 9131, 30649, 6543, -159, -1597, 4336, 1331, 4325, 24680, 7959, 1330, -3521, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 8.3577950135804713e-05, 0.00017278672021348029, 0.00017380797362420708, 0.00023793929722160101, 0.00015454711683560163, 0.00018890558567363769, 0.00021986803039908409, 0.00015280551451724023, 7.0152644184418023e-05, 0.00022668199380859733, 0.00015691241424065083, 0.00012740425881929696, 0.00012436916586011648, 5.385123222367838e-05, 0.00019577232887968421, 0.00013716612011194229, 0.00020702774054370821, 5.6243236031150445e-05, 0.00016879300528671592, 0.00014445105625782162, 0.00014163281593937427, 0.00010219543037237599, 0.00013714918168261647, 0.00019094081653747708, 0.00027680580387823284, 9.6215393568854779e-05, 0.00013206206494942307, 0.000256226776400581, 0.00016268581384792924, 7.2573842771816999e-05, 0.00011855346383526921, 6.0081347328377888e-05, 8.6778491095174104e-05, 0.00023953393974807113, 9.4106726464815438e-05, 0.00021018637926317751, 8.8830151071306318e-05, 3.5928085708292201e-05, 9.9023738584946841e-05, 0.00021290418226271868, 0.00025679558166302741, 0.00012186171807115898, 0.00024279394710902125, 0.00014936728985048831, 4.7699169954285026e-05, 0.00011621025623753667, 0.00026034217444248497, 0.00020167065667919815, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[48] = { 4, 12549, -1711, -1, -2387, -415, -454, -869, -5325, -129, 14733, 5815, 7527, 1071, -2148, -5521, -4547, -2026, -93, 1546, -5233, 17351, 1164, 5459, -124, 162, 8188, -10, 1669, -248, -8543, 12494, 604, 363, 304, -375, 2679, -736, 42, 12219, 354, 26, -2687, -2057, -4409, -10833, -4100, 2052, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00026425434043630958, 0.00014475328498519957, 0.00029823594377376139, 0.00022046678350307047, 0.00025220378302037716, 0.00037475969293154776, 0.0001885245437733829, 0.00085002148989588022, 0.00098329735919833183, 0.00019142724340781569, 0.00013460057380143553, 0.00024051504442468286, 0.00024415788357146084, 0.00066570576746016741, 0.00020226207561790943, 0.00014978658873587847, 0.00011110839841421694, 0.00071556400507688522, 0.00017409378779120743, 0.00019070287817157805, 9.651339496485889e-05, 9.4985007308423519e-05, 0.00028624042170122266, 0.00011260183964623138, 0.00021235532767605036, 0.00032027126871980727, 0.00012468818749766797, 0.00011925848957616836, 0.00043917965376749635, 0.00054418464424088597, 0.0001802471379050985, 0.00020753423450514674, 0.0006351747433654964, 0.00016010817489586771, 0.00041856171446852386, 0.00019982126832474023, 0.00024709338322281837, 0.00048303810763172805, 0.00014981346612330526, 0.00012172421702416614, 0.00016743449668865651, 0.00017694821872282773, 0.00010176411888096482, 0.00014645409828517586, 0.0013111669104546309, 0.00019837613217532635, 0.00018359908426646143, 0.0003177617909386754, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[48] = { 8283, 10289, 7850, -1461, 2650, 2442, -1775, 471, 3240, -3135, -996, 3159, -674, 1332, 3168, 3351, -6807, -3113, 6134, 2596, 2046, -2726, -2787, -4857, 22, 992, 1317, -1899, 3209, 1305, -1078, -2213, -1521, 2809, 7988, 5090, 4444, 1944, 4438, 9873, 5500, 2037, 1824, 8405, 3891, 818, -1936, 2535, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 9.9426077213138342e-05, 9.4756709586363286e-05, 0.00010575544001767412, 0.00020126199524383992, 0.00023260232410393655, 0.0002511712082196027, 0.00021713573369197547, 0.00018161517800763249, 0.00021249752899166197, 0.00015919673023745418, 0.0002580895961727947, 0.00017557365936227143, 0.00031304557342082262, 0.0002436246577417478, 0.00027460520504973829, 0.00017357722390443087, 0.00011366642138455063, 0.00015033803356345743, 0.00013984939141664654, 0.00022935816377867013, 0.00022758991690352559, 0.00019847146177198738, 0.0002018446393776685, 0.00013619336823467165, 0.00029418410849757493, 0.00021251136786304414, 0.00023408090055454522, 0.00022537345648743212, 0.00020078508532606065, 0.00021642877254635096, 0.00029047354473732412, 0.00019461604824755341, 0.00022235338110476732, 0.00019289393094368279, 0.00011165369505761191, 0.00015926393098197877, 0.00015793833881616592, 0.00027130558737553656, 0.00010794694389915094, 9.6190720796585083e-05, 0.00012418038386385888, 0.00031098889303393662, 0.00019416374561842531, 0.00010569200094323605, 0.00018280041695106775, 0.00026192536461167037, 0.00020278134616091847, 0.00018753443146124482, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[8] = { -351, -9806, 1764, 5399, 1302, 852, 1101, 1387, };
const TfArray<1, int> tensor_dimension36 = { 1, { 8 } };
const TfArray<8, float> quant36_scale = { 8, { 0.00012203150254208595, 0.00014990178169682622, 0.00053853623103350401, 0.00029307734803296626, 0.0021822082344442606, 0.0015499830478802323, 0.00044510076986625791, 0.00012718596553895622, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { 21271, 31845, 24901, -667, 92, 30847, -7408, 243, 25592, 9518, -8632, 23812, -392, 29771, 21218, 1162, -450, -1528, 26680, -10208, 25830, -2342, -179, -1230, 2967, 13693, -18254, -4546, -4, 16784, 18189, 1616, -265, 27360, -9227, 20262, 20380, 15545, -1295, 21981, 18776, 14920, 23243, 24783, -232, -235, 16223, 14783, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00011084965080954134, 0.00011323797662043944, 0.00010418698366265744, 9.8783471912611276e-05, 8.8761131337378174e-05, 6.3293387938756496e-05, 0.0001027417674777098, 0.00011036901560146362, 7.0361085818149149e-05, 0.00013183857663534582, 9.1945687017869204e-05, 7.0200308982748538e-05, 8.2675338489934802e-05, 7.1306028985418379e-05, 0.00011078878014814109, 7.7437449363060296e-05, 0.00023989587498363107, 0.00030292276642285287, 0.00010405345528852195, 7.2986869781743735e-05, 7.9072131484281272e-05, 0.00012666510883718729, 0.00028059812029823661, 0.00028169419965706766, 7.2769100370351225e-05, 7.6093136158306152e-05, 0.00014059750537853688, 0.00022474565776064992, 6.3309707911685109e-05, 0.0001072360755642876, 8.3251252362970263e-05, 0.0001093649843824096, 0.00018147307855542749, 6.5706750319804996e-05, 0.00016631575999781489, 0.00011237535363761708, 8.4518535004463047e-05, 7.1661896072328091e-05, 0.00010978419595630839, 0.00013075000606477261, 0.00012049121141899377, 6.6714950662571937e-05, 7.3403658461757004e-05, 0.00012233150482643396, 0.00017155057867057621, 8.0278849054593593e-05, 6.558949826285243e-05, 0.00010671743075363338, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { 10981, 4981, 6722, 6717, 5666, 6213, 4356, 2351, -323, 13653, 1295, 1439, 256, 22890, 6104, 6012, -1738, 2939, 2648, 1902, 6573, 19591, 5790, -2762, 3324, 6366, 8217, 8921, 1831, 10130, -207, 8656, 9414, 8788, 13169, 9436, -444, 16849, 6031, 2127, -689, -335, 8510, 2561, -5739, 12820, 7912, 3976, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 7.7193253673613071e-05, 0.00013103830860927701, 0.00011303825885988772, 0.00011231435200897977, 0.00010818368173204362, 0.0001175270153908059, 0.00012763214181177318, 0.00018894398817792535, 0.00019907635578420013, 6.4787513110786676e-05, 0.00013071700232103467, 0.00012771799811162055, 0.00014910996833350509, 5.2123697969364002e-05, 0.00010740941070253029, 8.9328947069589049e-05, 0.00019220680405851454, 0.00013998852227814496, 0.00017843769455794245, 0.00013310294889379293, 0.00010904103692155331, 5.1711162086576223e-05, 0.00013188819866627455, 0.00015784800052642822, 0.00011301262566121295, 0.0001171376061392948, 9.1689391410909593e-05, 0.00012385848094709218, 0.0001239073317265138, 8.7438544142059982e-05, 0.00015808611351530999, 9.9475255410652608e-05, 7.9340512456838042e-05, 8.8018336100503802e-05, 7.3098366556223482e-05, 9.2818874691147357e-05, 0.00020426431728992611, 6.3021630921866745e-05, 0.00011373419692972675, 0.00014110925258137286, 0.00016215577488765121, 0.00019145043916068971, 7.1715847298037261e-05, 0.00015844682638999075, 0.00011018479563063011, 6.8947047111578286e-05, 0.0001049591664923355, 0.00016292437794618309, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { 126, -2623, 330, -1967, 8132, -268, 12366, -8041, -15, 579, -1489, -3534, -1245, 55389, 21834, 24999, 530, 19150, 7320, -9875, 9858, -1457, 33281, -821, 10, -305, 12271, 11041, 17452, -1847, 80, -432, -467, -150, 24244, -70, 9578, 16893, -12428, 95, 15420, -3522, 4269, -10218, -19, -728, 11343, 16700, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00014643036411143839, 0.00018511524831410497, 0.00022040931798983365, 8.237347356043756e-05, 0.00013709887571167201, 0.00015851072384975851, 7.6896467362530529e-05, 3.3161115425173193e-05, 0.00024919415591284633, 0.00025696220109239221, 0.00015349555178545415, 5.4662781622027978e-05, 0.00013263785513117909, 6.6646207415033132e-05, 6.3426581618841738e-05, 7.9614095739088953e-05, 0.00022510388225782663, 5.7229761296184734e-05, 0.00010689744522096589, 8.175981929525733e-05, 9.6849587862379849e-05, 0.00033203570637851954, 4.8085770686157048e-05, 0.000188783960766159, 0.00021493741951417178, 9.4161383458413184e-05, 7.8255150583572686e-05, 0.0001746693451423198, 5.8689030993264169e-05, 0.00027476067771203816, 0.00011999165872111917, 0.00018684628594201058, 0.00015292176976799965, 0.00021951292001176625, 0.00013099463831167668, 0.00012578986934386194, 0.00013629741442855448, 0.00016564215184189379, 7.6173288107383996e-05, 0.00018798286328092217, 6.4838684920687228e-05, 8.6340929556172341e-05, 8.415688353125006e-05, 0.00011753016588045284, 0.00084912002785131335, 0.00024908952764235437, 0.00016202665574382991, 7.7960823546163738e-05, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { -257, 3503, 4852, 866, 3262, -864, 3722, 5826, 3418, -1512, 5452, -5110, -1241, 10984, 8749, 5298, 6005, 2202, -4834, -3540, -2068, -6679, 6086, 4324, 8216, 4571, -6852, 18713, 1313, 48, 7208, 709, 9646, 4873, 9311, 3760, -72, 10800, -111, 3431, 5610, 2413, 2124, -507, 6074, 954, 7030, 17847, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00014244299381971359, 0.00015178450848907232, 0.00016233172209467739, 0.00011546644964255393, 0.00010844915232155472, 0.00013041956117376685, 0.00017324792861472815, 0.00012187595712020993, 0.00015779459499754012, 0.00012991541007068008, 0.00012381243868730962, 0.0001375721039948985, 0.00016861154290381819, 7.6109601650387049e-05, 9.5347910246346146e-05, 0.00014043740520719439, 0.00012750063615385443, 0.00017273965931963176, 9.8509124654810876e-05, 0.00013019613106735051, 0.00016897097520995885, 0.00010106146510224789, 0.00010015776206273586, 0.00012693398457486182, 9.2712805781047791e-05, 0.00015117872681003064, 8.0002282629720867e-05, 5.2421706641325727e-05, 0.0001335896085947752, 0.00019733468070626259, 0.00011036288924515247, 0.00014722115884069353, 8.3662016550078988e-05, 0.00014587234181817621, 9.2103138740640134e-05, 0.00012368241732474416, 0.00013641772966366261, 8.1590864283498377e-05, 0.00014544188161380589, 0.00012478006829041988, 0.0001112011304940097, 0.00013560119259636849, 0.00016676899394951761, 0.00013549819414038211, 0.00010772592213470489, 0.00017273174307774752, 9.4921793788671494e-05, 5.2443585445871577e-05, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 3201, -8610, 27697, 25743, -6407, 287, 35311, 19509, -3569, -11227, 24506, -2370, -16689, -6211, 36271, -5344, 38864, 2383, -437, -8959, -352, -16, 21345, 4163, 8031, 2240, -6828, 7641, -5929, -25779, 32, -19489, 864, 23810, -3949, -7339, 19039, 21350, 4687, 24942, 7395, 20309, 17793, 14532, -10628, -9725, 8800, -8946, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.0001266968174604699, 0.00017040182137861848, 6.740021490259096e-05, 5.741566201322712e-05, 0.00017307449888903648, 0.00012775327195413411, 5.3812367696082219e-05, 7.1080459747463465e-05, 0.00021438371913973242, 0.00013999815564602613, 6.9645560870412737e-05, 0.00026873007300309837, 9.3765222118236125e-05, 0.00014530053886119276, 6.1308579461183399e-05, 0.00015119246381800622, 4.3219970393693075e-05, 0.00010593494516797364, 0.00029352231649681926, 9.6167255833279341e-05, 0.00015430919302161783, 0.00033186143264174461, 9.5640119980089366e-05, 9.0427725808694959e-05, 0.0001718057319521904, 9.9909411801490933e-05, 0.00019223798881284893, 0.00019452122796792537, 5.6957571359816939e-05, 7.6253134466242045e-05, 0.00018308314611203969, 5.4392225138144568e-05, 0.00015738862566649914, 6.4249878050759435e-05, 0.00015696341870352626, 0.00015036705008242279, 5.6598666560603306e-05, 0.00010120614751940593, 0.00010510754509596154, 5.0874052249127999e-05, 8.5470201156567782e-05, 5.5116954172262922e-05, 5.3927476983517408e-05, 0.00010162280523218215, 0.00011033406917704269, 0.00012340513058006763, 0.00010300047870259732, 0.00017651183588895947, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int32_t tensor_data42[48] = { -1120, -457, -1249, 25387, 5663, -5218, 632, -4710, -2947, -1750, -6016, 5490, 2492, -625, 13792, 982, 6783, 17654, -5036, 1702, 4558, 6093, 4557, 175, 6101, -4532, 1106, -1548, 4580, 920, 5833, 1913, 592, 7016, 1808, 6098, 4084, 8175, 6560, -2806, 3321, 3422, -2167, 1211, -5476, 63, 2059, 10, };
const TfArray<1, int> tensor_dimension42 = { 1, { 48 } };
const TfArray<48, float> quant42_scale = { 48, { 0.00018063320021610707, 0.00018187754903919995, 0.00014794070739299059, 3.7573401641566306e-05, 0.00012340411194600165, 0.00013846730871591717, 0.00014431869203690439, 0.00011567937326617539, 0.00016795248666312546, 0.00017388486594427377, 2.5675444703665562e-05, 0.00013408299128059298, 0.00012729570153169334, 0.00013185462739784271, 6.6803208028431982e-05, 0.00015395504306070507, 0.00011201554298168048, 5.5129024985944852e-05, 0.00012215939932502806, 0.0001933373132487759, 0.00012861183495260775, 0.00011597832053666934, 0.00014775902673136443, 0.00017368629050906748, 0.0001314992259722203, 0.0001261930592590943, 0.00016975901962723583, 0.00017298026068601757, 0.00015641504433006048, 0.00018491686205379665, 0.00010769232176244259, 0.00015556209837086499, 0.00014693691628053784, 0.00010135394404642284, 0.00011453530169092119, 9.8597396572586149e-05, 0.00015069992514327168, 8.460988465230912e-05, 0.00011377142072888091, 0.00016377770225517452, 0.0001337237044936046, 0.00014550931518897414, 0.0001806587097235024, 0.00012768091983161867, 6.5509033447597176e-05, 0.00014175089017953724, 0.00018595282745081931, 0.0001372857514070347, } };
const TfArray<48, int> quant42_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[48] = { -5336, 3127, 31424, 42091, 28073, -387, 1856, -264, -1598, -21763, -9, 29616, 114, -5065, 40719, -4700, -10679, 1475, 13609, 42739, 91129, 35017, 40065, -115, -2557, -1839, -12246, -811, 751, -4767, 35236, 28727, 48609, 41072, -16537, 28483, 65015, 23788, 33357, -603, 40892, -4368, -308, 14747, -269, 45416, -14269, -9071, };
const TfArray<1, int> tensor_dimension43 = { 1, { 48 } };
const TfArray<48, float> quant43_scale = { 48, { 5.5582142522325739e-05, 5.7524946896592155e-05, 4.0416172851109877e-05, 8.2989878137595952e-05, 5.7232653489336371e-05, 0.0001926547265611589, 4.293964957469143e-05, 0.00011972957872785628, 0.00010038762411568314, 8.1174453953281045e-05, 0.00032882302184589207, 7.0187670644372702e-05, 5.9304617025190964e-05, 0.00016400701133534312, 6.9264751800801605e-05, 5.1224415074102581e-05, 5.5418284318875521e-05, 0.00015208321565296501, 7.7552962466143072e-05, 4.7005156375234947e-05, 2.4794311684672721e-05, 4.9407510232413188e-05, 4.4720887672156096e-05, 6.0164900787640363e-05, 5.5822943977545947e-05, 8.0297933891415596e-05, 4.0379632991971448e-05, 6.6400534706190228e-05, 9.3969014415051788e-05, 5.2585277444450185e-05, 4.4611406337935477e-05, 5.141844303580001e-05, 4.5308719563763589e-05, 4.3505493522388861e-05, 6.358342943713069e-05, 6.0171467339387164e-05, 3.3142987376777455e-05, 6.1653598095290363e-05, 6.0404257965274155e-05, 6.7691573349293321e-05, 4.0730341424932703e-05, 7.6300115324556828e-05, 6.9421817897818983e-05, 8.6090782133396715e-05, 0.00035414041485637426, 3.8378984754672274e-05, 4.7359022573800758e-05, 5.74699261051137e-05, } };
const TfArray<48, int> quant43_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[8*3*3*3] = { 
  /* [0][0][][] */ 40,113,28, 51,127,38, 19,14,8, 
  /* [0][1][][] */ -2,-13,-8, -3,-19,-5, -1,-3,0, 
  /* [0][2][][] */ -43,-93,-21, -45,-112,-25, -12,-21,-10, 
  /* [1][0][][] */ 51,107,46, -8,-10,-7, -47,-88,-50, 
  /* [1][1][][] */ 77,127,59, -3,-21,1, -64,-114,-55, 
  /* [1][2][][] */ 34,23,19, -2,3,8, -38,-28,-16, 
  /* [2][0][][] */ -41,68,-27, -48,64,-39, -10,26,-17, 
  /* [2][1][][] */ -26,122,-58, -23,127,-88, 4,17,-10, 
  /* [2][2][][] */ -27,62,-46, -40,72,-48, -23,49,-25, 
  /* [3][0][][] */ 76,-30,-56, 94,-22,-85, 35,-16,-27, 
  /* [3][1][][] */ 76,-9,-75, 99,6,-127, 31,-22,-29, 
  /* [3][2][][] */ 30,-25,-3, 34,-15,-25, 7,-21,23, 
  /* [4][0][][] */ 26,-47,3, 43,-61,2, 8,-21,6, 
  /* [4][1][][] */ 90,-25,-10, 127,-34,-16, 22,-8,6, 
  /* [4][2][][] */ 21,-33,3, 43,-44,2, 13,-17,4, 
  /* [5][0][][] */ 27,39,1, -46,-100,-14, 12,18,-6, 
  /* [5][1][][] */ 35,53,-2, -56,-127,-20, 10,26,-4, 
  /* [5][2][][] */ 6,7,-2, -26,-24,-5, -3,8,0, 
  /* [6][0][][] */ 12,-39,25, 23,-58,37, 23,-53,34, 
  /* [6][1][][] */ 20,-66,48, 52,-127,80, 41,-90,49, 
  /* [6][2][][] */ 20,-23,3, 41,-71,33, 23,-38,14, 
  /* [7][0][][] */ -4,-67,-17, -10,-65,-14, 3,-1,-5, 
  /* [7][1][][] */ 28,122,19, 27,127,25, 4,-3,2, 
  /* [7][2][][] */ -20,-56,-5, -28,-53,-6, 1,-3,0, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant44_scale = { 8, { 0.017453176900744438, 0.010256853885948658, 0.0049775401130318642, 0.0024131895042955875, 0.0030190616380423307, 0.0017023519612848759, 0.012964372523128986, 0.029917076230049133, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[8*1*1*8] = { 
  /* [0][0][][] */ 127,-77,-15,9,-124,-49,2,124, 
  /* [1][0][][] */ -23,127,-39,2,-16,0,4,-10, 
  /* [2][0][][] */ 127,51,-80,-19,115,74,52,78, 
  /* [3][0][][] */ 22,31,-18,-43,-46,-127,-1,19, 
  /* [4][0][][] */ -9,-44,0,-39,-38,127,-7,0, 
  /* [5][0][][] */ 127,58,43,-18,116,58,-13,71, 
  /* [6][0][][] */ -68,-2,81,-127,83,-116,73,-58, 
  /* [7][0][][] */ 121,-51,-18,16,-79,-70,-8,127, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant45_scale = { 8, { 0.0052424180321395397, 0.0056282053701579571, 0.0067982450127601624, 0.013491302728652954, 0.015097745694220066, 0.010346394032239914, 0.0081832036375999451, 0.010887809097766876, } };
const TfArray<8, int> quant45_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[48*1*1*8] = { 
  /* [0][0][][] */ 20,127,-29,97,-26,29,4,-28, 
  /* [1][0][][] */ -3,-8,127,102,78,-51,27,-26, 
  /* [2][0][][] */ -42,127,-9,51,-53,35,-8,19, 
  /* [3][0][][] */ 44,-78,-38,23,-61,127,-14,-96, 
  /* [4][0][][] */ 12,-25,85,127,54,-41,-49,-57, 
  /* [5][0][][] */ 127,-35,19,61,-14,84,-74,-49, 
  /* [6][0][][] */ -10,-127,-67,90,-55,26,34,3, 
  /* [7][0][][] */ 23,-21,83,127,85,-27,-1,-54, 
  /* [8][0][][] */ 31,-10,7,-7,-29,-95,-10,-127, 
  /* [9][0][][] */ 49,97,-56,107,-126,-32,127,22, 
  /* [10][0][][] */ -127,1,-17,1,8,-42,6,18, 
  /* [11][0][][] */ 0,127,-18,34,-33,20,-5,-11, 
  /* [12][0][][] */ 2,-25,-127,11,-11,116,-3,-30, 
  /* [13][0][][] */ 2,127,-9,6,3,13,-3,-7, 
  /* [14][0][][] */ 6,15,90,-119,-40,-55,127,29, 
  /* [15][0][][] */ 42,21,-46,-127,-75,-3,12,6, 
  /* [16][0][][] */ -81,-13,-19,51,24,113,-75,127, 
  /* [17][0][][] */ 0,-127,-11,48,-67,-18,7,0, 
  /* [18][0][][] */ -127,-65,-43,98,33,57,-87,-4, 
  /* [19][0][][] */ 25,43,14,-99,-16,-127,82,-28, 
  /* [20][0][][] */ 127,-37,-1,-5,-6,60,-16,-8, 
  /* [21][0][][] */ 24,33,58,-127,-53,-93,43,37, 
  /* [22][0][][] */ -22,127,-8,-17,5,-12,40,23, 
  /* [23][0][][] */ 12,6,81,127,96,-25,-3,-40, 
  /* [24][0][][] */ 4,127,12,-54,92,23,-12,-5, 
  /* [25][0][][] */ 4,11,59,90,127,2,123,-1, 
  /* [26][0][][] */ -127,-15,-24,13,36,35,18,95, 
  /* [27][0][][] */ 127,15,-2,22,11,30,-16,-49, 
  /* [28][0][][] */ -74,-38,1,127,-36,21,-120,-69, 
  /* [29][0][][] */ 120,47,-43,31,-127,11,5,-12, 
  /* [30][0][][] */ 2,-21,-29,-127,-108,-11,-31,34, 
  /* [31][0][][] */ -6,-127,14,0,6,-15,-6,-6, 
  /* [32][0][][] */ -54,62,47,-54,13,-61,38,127, 
  /* [33][0][][] */ 19,-127,0,-3,8,-12,-4,-12, 
  /* [34][0][][] */ 17,127,31,-39,-26,-72,71,16, 
  /* [35][0][][] */ -32,32,-61,82,122,-127,-21,32, 
  /* [36][0][][] */ 118,-5,3,-3,-26,-43,8,-127, 
  /* [37][0][][] */ -21,127,-49,-72,-106,56,27,50, 
  /* [38][0][][] */ -1,-6,127,-20,-40,-85,-28,-4, 
  /* [39][0][][] */ -89,9,2,-5,18,50,-3,127, 
  /* [40][0][][] */ 1,127,1,-25,44,17,-5,-4, 
  /* [41][0][][] */ 7,-32,-127,76,26,119,-38,-38, 
  /* [42][0][][] */ -127,0,-9,-3,5,-41,2,25, 
  /* [43][0][][] */ 32,-23,-44,123,-127,4,-3,-47, 
  /* [44][0][][] */ -35,-34,27,127,43,60,-81,-16, 
  /* [45][0][][] */ 127,5,14,-5,-11,-5,10,-22, 
  /* [46][0][][] */ 0,10,-14,17,58,117,127,7, 
  /* [47][0][][] */ -38,-89,83,-96,-127,70,61,-15, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant46_scale = { 48, { 0.0014139744453132153, 0.0061345663852989674, 0.0015500885201618075, 0.0037903811316937208, 0.0026906155981123447, 0.0043828417547047138, 0.0025744761805981398, 0.00200832006521523, 0.0033355813939124346, 0.00058073259424418211, 0.0067692012526094913, 0.0040425052866339684, 0.0063039134256541729, 0.0060339844785630703, 0.001218929304741323, 0.0019225465366616845, 0.0023953660856932402, 0.0057155252434313297, 0.0035263854078948498, 0.003604724770411849, 0.0022068694233894348, 0.0074850083328783512, 0.00095957907615229487, 0.0035438400227576494, 0.0029533074703067541, 0.0069211637601256371, 0.0024686413817107677, 0.0063841943629086018, 0.0052599138580262661, 0.0011808106210082769, 0.0012356792576611042, 0.0049256477504968643, 0.00072475138586014509, 0.0054970579221844673, 0.0042220083996653557, 0.00069523730780929327, 0.0018562058685347438, 0.0016425936482846737, 0.0083438251167535782, 0.0063715940341353416, 0.0078243715688586235, 0.0092356204986572266, 0.0076335459016263485, 0.0023893576581031084, 0.0037715043872594833, 0.0062715434469282627, 0.0028353657107800245, 0.0028953941073268652, } };
const TfArray<48, int> quant46_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[8*1*1*48] = { 
  /* [0][0][][] */ 59,3,16,-36,-9,7,-4,-7,-3,24,-86,-46,19,11,8,-12,-12,82,-19,34,9,31,33,-6,66,0,-7,115,68,6,37,40,-15,32,-14,16,0,51,-32,-36,5,0,-28,55,-7,127,9,-16, 
  /* [1][0][][] */ 11,59,22,-45,33,2,-25,-16,9,-23,34,1,14,37,79,-12,7,1,43,-25,38,-57,13,-21,1,-127,-15,-29,37,36,21,15,34,-14,-45,-28,-11,20,-51,-14,42,33,-40,22,34,-30,32,12, 
  /* [2][0][][] */ -42,5,-87,-19,68,86,39,58,73,41,-114,45,48,3,-14,86,127,-45,45,-9,5,-45,-83,31,-61,-24,54,-19,16,-33,-70,-10,-4,33,20,3,70,-76,36,-118,-25,48,94,-32,16,25,16,34, 
  /* [3][0][][] */ -68,-27,12,-24,12,-5,-5,-3,-2,-40,-43,20,-13,29,-9,-10,-17,-80,-1,22,-1,-11,-39,-3,-127,-2,-9,69,61,10,-45,-45,0,-53,-9,16,-13,-50,24,16,31,32,13,-45,13,30,14,0, 
  /* [4][0][][] */ -37,2,-51,-70,17,33,21,23,19,14,-43,68,57,-10,99,33,47,-51,18,-47,-4,89,-23,11,-58,113,22,-38,10,-26,-17,-41,11,18,-34,-71,23,-24,-127,-108,-3,-113,40,-13,7,-15,13,39, 
  /* [5][0][][] */ 21,-12,114,7,95,-86,-71,-38,6,-59,113,-127,-23,61,-9,-36,63,-18,63,-25,81,13,41,-54,-9,29,-62,32,-14,63,41,-2,85,-46,5,17,-45,50,23,-6,90,0,-81,27,97,-19,85,-25, 
  /* [6][0][][] */ 41,-127,-16,-114,42,-22,-28,-15,0,-16,20,65,20,17,-3,-21,-19,40,52,7,32,-72,35,-28,3,121,-14,14,10,51,59,66,32,-60,-73,-116,-21,39,19,34,28,50,-39,1,35,-64,43,123, 
  /* [7][0][][] */ -29,-10,-76,-12,-20,7,4,4,-8,-13,-8,-30,-1,62,-3,-9,-2,-66,-8,-1,-22,14,-86,12,-42,7,1,2,-20,7,-65,-15,-21,127,7,-13,-5,-71,10,17,38,9,33,49,-16,9,-17,9, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant47_scale = { 8, { 0.004827592521905899, 0.006738557480275631, 0.0051117260009050369, 0.0061179157346487045, 0.0049270861782133579, 0.0063791712746024132, 0.0038312457036226988, 0.005559820681810379, } };
const TfArray<8, int> quant47_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[48*1*1*8] = { 
  /* [0][0][][] */ -21,127,9,7,-93,-42,-114,-30, 
  /* [1][0][][] */ 38,24,45,-12,-61,-6,127,-79, 
  /* [2][0][][] */ -48,-44,77,-7,-127,29,12,12, 
  /* [3][0][][] */ 127,-4,27,77,-3,1,-31,-24, 
  /* [4][0][][] */ -63,13,8,-127,1,33,21,108, 
  /* [5][0][][] */ -127,38,3,-69,0,8,26,19, 
  /* [6][0][][] */ 75,18,2,14,-7,-2,29,127, 
  /* [7][0][][] */ -22,-6,-127,84,-1,-6,1,83, 
  /* [8][0][][] */ 127,14,-6,69,9,-22,-4,-32, 
  /* [9][0][][] */ 28,-17,7,-78,-3,30,-8,127, 
  /* [10][0][][] */ 39,2,9,-75,-5,30,0,127, 
  /* [11][0][][] */ -5,39,-127,83,14,-7,-31,75, 
  /* [12][0][][] */ -29,-11,127,30,40,55,-27,3, 
  /* [13][0][][] */ 28,14,99,-127,-91,-12,-38,-77, 
  /* [14][0][][] */ -127,26,-62,-114,4,1,-29,21, 
  /* [15][0][][] */ -56,-8,-11,28,15,-87,-33,127, 
  /* [16][0][][] */ -125,24,7,-127,-9,23,25,101, 
  /* [17][0][][] */ -6,-19,-30,127,21,39,-8,54, 
  /* [18][0][][] */ -60,-3,-29,127,-2,-67,28,-113, 
  /* [19][0][][] */ 48,25,-127,-78,-35,-64,16,-42, 
  /* [20][0][][] */ 92,-80,47,58,51,-22,-127,-35, 
  /* [21][0][][] */ 25,-7,127,-89,101,126,-10,-101, 
  /* [22][0][][] */ 19,-59,-11,-6,-1,78,-127,75, 
  /* [23][0][][] */ -82,-30,-10,-25,-22,-2,42,-127, 
  /* [24][0][][] */ 11,-127,-3,-13,60,40,86,15, 
  /* [25][0][][] */ 26,-95,-4,-84,61,97,-127,20, 
  /* [26][0][][] */ -28,-38,127,-14,59,59,-70,-24, 
  /* [27][0][][] */ 28,-127,28,-8,1,14,51,3, 
  /* [28][0][][] */ -127,6,-11,-17,20,9,11,-52, 
  /* [29][0][][] */ 28,127,19,42,-98,-63,15,90, 
  /* [30][0][][] */ -44,23,15,-127,63,5,90,43, 
  /* [31][0][][] */ 60,91,-114,103,-54,127,94,90, 
  /* [32][0][][] */ 44,-4,17,-68,-8,21,-3,127, 
  /* [33][0][][] */ 127,17,-11,92,-39,-57,60,-6, 
  /* [34][0][][] */ 45,-22,0,-127,-49,-13,28,-73, 
  /* [35][0][][] */ 53,-54,36,28,-6,14,127,26, 
  /* [36][0][][] */ 2,-60,112,45,85,72,-127,21, 
  /* [37][0][][] */ 127,-9,-103,70,-8,-48,12,57, 
  /* [38][0][][] */ 26,-19,92,-127,-23,-53,38,-101, 
  /* [39][0][][] */ 85,2,20,125,6,-43,9,-127, 
  /* [40][0][][] */ 72,-30,-39,14,66,47,-127,-18, 
  /* [41][0][][] */ -43,-35,127,102,72,66,-122,41, 
  /* [42][0][][] */ 127,7,24,2,19,13,-22,66, 
  /* [43][0][][] */ 119,-53,66,5,-51,73,-10,127, 
  /* [44][0][][] */ -27,17,-127,7,-39,-18,38,53, 
  /* [45][0][][] */ -1,53,4,-20,4,-77,127,-18, 
  /* [46][0][][] */ 127,-2,12,27,-10,-12,-2,61, 
  /* [47][0][][] */ -55,4,16,127,43,0,-41,53, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant48_scale = { 48, { 0.0021849770564585924, 0.0045171603560447693, 0.0045438590459525585, 0.0062204431742429733, 0.004040322732180357, 0.0049385558813810349, 0.0057480065152049065, 0.0039947922341525555, 0.0018339995294809341, 0.0059261438436806202, 0.0041021588258445263, 0.0033307273406535387, 0.0032513812184333801, 0.0014078319072723389, 0.0051180729642510414, 0.0035859316121786833, 0.0054123229347169399, 0.0014703660272061825, 0.0044127530418336391, 0.0037763817235827446, 0.0037027045618742704, 0.0026716934517025948, 0.0035854887682944536, 0.0049917628057301044, 0.0072365296073257923, 0.0025153574533760548, 0.0034524966031312943, 0.0066985324956476688, 0.0042530926875770092, 0.0018972968682646751, 0.0030993414111435413, 0.0015707056736573577, 0.0022686487063765526, 0.006262131966650486, 0.0024602306075394154, 0.0054948991164565086, 0.0023222852032631636, 0.0009392673964612186, 0.0025887759402394295, 0.0055659506469964981, 0.0067134024575352669, 0.0031858289148658514, 0.006347358226776123, 0.0039049065671861172, 0.0012469986686483026, 0.0030380829703062773, 0.0068061216734349728, 0.0052722729742527008, } };
const TfArray<48, int> quant48_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[8*1*1*48] = { 
  /* [0][0][][] */ -19,47,-30,-54,-127,-47,-78,-21,-25,-105,-3,-33,-86,-26,-44,-74,38,-51,-89,44,-1,4,-100,5,-59,-88,6,-32,-85,-96,-14,74,-63,-65,14,-20,12,-66,1,81,-59,29,28,-21,80,-61,-40,-32, 
  /* [1][0][][] */ 47,-25,11,27,-38,-77,-63,-5,81,-4,-27,27,-9,-31,-37,-56,-9,33,-48,51,-41,4,-25,78,-127,-42,-19,-86,-10,4,75,-34,-58,-35,36,-48,-17,5,11,-52,30,5,77,-67,35,68,21,-31, 
  /* [2][0][][] */ 12,-35,-11,38,-3,43,21,92,50,-55,-12,116,-87,26,9,9,-34,-87,-54,-41,-15,127,-44,50,5,40,101,0,-11,-16,9,-9,49,-14,30,-73,-71,-3,-14,47,9,-20,-27,-46,-116,33,-32,-12, 
  /* [3][0][][] */ 9,127,-33,-6,-9,-19,-12,-24,-21,-35,42,-35,-44,-11,7,1,80,-56,0,-14,-53,-26,-21,-22,-65,-21,9,-18,-6,-38,2,90,-27,33,-9,1,-30,-5,15,-9,4,14,22,15,-10,-8,58,31, 
  /* [4][0][][] */ 16,24,-127,26,4,35,39,45,28,-41,59,28,41,-11,60,25,26,46,7,-65,42,-48,-25,1,74,29,96,-124,5,10,112,0,26,54,53,-17,5,25,63,-39,113,63,-37,28,-108,83,59,19, 
  /* [5][0][][] */ 62,79,26,81,34,-37,-30,-20,-65,11,-79,-18,-30,5,53,-98,7,25,-33,-11,61,28,13,-48,39,-44,12,52,27,-30,-56,-81,-47,22,8,40,71,127,37,-13,15,51,5,38,-5,-72,-23,75, 
  /* [6][0][][] */ 1,18,19,19,-13,-44,-37,5,11,8,-23,18,-14,-40,-47,-7,-1,-42,-24,27,-57,35,-11,42,127,-10,-18,63,2,24,10,-14,-27,-24,14,-64,-52,-28,-47,-23,-13,-31,50,-60,7,71,13,-60, 
  /* [7][0][][] */ -6,-72,-3,5,-49,53,39,-30,106,-41,-1,-87,-37,72,-29,-2,-90,12,-18,20,6,-98,-20,68,83,25,-9,42,-67,41,-28,1,109,-20,-90,-18,53,-14,44,115,-39,59,-6,-41,89,-13,-127,100, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant49_scale = { 8, { 0.0082291169092059135, 0.0067317350767552853, 0.0063919210806488991, 0.014082305133342743, 0.0035296769347041845, 0.0073111215606331825, 0.0099309943616390228, 0.0076306755654513836, } };
const TfArray<8, int> quant49_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[48*1*1*8] = { 
  /* [0][0][][] */ -127,-20,-95,-94,-37,-78,-29,-37, 
  /* [1][0][][] */ -46,89,-73,127,88,13,102,-81, 
  /* [2][0][][] */ 17,-11,-111,-107,-36,-54,27,-127, 
  /* [3][0][][] */ -24,-86,5,-87,72,-127,-102,58, 
  /* [4][0][][] */ 9,12,3,13,13,-127,10,65, 
  /* [5][0][][] */ 12,21,0,-40,127,-11,-91,-18, 
  /* [6][0][][] */ -40,-30,-16,-27,26,127,12,-62, 
  /* [7][0][][] */ 10,-68,-16,-14,127,22,98,-6, 
  /* [8][0][][] */ -6,127,25,38,-42,-79,-104,-39, 
  /* [9][0][][] */ -96,100,-105,127,-100,-75,77,86, 
  /* [10][0][][] */ -102,41,-110,38,-22,17,-28,127, 
  /* [11][0][][] */ -120,21,-127,-47,-57,-35,27,-36, 
  /* [12][0][][] */ 30,-2,-102,15,127,11,10,26, 
  /* [13][0][][] */ -47,-32,-1,127,24,-106,1,32, 
  /* [14][0][][] */ 8,-10,-37,-14,127,-2,30,25, 
  /* [15][0][][] */ -19,31,127,-100,32,104,-58,-22, 
  /* [16][0][][] */ -127,86,81,37,70,-51,1,-123, 
  /* [17][0][][] */ 31,51,30,33,-127,-52,-106,-24, 
  /* [18][0][][] */ 30,-127,-84,30,80,17,22,44, 
  /* [19][0][][] */ 27,127,-109,0,-10,56,38,-26, 
  /* [20][0][][] */ 20,-59,-36,-36,127,37,37,24, 
  /* [21][0][][] */ -77,27,127,-11,-66,80,19,-22, 
  /* [22][0][][] */ 6,-24,25,127,-11,10,12,74, 
  /* [23][0][][] */ -43,-36,34,127,-59,-70,79,-1, 
  /* [24][0][][] */ -44,127,38,42,-82,-60,-105,-22, 
  /* [25][0][][] */ -47,44,31,127,-52,-34,115,38, 
  /* [26][0][][] */ 18,-51,127,39,35,-16,-56,94, 
  /* [27][0][][] */ 127,-16,9,10,24,-60,8,50, 
  /* [28][0][][] */ 89,-20,123,-15,11,-37,33,-127, 
  /* [29][0][][] */ -10,10,31,127,-8,27,25,76, 
  /* [30][0][][] */ 46,-127,-22,10,-101,31,81,-14, 
  /* [31][0][][] */ -3,-32,67,-43,-40,-27,127,-28, 
  /* [32][0][][] */ 19,-47,-127,27,-27,-115,-5,5, 
  /* [33][0][][] */ 65,102,2,-16,61,127,-5,46, 
  /* [34][0][][] */ 30,118,-127,-25,-16,61,40,21, 
  /* [35][0][][] */ 6,46,127,13,49,126,-2,-19, 
  /* [36][0][][] */ 127,-18,19,-121,-15,-52,36,-57, 
  /* [37][0][][] */ -62,61,14,50,0,127,24,-13, 
  /* [38][0][][] */ -119,82,-78,-57,-66,-39,44,-127, 
  /* [39][0][][] */ 81,80,-86,-127,66,-3,-45,22, 
  /* [40][0][][] */ -127,-6,125,-120,9,-58,-46,34, 
  /* [41][0][][] */ -127,17,-14,47,-12,-36,12,42, 
  /* [42][0][][] */ 79,-2,-99,-18,-43,-71,71,-127, 
  /* [43][0][][] */ -98,-73,127,116,43,-10,-27,74, 
  /* [44][0][][] */ -7,108,60,2,-127,-41,-118,-44, 
  /* [45][0][][] */ 66,-60,-33,-57,22,17,-127,-21, 
  /* [46][0][][] */ -100,-127,-90,57,74,50,123,-2, 
  /* [47][0][][] */ -51,-30,-127,108,26,-2,-20,-91, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant50_scale = { 48, { 0.0012369302567094564, 0.0011788400588557124, 0.0013156719505786896, 0.0025038407184183598, 0.0028937363531440496, 0.003124746261164546, 0.0027013211511075497, 0.0022594204638153315, 0.0026436184998601675, 0.0019805191550403833, 0.003210816066712141, 0.0021842597052454948, 0.0038945069536566734, 0.0030308619607239962, 0.0034162818919867277, 0.002159422729164362, 0.0014140901621431112, 0.0018703107489272952, 0.0017398246563971043, 0.0028533767908811569, 0.002831378486007452, 0.0024691245052963495, 0.002511089202016592, 0.0016943411901593208, 0.0036598569713532925, 0.0026437907945364714, 0.00291213090531528, 0.0028038041200488806, 0.0024979074951261282, 0.0026925259735435247, 0.0036136950366199017, 0.0024211604613810778, 0.0027662322390824556, 0.0023997360840439796, 0.0013890503905713558, 0.0019813552498817444, 0.0019648638553917408, 0.0033752322196960449, 0.0013429358368739486, 0.001196680124849081, 0.0015448912745341659, 0.0038689202629029751, 0.002415533410385251, 0.0013148827711120248, 0.002274165628477931, 0.0032585356384515762, 0.0025227423757314682, 0.0023330601397901773, } };
const TfArray<48, int> quant50_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[8*1*1*48] = { 
  /* [0][0][][] */ 1,-15,117,72,8,2,18,6,60,45,5,25,-11,-127,47,50,-3,-33,-7,-112,-31,-68,-76,107,-6,-14,55,-61,-78,8,-13,33,-77,20,90,120,41,-10,-21,61,-105,32,15,-68,14,4,-64,-22, 
  /* [1][0][][] */ -49,127,12,83,-67,-1,41,-59,-61,-9,-17,-25,-5,53,36,4,-35,-2,-33,-12,-7,-27,31,-47,-17,28,28,-8,21,2,-86,66,54,14,-85,21,-56,28,-29,29,-68,-26,35,59,-6,-6,-10,17, 
  /* [2][0][][] */ -46,1,-27,-21,-7,127,-13,-35,55,17,83,-66,80,15,109,-120,-44,-43,-66,86,-67,34,4,-1,-75,-36,-79,3,-112,-20,-83,-8,57,87,-94,9,17,16,-9,-21,80,48,-36,24,12,48,-18,-44, 
  /* [3][0][][] */ -25,13,21,-15,-30,-47,14,-127,-47,46,27,20,13,-33,-33,-42,4,38,-15,-9,94,4,-18,19,59,-1,-38,-24,-44,-8,29,7,-7,2,24,-1,14,-3,12,-3,-10,3,-28,-39,1,54,12,-64, 
  /* [4][0][][] */ 43,-2,-36,-19,15,-8,-32,-29,-17,6,-31,127,55,-44,-15,-50,-52,-5,-60,-51,7,42,7,59,16,26,-28,-11,103,-44,-16,10,47,53,46,-81,-63,107,51,37,63,-22,-84,-52,13,98,-10,-74, 
  /* [5][0][][] */ -7,2,-32,-49,-127,-27,46,-23,-7,21,6,-12,16,1,29,12,-41,-47,-55,-20,-63,-32,8,0,5,19,-49,-60,-15,-20,-49,60,24,-37,-26,-73,13,-52,37,5,30,13,-26,-39,13,63,-34,-39, 
  /* [6][0][][] */ -127,-1,26,67,57,-61,-51,50,-17,-48,-24,-37,-11,-73,-78,79,37,-2,43,0,-49,16,18,19,51,-27,10,-53,-81,7,59,-9,23,70,-93,31,-34,35,-48,-79,-76,-33,14,55,44,48,-73,-36, 
  /* [7][0][][] */ -69,-57,43,-35,-48,-42,38,17,5,70,-17,-25,-60,28,21,-127,10,-10,50,-2,-21,15,-94,2,-56,71,-76,-45,53,101,28,-42,-69,41,-60,60,24,-30,-11,32,-13,69,72,32,-13,42,12,-24, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant51_scale = { 8, { 0.0050402521155774593, 0.0072116157971322536, 0.0047616409137845039, 0.008063039742410183, 0.0058300676755607128, 0.006213972344994545, 0.0046470263041555882, 0.0057320692576467991, } };
const TfArray<8, int> quant51_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[48*1*1*8] = { 
  /* [0][0][][] */ -5,5,70,40,-127,-91,68,-96, 
  /* [1][0][][] */ 7,-28,20,-10,-9,19,-127,-59, 
  /* [2][0][][] */ 40,-40,21,-127,50,58,54,21, 
  /* [3][0][][] */ -25,49,-50,127,-42,-23,-44,16, 
  /* [4][0][][] */ 37,-127,50,-126,23,12,93,-8, 
  /* [5][0][][] */ 45,-42,32,-127,37,51,40,0, 
  /* [6][0][][] */ -75,-67,57,61,45,127,21,20, 
  /* [7][0][][] */ 127,-11,-28,20,9,-30,-15,-12, 
  /* [8][0][][] */ 60,24,-62,-22,41,-12,-127,12, 
  /* [9][0][][] */ -26,-59,-127,-8,-6,125,23,33, 
  /* [10][0][][] */ 75,-41,-72,1,7,39,-127,-116, 
  /* [11][0][][] */ -34,127,-109,-37,50,19,42,-24, 
  /* [12][0][][] */ 29,-52,-89,1,-52,127,-41,-37, 
  /* [13][0][][] */ -43,77,-22,127,23,-15,-43,-18, 
  /* [14][0][][] */ 59,-19,-48,-14,-2,2,127,73, 
  /* [15][0][][] */ -107,-127,-53,-90,93,-12,-32,-103, 
  /* [16][0][][] */ 127,48,26,0,56,-18,-107,17, 
  /* [17][0][][] */ 54,-27,-71,23,-31,72,-127,-60, 
  /* [18][0][][] */ 28,-11,32,56,127,44,34,-11, 
  /* [19][0][][] */ 24,46,77,-113,64,127,3,-4, 
  /* [20][0][][] */ -16,117,49,-39,3,127,25,-112, 
  /* [21][0][][] */ -3,-16,127,19,-44,-30,89,35, 
  /* [22][0][][] */ -124,-1,9,-6,55,58,106,-127, 
  /* [23][0][][] */ 38,51,50,7,67,-127,-9,8, 
  /* [24][0][][] */ -127,22,-83,92,20,-91,-65,20, 
  /* [25][0][][] */ 23,-127,-29,-41,16,-8,82,113, 
  /* [26][0][][] */ -127,94,-93,-74,76,69,107,-26, 
  /* [27][0][][] */ 62,10,27,-1,-54,0,-127,-41, 
  /* [28][0][][] */ -122,2,56,-2,-127,77,-95,-73, 
  /* [29][0][][] */ 13,-21,5,6,-46,32,-127,-88, 
  /* [30][0][][] */ -44,34,74,19,12,-127,44,-4, 
  /* [31][0][][] */ -52,3,-127,41,-1,-13,-3,10, 
  /* [32][0][][] */ -44,127,-87,-118,103,-3,18,79, 
  /* [33][0][][] */ -87,67,-127,-60,102,46,-13,51, 
  /* [34][0][][] */ 22,35,-23,-19,127,-71,87,-56, 
  /* [35][0][][] */ 41,127,36,54,-24,15,-99,-24, 
  /* [36][0][][] */ 29,46,10,24,20,27,-127,-53, 
  /* [37][0][][] */ 6,93,0,-127,112,34,-120,20, 
  /* [38][0][][] */ 24,18,94,51,-9,27,127,-63, 
  /* [39][0][][] */ 32,14,127,4,-54,-22,-84,-68, 
  /* [40][0][][] */ 127,-25,16,22,122,-101,-11,-11, 
  /* [41][0][][] */ -20,-25,34,10,101,-26,25,127, 
  /* [42][0][][] */ 116,66,-21,-34,-118,127,112,-105, 
  /* [43][0][][] */ -14,10,-33,12,17,53,-127,94, 
  /* [44][0][][] */ -36,43,-20,127,-27,-49,-58,-10, 
  /* [45][0][][] */ -83,-26,127,-41,-1,-23,78,53, 
  /* [46][0][][] */ -39,37,-9,8,-125,68,67,-127, 
  /* [47][0][][] */ 127,-7,10,62,-81,-26,-49,-26, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant52_scale = { 48, { 0.0019328995840623975, 0.0032811663113534451, 0.0028304494917392731, 0.0028123229276388884, 0.0027088921051472425, 0.0029428468551486731, 0.0031958767212927341, 0.004731109831482172, 0.0049848216585814953, 0.0016222628764808178, 0.0032731206156313419, 0.0031980264466255903, 0.0037336759269237518, 0.0013051641872152686, 0.0026895045302808285, 0.0022367741912603378, 0.0048128096386790276, 0.0035052772145718336, 0.004468034952878952, 0.0033328640274703503, 0.0027303600218147039, 0.001294834422878921, 0.0033024470321834087, 0.0039524738676846027, 0.0028298075776547194, 0.0029330961406230927, 0.0022958791814744473, 0.003101385198533535, 0.0031026082579046488, 0.0021894390229135752, 0.003958436194807291, 0.0024908352643251419, 0.0019866663496941328, 0.0022039569448679686, 0.0018303645774722099, 0.0023241611197590828, 0.005114726722240448, 0.0015780456596985459, 0.0028478754684329033, 0.0035333400592207909, 0.0040603396482765675, 0.0047938707284629345, 0.0017957467352971435, 0.0039674686267971992, 0.0027589993551373482, 0.0017264166381210089, 0.0026281510945409536, 0.0040795854292809963, } };
const TfArray<48, int> quant52_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[8*1*1*48] = { 
  /* [0][0][][] */ -35,-14,43,-11,48,-28,-127,-36,-61,-35,-44,13,-13,-19,33,2,87,49,31,26,-3,-16,43,1,33,11,-58,124,70,-25,-41,-38,-35,-8,-80,-13,-73,40,17,-27,66,-46,-27,-12,-44,-29,101,-49, 
  /* [1][0][][] */ -19,7,-17,-34,38,-13,46,58,-17,-19,-13,7,11,46,4,-86,17,-22,4,-19,-21,14,31,23,0,-41,8,-31,-5,4,-7,-1,-5,-13,-22,-12,-31,127,-29,-27,7,-3,-16,2,-11,-7,26,17, 
  /* [2][0][][] */ 27,-11,-65,26,7,54,38,53,74,-71,27,44,66,-88,-70,-125,12,-71,-31,-35,8,127,-33,-1,32,-29,41,65,50,30,33,76,56,-49,49,29,-9,28,-4,-63,-11,120,-29,-45,-4,19,45,35, 
  /* [3][0][][] */ 30,24,-19,8,62,27,-47,3,-3,-17,5,29,25,119,6,-29,7,34,-22,-20,-24,-8,-25,-11,2,20,-3,-7,16,37,23,23,25,17,-14,25,-34,-127,-12,18,-5,-2,27,4,33,40,8,-25, 
  /* [4][0][][] */ 80,48,57,46,11,91,-15,8,3,-64,51,-127,63,-20,-36,-55,89,21,-49,63,-53,-44,-28,-16,38,9,63,-69,4,37,82,87,78,69,-62,57,-32,4,-104,39,-78,51,50,50,29,97,1,-57, 
  /* [5][0][][] */ -23,-2,38,33,4,-17,-60,-106,18,58,55,27,-44,-38,1,-52,38,71,15,-36,-98,-5,-82,-33,23,6,1,20,-4,10,28,17,-15,20,99,-27,-44,127,-18,32,-60,-43,51,-61,-86,61,-25,63, 
  /* [6][0][][] */ 31,92,63,-1,-8,57,-61,24,46,-21,4,-39,69,-20,64,26,-49,-21,-59,53,-12,44,-1,18,51,3,58,-127,-3,100,25,56,56,38,-59,41,80,-73,-48,-24,-20,-16,44,19,-6,66,-54,-19, 
  /* [7][0][][] */ -39,-22,-20,-16,22,-31,-22,-47,40,-5,-16,17,-11,30,46,62,-21,-30,29,-31,56,-2,56,-31,-26,11,14,-127,48,-31,-37,-36,-20,-32,-30,-16,11,54,12,33,38,33,-32,-48,-9,-42,75,13, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant53_scale = { 8, { 0.0054348115809261799, 0.0085367336869239807, 0.0039343149401247501, 0.00743142981082201, 0.0071133417077362537, 0.003735068254172802, 0.006412566639482975, 0.0079065347090363503, } };
const TfArray<8, int> quant53_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[48*1*1*8] = { 
  /* [0][0][][] */ 22,-96,-85,-16,60,26,127,29, 
  /* [1][0][][] */ 25,19,28,-56,52,-127,-76,28, 
  /* [2][0][][] */ 37,-32,-11,-127,17,-8,25,8, 
  /* [3][0][][] */ 49,56,-125,-7,127,-14,121,-3, 
  /* [4][0][][] */ 26,127,-126,22,66,-99,109,-6, 
  /* [5][0][][] */ -127,-7,26,86,36,84,29,-126, 
  /* [6][0][][] */ -35,11,-54,127,-24,-16,14,-24, 
  /* [7][0][][] */ 121,-84,127,-12,-54,49,72,-35, 
  /* [8][0][][] */ -16,-23,-14,50,-10,32,-40,-127, 
  /* [9][0][][] */ -26,52,-41,-5,96,127,-103,110, 
  /* [10][0][][] */ -69,-23,21,24,127,-4,77,36, 
  /* [11][0][][] */ 63,-127,-17,6,-93,5,58,6, 
  /* [12][0][][] */ -127,73,-126,-69,103,-3,-54,-39, 
  /* [13][0][][] */ 28,67,-1,-36,-97,61,74,127, 
  /* [14][0][][] */ 1,-85,-112,-32,127,71,-65,13, 
  /* [15][0][][] */ 45,47,127,11,6,20,-19,28, 
  /* [16][0][][] */ -127,24,-88,-1,126,54,-47,0, 
  /* [17][0][][] */ 32,-24,-20,55,-12,127,65,45, 
  /* [18][0][][] */ -127,52,116,12,-74,110,49,122, 
  /* [19][0][][] */ -88,29,-53,7,-55,-127,-39,-75, 
  /* [20][0][][] */ 71,-20,4,-127,-20,68,57,39, 
  /* [21][0][][] */ 15,41,-127,45,-39,124,32,72, 
  /* [22][0][][] */ 127,-112,92,94,0,-88,-87,104, 
  /* [23][0][][] */ -42,58,-20,-6,-34,45,127,43, 
  /* [24][0][][] */ -80,6,37,-28,-118,76,-8,127, 
  /* [25][0][][] */ -54,35,-18,-18,17,-26,26,-127, 
  /* [26][0][][] */ -2,123,107,-49,-42,-114,-127,-111, 
  /* [27][0][][] */ 47,-96,127,32,-121,-2,-40,-68, 
  /* [28][0][][] */ 127,-6,-20,-20,-10,-40,-124,-28, 
  /* [29][0][][] */ 66,20,-15,19,-127,4,-61,6, 
  /* [30][0][][] */ -21,-19,127,-16,-6,-87,-18,-49, 
  /* [31][0][][] */ 84,-39,-4,-2,127,13,85,71, 
  /* [32][0][][] */ -127,59,-97,36,-119,48,38,-61, 
  /* [33][0][][] */ 4,11,45,-127,39,19,-37,-48, 
  /* [34][0][][] */ 69,-41,-127,-19,40,-9,-62,-4, 
  /* [35][0][][] */ 43,98,107,127,-31,36,-101,13, 
  /* [36][0][][] */ -127,30,57,-10,-122,32,71,41, 
  /* [37][0][][] */ -81,22,104,-6,-127,1,-67,2, 
  /* [38][0][][] */ -6,25,127,5,52,-42,103,53, 
  /* [39][0][][] */ 11,127,10,-48,-36,76,-113,-62, 
  /* [40][0][][] */ -111,127,23,-38,-56,68,81,20, 
  /* [41][0][][] */ -45,-58,15,14,-64,-100,51,-127, 
  /* [42][0][][] */ 74,-127,43,-1,60,105,-11,67, 
  /* [43][0][][] */ -70,-94,-97,127,-31,-19,72,3, 
  /* [44][0][][] */ 22,-50,-90,8,-18,-127,-35,-121, 
  /* [45][0][][] */ -8,-6,-113,8,-54,127,-7,-47, 
  /* [46][0][][] */ 27,63,-127,-31,13,86,106,30, 
  /* [47][0][][] */ -97,13,127,0,-49,64,6,77, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant54_scale = { 48, { 0.0025679683312773705, 0.0027363775297999382, 0.0029265230987221003, 0.0020816340111196041, 0.0019551259465515614, 0.0023512092884629965, 0.003123320871964097, 0.0021971848327666521, 0.002844727598130703, 0.002342120511457324, 0.0022320959251374006, 0.0024801557883620262, 0.0030397360678762197, 0.0013721070718020201, 0.0017189361387863755, 0.0025318113621324301, 0.0022985867690294981, 0.003114157821983099, 0.0017759266775101423, 0.0023471813183277845, 0.0030462159775197506, 0.0018219402991235256, 0.0018056483240798116, 0.0022883713245391846, 0.0016714303055778146, 0.0027254563756287098, 0.0014422845561057329, 0.00094506074674427509, 0.0024083591997623444, 0.0035575579386204481, 0.0019896267913281918, 0.0026541091501712799, 0.0015082623576745391, 0.0026297927834093571, 0.00166043930221349, 0.0022297517862170935, 0.0024593446869403124, 0.0014709235401824117, 0.0026220323052257299, 0.0022495402954518795, 0.0020047386642545462, 0.0024446239694952965, 0.0030065183527767658, 0.0024427671451121569, 0.0019420874305069447, 0.0031140150967985392, 0.0017112541245296597, 0.00094545516185462475, } };
const TfArray<48, int> quant54_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[8*1*1*48] = { 
  /* [0][0][][] */ -24,99,-14,-25,62,70,49,33,-59,28,5,13,6,24,-90,-42,80,119,15,62,-15,7,-127,24,-22,-2,-87,104,-59,-55,21,57,-20,18,-22,94,117,-70,-36,-40,-62,65,-19,40,5,-44,60,-75, 
  /* [1][0][][] */ -100,8,10,8,88,-57,-55,-14,6,-38,14,-15,119,29,35,-38,-59,40,-2,-42,-35,-33,71,-82,85,16,-78,-47,-33,95,13,84,-56,5,-57,31,-30,-69,39,-4,-18,1,8,127,-16,32,101,-67, 
  /* [2][0][][] */ -22,42,41,16,-26,-19,-7,27,-62,-41,-46,5,14,-33,116,-127,64,31,-39,-19,23,-36,37,-16,-21,74,10,68,3,-19,-84,47,-42,52,-111,-11,-34,18,107,-58,44,-9,12,37,11,61,0,-6, 
  /* [3][0][][] */ -22,-40,9,49,-6,-40,-127,31,-29,-69,-96,38,-58,1,95,2,-11,101,46,-20,20,48,-92,48,-58,-5,-32,-24,-29,-114,38,-54,-3,-98,-53,44,-15,59,16,12,20,-8,-43,-76,12,27,-67,-29, 
  /* [4][0][][] */ 29,79,46,86,5,-50,-18,-77,-64,-49,-15,6,26,-78,-80,-55,30,35,7,-57,18,-8,127,45,-81,-32,14,-33,-81,13,9,23,-38,6,-15,-53,-41,80,52,-2,45,68,49,17,-18,91,-73,5, 
  /* [5][0][][] */ -57,-29,87,46,-28,-56,82,72,38,48,-49,14,-53,15,-17,-9,-54,127,28,-4,73,21,20,31,-28,-32,-80,-68,42,-127,53,-15,20,-19,-35,39,-5,66,-27,-26,67,2,-8,102,78,8,-34,21, 
  /* [6][0][][] */ 60,-22,66,9,29,-88,105,1,42,-93,-58,48,31,-8,59,26,-59,27,53,-39,84,47,52,8,3,-50,24,-57,-31,-59,40,-70,2,-49,-47,-64,-60,40,44,82,-4,25,-27,-67,-19,31,-31,-127, 
  /* [7][0][][] */ 21,127,-58,-107,74,125,-12,-53,-8,72,-8,-33,-14,2,97,-45,62,88,-54,40,-42,-8,-73,32,48,116,-12,-64,-47,18,-27,0,-6,-19,-42,98,56,-30,11,-5,-9,48,-19,-54,82,-32,32,-20, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant55_scale = { 8, { 0.0042620659805834293, 0.0050389375537633896, 0.0045885895378887653, 0.0046669556759297848, 0.011049633845686913, 0.0055450638756155968, 0.0065520270727574825, 0.0039092721417546272, } };
const TfArray<8, int> quant55_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[48*1*1*8] = { 
  /* [0][0][][] */ 15,-18,94,-66,-55,127,-8,112, 
  /* [1][0][][] */ -61,-22,44,17,7,13,72,127, 
  /* [2][0][][] */ 38,19,-11,42,59,-127,82,16, 
  /* [3][0][][] */ 74,32,-36,80,127,123,81,-59, 
  /* [4][0][][] */ -73,96,-127,-55,59,17,50,60, 
  /* [5][0][][] */ 34,5,63,-127,8,66,46,-53, 
  /* [6][0][][] */ 72,28,-30,7,29,-56,127,-52, 
  /* [7][0][][] */ -80,39,-56,127,46,-74,-87,-19, 
  /* [8][0][][] */ 50,11,100,53,-1,57,21,-127, 
  /* [9][0][][] */ 29,-86,127,48,-23,-11,-39,-30, 
  /* [10][0][][] */ 121,-87,-32,94,117,74,89,127, 
  /* [11][0][][] */ -6,-105,17,-40,14,10,-32,127, 
  /* [12][0][][] */ 60,-29,-76,5,114,127,-32,-50, 
  /* [13][0][][] */ -65,-58,31,-72,41,-3,-127,28, 
  /* [14][0][][] */ 86,66,127,-116,-42,92,64,-116, 
  /* [15][0][][] */ -65,127,81,-107,10,-3,-24,94, 
  /* [16][0][][] */ -73,76,61,37,127,23,-38,16, 
  /* [17][0][][] */ -20,-8,-10,-62,-20,-127,-87,-68, 
  /* [18][0][][] */ 40,-81,76,81,52,-97,-36,-127, 
  /* [19][0][][] */ 31,-70,127,39,-30,-20,-25,-41, 
  /* [20][0][][] */ -28,127,-51,95,40,79,-16,53, 
  /* [21][0][][] */ -20,83,-31,-127,50,96,60,-52, 
  /* [22][0][][] */ 75,-28,40,-127,-25,96,80,-3, 
  /* [23][0][][] */ 26,-54,-109,42,28,7,3,-127, 
  /* [24][0][][] */ -15,-49,7,-127,65,-29,27,-4, 
  /* [25][0][][] */ 127,24,58,-13,50,47,-84,-23, 
  /* [26][0][][] */ -21,69,-34,-56,21,-24,-88,-127, 
  /* [27][0][][] */ -46,75,-127,-52,40,31,34,60, 
  /* [28][0][][] */ 110,-30,127,-47,-52,17,-19,-18, 
  /* [29][0][][] */ -127,15,-33,-6,11,-10,82,22, 
  /* [30][0][][] */ -114,37,46,-19,-34,18,127,53, 
  /* [31][0][][] */ 8,53,86,63,59,-21,-127,-33, 
  /* [32][0][][] */ -127,-38,28,-14,80,52,-61,74, 
  /* [33][0][][] */ -52,-127,-78,44,81,39,98,13, 
  /* [34][0][][] */ -37,64,-32,65,26,110,121,-127, 
  /* [35][0][][] */ -26,83,-14,38,14,103,123,-127, 
  /* [36][0][][] */ -13,65,-58,18,127,-119,-62,-80, 
  /* [37][0][][] */ 34,101,-79,-65,-79,33,127,-108, 
  /* [38][0][][] */ -43,98,-127,-74,29,-1,-41,58, 
  /* [39][0][][] */ 56,-72,56,-127,23,63,90,-3, 
  /* [40][0][][] */ 127,83,19,-100,33,19,-13,-26, 
  /* [41][0][][] */ 68,-44,31,-127,27,77,99,-26, 
  /* [42][0][][] */ 44,-62,20,17,40,68,18,-127, 
  /* [43][0][][] */ -123,-65,-125,-39,9,-67,127,5, 
  /* [44][0][][] */ 41,-127,-28,44,51,-22,91,30, 
  /* [45][0][][] */ -39,48,101,21,78,-127,37,17, 
  /* [46][0][][] */ -127,-1,10,-27,26,49,-9,-11, 
  /* [47][0][][] */ -29,-63,-38,-19,-9,127,-107,21, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant56_scale = { 48, { 0.0031462407205253839, 0.003167914692312479, 0.0025768079794943333, 0.00065444764913991094, 0.00214943359605968, 0.0024118018336594105, 0.0025137204211205244, 0.0020148851908743382, 0.0029253701213747263, 0.003028699429705739, 0.00044721088488586247, 0.0023354364093393087, 0.0022172166500240564, 0.002296623308211565, 0.0011635677656158805, 0.0026815647725015879, 0.0019510691054165363, 0.00096022873185575008, 0.0021277533378452063, 0.0033675190061330795, 0.0022401406895369291, 0.0020200922153890133, 0.0025736435782164335, 0.0030252404976636171, 0.0022904328070580959, 0.002198010915890336, 0.0029568360187113285, 0.0030129430815577507, 0.0027244125958532095, 0.003220852930098772, 0.0018757679499685764, 0.0027095561381429434, 0.0025593242608010769, 0.0017653671093285084, 0.0019949579145759344, 0.0017173539381474257, 0.0026248677168041468, 0.0014737216988578439, 0.001981652807444334, 0.002852654317393899, 0.0023291786201298237, 0.0025344584137201309, 0.0031466851942241192, 0.0022239263635128736, 0.0011410260340198874, 0.0024689948186278343, 0.0032388973049819469, 0.0023912217002362013, } };
const TfArray<48, int> quant56_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[8*1*1*48] = { 
  /* [0][0][][] */ 18,-90,-10,71,-69,27,-33,5,-86,-8,-70,73,-22,-37,1,-89,-66,-30,-26,13,50,-52,-12,127,-17,-39,66,94,24,122,-63,-73,26,-21,102,-90,100,-31,-58,19,74,9,-10,-54,20,91,119,29, 
  /* [1][0][][] */ 23,-52,60,3,-33,28,-71,-10,35,-91,6,-14,37,47,-25,66,69,-25,37,84,34,-57,-64,-27,29,83,-19,127,-6,-69,30,30,-38,20,-93,75,-46,-3,-92,25,-127,19,26,52,-90,36,-45,71, 
  /* [2][0][][] */ -52,38,-68,-17,-39,-60,30,11,-32,-122,55,-24,-13,-29,62,-51,29,-10,6,127,23,64,78,40,67,-18,-45,87,9,24,5,3,26,-7,-35,32,-34,25,6,-110,40,-49,-22,-1,45,17,-26,-4, 
  /* [3][0][][] */ 19,3,28,-39,-8,-3,-27,43,19,23,30,31,25,-9,1,10,29,44,14,-4,-124,5,48,-13,-127,11,7,2,5,-33,19,22,-37,-6,39,-28,6,9,19,-55,-16,-21,10,22,-33,-13,12,48, 
  /* [4][0][][] */ 13,126,-4,29,-68,12,4,-3,-5,-72,16,7,-30,-47,-47,71,42,19,41,87,-91,0,3,-127,11,-58,-69,64,-4,51,-69,-1,31,-23,-34,39,115,9,-26,31,37,8,-51,39,-33,-30,49,-31, 
  /* [5][0][][] */ 21,-56,12,127,-48,-21,29,46,-1,10,-98,27,-63,38,36,33,-25,-63,-45,-51,40,12,27,-22,-23,52,29,-29,9,87,-65,-17,58,99,-43,18,-50,-24,-85,-55,-29,-22,-39,-23,-12,36,-28,-16, 
  /* [6][0][][] */ 57,46,22,-13,-16,-22,-10,3,-37,-18,49,-73,-11,-30,53,-59,-54,11,-37,50,56,34,-58,-47,-56,63,-33,24,9,-29,-14,-48,127,-39,-23,7,65,55,21,-10,0,7,-46,-53,52,94,-22,24, 
  /* [7][0][][] */ -55,-35,-15,-18,-41,24,127,-3,8,16,50,8,-32,-60,-80,-24,-3,21,-39,-29,9,-35,-13,-29,-82,62,-29,1,20,11,-15,-32,71,19,44,-69,27,-80,-19,-22,-7,24,15,-47,6,0,-95,-77, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant57_scale = { 8, { 0.0047372723929584026, 0.0049207676202058792, 0.0060970447957515717, 0.0079140001907944679, 0.0053215264342725277, 0.0052792155183851719, 0.006810325663536787, 0.0065435254946351051, } };
const TfArray<8, int> quant57_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[48*1*1*8] = { 
  /* [0][0][][] */ -27,22,58,-11,-127,-63,-9,82, 
  /* [1][0][][] */ 30,107,-126,-48,-25,-70,-107,127, 
  /* [2][0][][] */ 106,-61,-18,39,-41,127,34,73, 
  /* [3][0][][] */ -93,26,8,-22,-127,77,19,-68, 
  /* [4][0][][] */ -22,32,20,-37,60,-127,69,6, 
  /* [5][0][][] */ -82,-127,-123,-7,60,121,21,9, 
  /* [6][0][][] */ -107,31,-16,60,-127,93,13,-61, 
  /* [7][0][][] */ -29,3,77,127,-28,-35,50,-11, 
  /* [8][0][][] */ 0,127,78,8,5,14,-92,13, 
  /* [9][0][][] */ -70,84,73,-39,-12,56,-122,-127, 
  /* [10][0][][] */ 80,-11,6,-10,127,-4,-126,103, 
  /* [11][0][][] */ -10,-82,80,127,-16,20,-72,23, 
  /* [12][0][][] */ 61,-54,80,-21,108,-127,-1,90, 
  /* [13][0][][] */ -10,-7,111,-75,43,-72,-127,27, 
  /* [14][0][][] */ -109,-15,110,-29,4,-127,27,104, 
  /* [15][0][][] */ -86,-35,-49,-35,127,101,13,-5, 
  /* [16][0][][] */ 36,14,26,23,-127,31,-31,-68, 
  /* [17][0][][] */ 106,92,-20,51,50,41,127,-46, 
  /* [18][0][][] */ 32,59,-19,-127,-17,-69,25,26, 
  /* [19][0][][] */ 55,60,14,49,-34,-63,127,43, 
  /* [20][0][][] */ 16,-16,-33,15,-38,127,58,12, 
  /* [21][0][][] */ 23,-31,-14,-127,-15,31,38,-25, 
  /* [22][0][][] */ -127,-101,-43,-7,54,99,88,27, 
  /* [23][0][][] */ -109,-50,-96,-47,-127,-33,103,-57, 
  /* [24][0][][] */ 127,35,49,108,55,-49,-18,49, 
  /* [25][0][][] */ -41,-13,8,-22,-1,-40,-127,-1, 
  /* [26][0][][] */ -24,68,-90,15,-22,127,79,11, 
  /* [27][0][][] */ 5,-106,74,103,-37,127,30,-39, 
  /* [28][0][][] */ -10,1,-83,99,104,-33,127,-66, 
  /* [29][0][][] */ 83,51,-29,50,-127,24,36,-11, 
  /* [30][0][][] */ 58,118,127,45,36,-64,-23,76, 
  /* [31][0][][] */ 127,9,-62,30,4,-22,106,-118, 
  /* [32][0][][] */ 31,-9,-24,-24,127,56,28,-17, 
  /* [33][0][][] */ 14,-86,11,-127,1,-38,2,-37, 
  /* [34][0][][] */ -94,-118,-127,-79,-32,35,65,-32, 
  /* [35][0][][] */ 127,33,-4,-17,64,107,2,79, 
  /* [36][0][][] */ -83,23,21,44,10,-127,-65,-38, 
  /* [37][0][][] */ 72,-127,-17,-32,120,-29,-119,-108, 
  /* [38][0][][] */ 19,127,-26,3,-6,20,-10,17, 
  /* [39][0][][] */ 30,-57,-61,78,127,-1,73,17, 
  /* [40][0][][] */ -36,-127,68,-56,116,-52,-116,-48, 
  /* [41][0][][] */ -65,31,127,-20,-101,-38,-2,-14, 
  /* [42][0][][] */ 16,62,-42,-64,14,-127,-4,46, 
  /* [43][0][][] */ -43,-109,-94,8,-127,41,30,-2, 
  /* [44][0][][] */ -19,-56,61,-11,-15,-49,-127,60, 
  /* [45][0][][] */ -28,127,86,-34,11,-32,15,-34, 
  /* [46][0][][] */ -84,66,61,12,-97,99,22,127, 
  /* [47][0][][] */ 104,38,13,127,-19,-29,-3,-41, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant58_scale = { 48, { 0.0020289800595492125, 0.001783852931112051, 0.0025141804944723845, 0.0010676350211724639, 0.0010800905292853713, 0.0012411446077749133, 0.0019083111546933651, 0.0032908131834119558, 0.0018682181835174561, 0.0020786074455827475, 0.0017421777592971921, 0.002883541164919734, 0.0016083099180832505, 0.0020693703554570675, 0.0018233056180179119, 0.0025899778120219707, 0.0013555486220866442, 0.0021732801105827093, 0.0017942714039236307, 0.0028380684088915586, 0.0041248551569879055, 0.003395389998331666, 0.002019855659455061, 0.0018313742475584149, 0.0011718836612999439, 0.0032374490983784199, 0.0030454411171376705, 0.0023850977886468172, 0.0026398531626909971, 0.0027081423904746771, 0.0019650342874228954, 0.0023831282742321491, 0.0027572393883019686, 0.0018119747983291745, 0.0010738907149061561, 0.0028710768092423677, 0.0037745195440948009, 0.0020030359737575054, 0.0036777877248823643, 0.0027553988620638847, 0.0013551880838349462, 0.0028745420277118683, 0.0018084561452269554, 0.00054777238983660936, 0.0022725244052708149, 0.0016208271263167262, 0.0018805866129696369, 0.002715323818847537, } };
const TfArray<48, int> quant58_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[8*1*1*48] = { 
  /* [0][0][][] */ -40,-10,-82,34,-44,77,-6,8,-2,-16,-13,12,2,13,-56,-52,-16,27,-19,29,-34,-27,-76,-1,-49,5,-3,-10,-6,52,-22,-47,6,3,-127,18,14,6,9,4,-39,27,34,-64,9,-15,-26,1, 
  /* [1][0][][] */ -3,-35,-21,-34,0,22,6,-19,-46,19,-17,-26,15,13,-22,-18,49,-30,-17,-18,12,8,2,9,-11,18,-19,-34,-5,-22,-10,3,-2,-24,-127,-26,-8,-8,-21,15,22,-6,23,-46,-16,-56,9,0, 
  /* [2][0][][] */ 57,101,30,-15,39,68,58,-13,-38,5,61,15,-102,-85,127,-4,51,-69,-11,22,-40,-16,14,27,-54,-45,40,101,-45,36,-76,-24,37,53,-121,31,39,33,-9,-24,-44,-5,-59,-105,59,-49,15,-2, 
  /* [3][0][][] */ -28,-16,-25,18,21,15,-38,-16,-16,14,-6,37,61,63,-42,2,-17,26,64,26,51,55,10,-41,3,44,-13,24,41,7,3,7,-1,-114,-127,-13,1,-6,-17,-25,-28,-5,-7,23,-37,26,-2,-2, 
  /* [4][0][][] */ -28,1,5,109,47,-44,-69,35,-23,-12,-127,12,17,-62,57,102,-52,23,7,-93,23,9,88,-71,60,-7,28,33,94,38,27,78,-58,6,22,11,13,46,41,-1,-72,-50,1,-62,10,36,19,-17, 
  /* [5][0][][] */ -74,-7,-90,-31,-104,-73,-51,39,-16,-30,-127,-59,15,91,-63,31,-60,26,17,-56,-73,-25,-33,-50,42,65,-53,-6,-51,-22,68,-88,-59,49,86,20,-119,-69,29,89,65,71,-89,60,-19,52,-12,-41, 
  /* [6][0][][] */ -77,58,-30,0,36,-6,-92,23,54,-8,62,-29,60,48,43,37,-73,66,0,10,-30,-9,34,-69,-44,114,-36,-93,-27,67,-15,0,-87,40,80,-15,-51,81,10,-11,7,0,-36,-40,-127,-26,-98,-40, 
  /* [7][0][][] */ 26,25,-121,88,-49,-60,75,6,-36,-93,-3,78,-39,14,76,35,-28,-34,-34,80,-62,8,6,-115,-33,-8,-12,9,95,78,-31,54,6,-90,-97,52,21,-26,-66,-62,-32,-92,68,-104,90,36,127,17, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant59_scale = { 8, { 0.0047993045300245285, 0.0065321591682732105, 0.0032882345840334892, 0.0040505244396626949, 0.0039034062065184116, 0.0032198869157582521, 0.0038726311177015305, 0.0026240774895995855, } };
const TfArray<8, int> quant59_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[48*1*1*8] = { 
  /* [0][0][][] */ -10,-127,-53,25,46,23,-21,89, 
  /* [1][0][][] */ -95,127,53,-52,-15,59,71,-69, 
  /* [2][0][][] */ 14,-26,-52,-127,-28,2,15,27, 
  /* [3][0][][] */ 102,15,49,-39,-124,-127,85,53, 
  /* [4][0][][] */ 11,-101,-1,-36,127,-57,17,-50, 
  /* [5][0][][] */ 83,-10,28,-25,-1,-22,-12,127, 
  /* [6][0][][] */ -26,72,0,4,-127,17,26,-44, 
  /* [7][0][][] */ 70,1,2,28,10,-30,-67,-127, 
  /* [8][0][][] */ 4,8,-127,-34,-52,-22,3,19, 
  /* [9][0][][] */ -28,40,66,-46,18,-39,4,127, 
  /* [10][0][][] */ -124,47,35,19,-24,-73,-127,-86, 
  /* [11][0][][] */ 85,-24,81,-55,68,-127,-35,37, 
  /* [12][0][][] */ -96,-106,-59,-29,97,-16,127,-61, 
  /* [13][0][][] */ -42,-127,-80,44,-8,-106,84,-6, 
  /* [14][0][][] */ 33,127,30,33,55,24,-87,21, 
  /* [15][0][][] */ -76,50,-91,52,-70,127,85,4, 
  /* [16][0][][] */ 78,-68,65,-31,27,-127,75,65, 
  /* [17][0][][] */ 33,102,15,72,16,127,40,-82, 
  /* [18][0][][] */ -72,-7,-60,-10,-4,-1,32,-127, 
  /* [19][0][][] */ 52,85,26,127,-8,-26,97,-53, 
  /* [20][0][][] */ 38,42,-72,-127,3,-60,3,20, 
  /* [21][0][][] */ -90,-30,-53,-39,12,20,127,45, 
  /* [22][0][][] */ 104,-3,-127,-68,19,-77,-113,-20, 
  /* [23][0][][] */ -2,-72,8,-66,127,-58,-9,12, 
  /* [24][0][][] */ 75,-36,-9,127,-50,-32,-98,-13, 
  /* [25][0][][] */ -57,59,-68,36,-91,127,81,-14, 
  /* [26][0][][] */ 35,127,30,67,53,0,-28,-16, 
  /* [27][0][][] */ -36,-18,23,-2,32,-108,34,-127, 
  /* [28][0][][] */ -6,15,6,21,-126,127,-7,-1, 
  /* [29][0][][] */ 123,-59,48,-49,127,-56,-63,91, 
  /* [30][0][][] */ -126,94,79,5,-63,-127,-49,82, 
  /* [31][0][][] */ -69,-112,-61,-63,127,-41,34,-45, 
  /* [32][0][][] */ 102,83,127,-84,105,-119,24,35, 
  /* [33][0][][] */ 127,0,5,-26,-36,69,-32,103, 
  /* [34][0][][] */ -6,27,-127,-92,4,-89,30,6, 
  /* [35][0][][] */ -89,-6,127,-25,52,-89,-12,71, 
  /* [36][0][][] */ -43,11,69,-49,51,-29,-23,127, 
  /* [37][0][][] */ 28,-127,-116,9,-52,58,-82,-8, 
  /* [38][0][][] */ 24,116,127,-52,105,22,-30,35, 
  /* [39][0][][] */ 29,-34,18,60,127,7,-17,-9, 
  /* [40][0][][] */ 100,-16,0,116,-127,-7,-15,-18, 
  /* [41][0][][] */ 127,21,5,79,-27,16,-33,-7, 
  /* [42][0][][] */ -73,-98,-104,21,-119,-15,-127,120, 
  /* [43][0][][] */ 93,-48,-109,75,-103,-127,44,-72, 
  /* [44][0][][] */ -127,-102,-84,-23,-66,-44,-56,-50, 
  /* [45][0][][] */ -18,50,-70,76,6,127,-41,-69, 
  /* [46][0][][] */ 38,10,37,5,27,47,18,-127, 
  /* [47][0][][] */ -83,-12,-2,-43,114,127,-95,110, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant60_scale = { 48, { 0.001725022797472775, 0.0018688734853640199, 0.0027557138819247484, 0.001720112981274724, 0.0018279362702742219, 0.00222935457713902, 0.0023372021969407797, 0.0025293419603258371, 0.0029593775980174541, 0.0020296918228268623, 0.0025855421554297209, 0.0021956381388008595, 0.0014510398032143712, 0.0024526638444513083, 0.0026078058872371912, 0.0023106294684112072, 0.0022782047744840384, 0.0015056360280141234, 0.0027930992655456066, 0.0013353719841688871, 0.0026701565366238356, 0.002385277533903718, 0.0018458383856341243, 0.0023026228882372379, 0.0020074388012290001, 0.0022776562254875898, 0.0028875819407403469, 0.0029936826322227716, 0.001734258490614593, 0.001813886221498251, 0.0019059436162933707, 0.0018646939424797893, 0.0017426784615963697, 0.0024349277373403311, 0.0026161149144172668, 0.001962622394785285, 0.0019864446949213743, 0.0016213991912081838, 0.0012274537002667785, 0.002709187800064683, 0.0017865279223769903, 0.0024567209184169769, 0.0017920943209901452, 0.0015760028036311269, 0.0017102655256167054, 0.0014042990515008569, 0.00076394854113459587, 0.0018117822473868728, } };
const TfArray<48, int> quant60_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[8*1*1*48] = { 
  /* [0][0][][] */ -48,63,14,-35,34,113,52,50,-7,-46,-56,17,59,127,47,-22,-35,14,-30,44,48,27,-82,1,23,46,17,24,-22,4,-79,51,55,-97,-41,-34,35,67,-103,-47,14,-65,-5,49,-70,-45,69,37, 
  /* [1][0][][] */ 0,-59,11,-53,-38,127,-54,-13,-52,112,-20,36,75,-15,53,66,52,125,41,64,23,37,-64,61,-53,-55,127,-37,-74,-3,9,21,-32,40,19,-45,-3,-106,-13,70,-41,47,11,39,8,-35,33,4, 
  /* [2][0][][] */ -28,-25,0,29,92,98,-22,9,27,8,-69,-66,-55,16,41,-31,11,-16,-69,-41,-127,-6,97,16,-12,49,-18,-25,10,-75,15,-10,-19,-44,52,56,-33,1,48,-17,35,-25,-19,-51,-72,-42,89,3, 
  /* [3][0][][] */ -19,46,-31,0,-6,-64,-3,7,8,23,8,2,36,22,-21,54,20,-18,18,101,-127,-3,21,1,14,-25,-5,2,14,42,28,28,12,-23,119,11,2,-8,-19,-5,8,-17,12,29,18,-12,-15,4, 
  /* [4][0][][] */ -37,-16,-4,47,-20,39,83,32,18,-127,-51,-27,-55,-43,-4,-82,-45,-18,-69,-29,25,-2,0,-108,3,43,18,-5,92,-31,-2,-10,-1,-45,-14,59,32,-2,12,-79,11,-31,-59,-41,-21,56,47,50, 
  /* [5][0][][] */ 56,-19,-81,-29,-124,117,32,10,-7,7,17,94,5,12,5,62,19,127,33,-19,-63,30,35,-22,-21,-24,40,-45,-55,69,-83,-38,19,-12,-4,-81,64,-19,-65,39,-67,31,-22,-6,39,-33,49,2, 
  /* [6][0][][] */ -4,-19,-20,-59,-44,4,53,-40,-29,-42,3,91,-35,-30,-13,127,-67,49,19,66,30,93,49,-26,-35,-24,-36,-40,15,24,15,-9,65,-26,39,-3,52,-57,-69,35,9,18,-42,27,70,9,44,59, 
  /* [7][0][][] */ -5,17,23,2,-3,93,-25,-74,10,76,8,21,-46,17,94,49,5,-127,-42,-6,18,58,10,16,3,22,-66,-19,-53,-81,16,68,7,49,-23,-3,-9,-10,-2,66,58,51,49,-33,-2,-90,-106,7, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant61_scale = { 8, { 0.0035347251687198877, 0.0030261357314884663, 0.0035051275044679642, 0.0033700731582939625, 0.0037863159086555243, 0.0037443658802658319, 0.0036214261781424284, 0.0034647102002054453, } };
const TfArray<8, int> quant61_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[48*1*1*8] = { 
  /* [0][0][][] */ 100,-60,-47,25,111,-4,30,-127, 
  /* [1][0][][] */ 60,-52,78,123,-19,-19,-127,109, 
  /* [2][0][][] */ -85,77,23,-95,-49,92,-18,-127, 
  /* [3][0][][] */ 22,127,30,62,16,15,69,-38, 
  /* [4][0][][] */ 46,125,-127,-49,60,-68,-19,-32, 
  /* [5][0][][] */ 99,88,57,-127,20,-28,11,75, 
  /* [6][0][][] */ 3,-6,104,-56,-66,-127,-22,120, 
  /* [7][0][][] */ 65,107,-127,-124,-1,-106,49,-2, 
  /* [8][0][][] */ 50,-44,-25,-9,114,103,-44,-127, 
  /* [9][0][][] */ -33,-34,-61,63,127,-79,-6,18, 
  /* [10][0][][] */ 127,4,55,95,93,-49,-48,69, 
  /* [11][0][][] */ 109,127,-108,-14,41,-67,7,16, 
  /* [12][0][][] */ -10,-68,67,27,70,-82,22,127, 
  /* [13][0][][] */ 127,58,-73,101,32,-22,104,-82, 
  /* [14][0][][] */ 1,97,9,97,82,-127,61,5, 
  /* [15][0][][] */ 8,-11,94,0,-127,10,-71,-82, 
  /* [16][0][][] */ 41,-122,-89,39,90,72,127,44, 
  /* [17][0][][] */ -3,127,-32,-13,78,-68,-60,-30, 
  /* [18][0][][] */ 125,-9,-15,-105,59,-111,-109,127, 
  /* [19][0][][] */ 77,46,127,-64,26,-50,-52,38, 
  /* [20][0][][] */ 127,-88,83,114,-4,-127,-94,28, 
  /* [21][0][][] */ 127,21,-53,74,-65,-5,-102,4, 
  /* [22][0][][] */ -127,122,-62,55,-102,43,-2,105, 
  /* [23][0][][] */ 49,-10,16,1,31,-90,-35,127, 
  /* [24][0][][] */ 37,-73,-1,81,127,-23,-3,27, 
  /* [25][0][][] */ -8,-17,6,127,-33,120,34,-19, 
  /* [26][0][][] */ 115,15,61,-26,-127,-108,9,40, 
  /* [27][0][][] */ -103,-118,78,127,69,111,-46,-61, 
  /* [28][0][][] */ 29,102,111,56,73,-126,-127,-15, 
  /* [29][0][][] */ -24,-89,102,-2,50,-127,1,0, 
  /* [30][0][][] */ 71,-65,-127,-39,-35,110,69,4, 
  /* [31][0][][] */ -117,2,21,13,-71,31,26,-127, 
  /* [32][0][][] */ 61,63,-59,-127,-20,-86,-5,-7, 
  /* [33][0][][] */ 6,-12,97,127,2,103,-41,1, 
  /* [34][0][][] */ -18,29,32,-14,-127,-11,49,40, 
  /* [35][0][][] */ 127,-12,-93,95,81,83,3,32, 
  /* [36][0][][] */ -39,16,127,33,-51,-106,-37,-33, 
  /* [37][0][][] */ 88,26,86,-35,-56,-44,18,127, 
  /* [38][0][][] */ -28,47,75,-16,-110,-78,7,127, 
  /* [39][0][][] */ 33,127,16,43,56,-95,81,-107, 
  /* [40][0][][] */ -70,-2,72,-43,-106,-127,24,63, 
  /* [41][0][][] */ 65,104,34,-3,35,9,-46,127, 
  /* [42][0][][] */ 15,-86,127,73,-56,64,-22,47, 
  /* [43][0][][] */ 52,-19,15,-79,39,-127,-37,38, 
  /* [44][0][][] */ 127,-35,-34,-37,-10,-3,-8,81, 
  /* [45][0][][] */ -14,-52,86,-64,109,-62,91,127, 
  /* [46][0][][] */ 44,127,69,60,77,46,19,36, 
  /* [47][0][][] */ -13,-19,-2,-127,-55,106,16,-77, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant62_scale = { 48, { 0.0018111068056896329, 0.0014696044381707907, 0.00099656719248741865, 0.0026595403905957937, 0.0013728226767852902, 0.001147157046943903, 0.0018303879769518971, 0.0017554856603965163, 0.0018725063418969512, 0.0014147122856229544, 0.0016154090408235788, 0.0019509200938045979, 0.0013527814298868179, 0.0017600894207134843, 0.0013677660608664155, 0.001940346322953701, 0.0018389768665656447, 0.0025299284607172012, 0.0014413830358535051, 0.0016141663072630763, 0.0016227628802880645, 0.0022174222394824028, 0.0019410455133765936, 0.0020294357091188431, 0.0019239215180277824, 0.0024025151506066322, 0.0013048752443864942, 0.0013614546041935682, 0.0019074099836871028, 0.0021022912114858627, 0.0021491018123924732, 0.0016233195783570409, 0.0021164608187973499, 0.0024738800711929798, 0.0010387279326096177, 0.0018073192331939936, 0.0015038789715617895, 0.0020040518138557673, 0.0018824554281309247, 0.0021940101869404316, 0.001654542051255703, 0.0014102032873779535, 0.0021360260434448719, 0.0018844659207388759, 0.0022348994389176369, 0.0014560609124600887, 0.0020737373270094395, 0.0018293859902769327, } };
const TfArray<48, int> quant62_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[8*1*1*48] = { 
  /* [0][0][][] */ -76,86,-4,13,-80,-33,63,-58,40,41,-3,64,68,86,110,-26,-2,-12,10,25,82,28,-15,-35,56,5,-38,-53,-38,58,40,37,28,-67,-21,-31,-48,37,18,-19,127,51,27,21,59,-49,65,19, 
  /* [1][0][][] */ 30,59,71,71,-48,-83,-51,-78,-62,-45,62,66,55,24,-45,19,-99,74,-103,54,-48,-33,101,-11,-45,-88,-50,-80,78,112,-41,-25,102,13,30,-58,19,-14,-24,42,-17,119,-127,58,-115,-64,-10,39, 
  /* [2][0][][] */ 60,14,102,10,53,49,-101,45,4,14,26,-44,-90,-33,10,-81,-32,-45,1,100,2,13,-36,40,68,25,7,78,1,-85,-47,-3,-13,78,-45,1,-50,-5,-127,-11,-45,16,57,-37,31,83,19,7, 
  /* [3][0][][] */ -38,-21,-127,33,11,33,29,62,-22,41,55,-19,3,43,46,22,5,-24,-52,-38,20,-1,24,-14,-32,65,-8,40,-14,-33,-3,1,-40,71,36,-11,46,16,52,-1,-14,19,15,62,-5,-53,5,53, 
  /* [4][0][][] */ -89,-24,-12,12,-8,-50,3,-21,37,9,127,18,-33,-16,9,-8,44,71,16,-3,-32,0,-42,-18,-16,-32,31,39,30,-13,-56,0,-47,-24,81,47,-53,-23,62,-10,48,28,-13,-10,0,-19,2,46, 
  /* [5][0][][] */ 14,-52,127,-49,25,50,107,61,-16,-82,-28,-19,6,-13,-11,-62,21,-32,-65,-31,-56,-12,84,104,-54,89,-16,99,-21,95,56,-21,-12,125,4,31,6,38,69,89,109,45,18,28,-19,-67,53,-22, 
  /* [6][0][][] */ -23,-22,-67,127,0,32,-21,-32,26,-52,-32,-19,-46,58,81,14,48,-15,-58,-45,-10,-71,97,58,-9,68,-121,-68,-41,5,-18,-29,-21,-58,-102,76,1,29,18,-1,121,-17,-10,86,9,-69,76,25, 
  /* [7][0][][] */ 105,29,-95,-8,-101,-23,-67,-34,0,38,92,56,13,-34,24,8,28,31,70,9,-6,37,75,-29,46,-2,-9,33,-15,96,-18,76,38,-1,-43,33,-3,24,-127,29,-39,97,23,-31,18,-14,14,44, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant63_scale = { 8, { 0.0028250017203390598, 0.0023172737564891577, 0.0044915396720170975, 0.0053677922114729881, 0.0037341653369367123, 0.0033874278888106346, 0.003456733888015151, 0.0038057467900216579, } };
const TfArray<8, int> quant63_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[48*1*1*8] = { 
  /* [0][0][][] */ -23,-103,11,127,-13,85,-30,-30, 
  /* [1][0][][] */ 7,0,54,127,-16,48,20,-43, 
  /* [2][0][][] */ 113,-106,-127,35,89,-6,39,-92, 
  /* [3][0][][] */ 68,27,68,38,-127,-113,20,72, 
  /* [4][0][][] */ -127,-32,85,-62,2,-66,96,-15, 
  /* [5][0][][] */ -6,-36,57,0,-16,-127,52,55, 
  /* [6][0][][] */ 84,88,-66,-127,-20,-87,50,3, 
  /* [7][0][][] */ 40,-68,-44,18,-5,82,127,95, 
  /* [8][0][][] */ 127,-5,105,-17,86,13,73,75, 
  /* [9][0][][] */ -127,-84,50,-127,30,82,125,-82, 
  /* [10][0][][] */ 10,50,-22,71,-127,-79,-30,-42, 
  /* [11][0][][] */ -98,-79,-31,-5,-77,-127,47,71, 
  /* [12][0][][] */ -127,-43,-22,75,90,82,16,54, 
  /* [13][0][][] */ -57,-3,24,-78,118,-64,-54,127, 
  /* [14][0][][] */ 63,79,127,-126,-53,60,-27,-26, 
  /* [15][0][][] */ 26,3,-33,-73,-22,127,37,-95, 
  /* [16][0][][] */ -73,-127,-57,51,-90,32,-43,-26, 
  /* [17][0][][] */ 96,-76,1,-21,124,-104,42,-127, 
  /* [18][0][][] */ -26,-28,13,17,10,80,13,-127, 
  /* [19][0][][] */ -41,127,42,12,72,46,-39,-66, 
  /* [20][0][][] */ -4,1,-79,19,-127,-33,63,-115, 
  /* [21][0][][] */ 127,100,-8,68,-35,33,89,-90, 
  /* [22][0][][] */ 50,-67,122,-62,48,-33,-127,124, 
  /* [23][0][][] */ 127,-69,10,16,61,1,24,2, 
  /* [24][0][][] */ 127,123,3,37,-91,44,76,-72, 
  /* [25][0][][] */ -127,-39,2,-118,-17,-56,54,-53, 
  /* [26][0][][] */ 31,-127,-82,-104,-61,123,-25,51, 
  /* [27][0][][] */ -83,-18,-38,-79,-31,32,127,-96, 
  /* [28][0][][] */ 56,77,-108,-127,29,-61,-11,56, 
  /* [29][0][][] */ 51,-19,9,-29,127,-36,8,-58, 
  /* [30][0][][] */ 84,42,-114,-127,32,-50,-40,31, 
  /* [31][0][][] */ -20,53,-10,9,-6,54,127,12, 
  /* [32][0][][] */ -34,5,-127,55,10,54,-23,-95, 
  /* [33][0][][] */ 24,127,124,-57,19,-17,-38,-18, 
  /* [34][0][][] */ 127,111,-20,89,-36,39,98,-107, 
  /* [35][0][][] */ 96,23,63,12,-10,0,29,127, 
  /* [36][0][][] */ 73,-85,120,-39,-4,-77,79,127, 
  /* [37][0][][] */ -9,-31,-107,-19,127,13,11,-110, 
  /* [38][0][][] */ 102,72,-39,45,-29,-24,-1,-127, 
  /* [39][0][][] */ 0,-57,-30,-11,-24,-43,127,85, 
  /* [40][0][][] */ -39,-64,57,127,-35,63,-2,-34, 
  /* [41][0][][] */ -12,-13,8,-6,9,1,-127,14, 
  /* [42][0][][] */ 127,93,122,-40,40,52,-103,-15, 
  /* [43][0][][] */ 11,23,-127,-35,3,-59,-112,64, 
  /* [44][0][][] */ -76,102,127,-102,61,29,-99,21, 
  /* [45][0][][] */ -20,40,-22,127,44,0,5,-33, 
  /* [46][0][][] */ 53,54,-36,-127,13,-58,31,37, 
  /* [47][0][][] */ 127,-104,-3,-12,-32,0,72,-15, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant64_scale = { 48, { 0.0020133049692958593, 0.0023171086795628071, 0.0014854439068585634, 0.0019614475313574076, 0.0014258755836635828, 0.0023610552307218313, 0.0016530266730114818, 0.0024825830478221178, 0.0018465714529156685, 0.0011610538931563497, 0.0015285377157852054, 0.001390123856253922, 0.0016606213757768273, 0.00098561961203813553, 0.0016513286391273141, 0.0020680422894656658, 0.0019235099898651242, 0.0018116307910531759, 0.0022634824272245169, 0.0028044285718351603, 0.0013614954659715295, 0.0012204161612316966, 0.0011184357572346926, 0.0028475823346525431, 0.00047928863205015659, 0.0020251537207514048, 0.00091060635168105364, 0.0019393147667869925, 0.0013633882626891136, 0.0020816389005631208, 0.0013610641472041607, 0.0026999649126082659, 0.00096034107264131308, 0.0012854756787419319, 0.0010397356236353517, 0.0022446820512413979, 0.0013325976906344295, 0.0019208270823583007, 0.0018986599752679467, 0.0030505361501127481, 0.0007907864055596292, 0.003170437877997756, 0.0020234689582139254, 0.0019651565235108137, 0.0012640440836548805, 0.0024906771723181009, 0.0020274452399462461, 0.0027913658414036036, } };
const TfArray<48, int> quant64_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[8*1*1*48] = { 
  /* [0][0][][] */ -17,12,113,17,-62,-46,-47,28,72,-11,-66,20,15,-54,-16,-13,-18,1,-8,-30,6,-80,-28,127,3,58,-80,16,42,21,-30,18,-25,63,68,10,7,-18,-30,-4,-28,55,25,9,-76,5,58,-24, 
  /* [1][0][][] */ -19,7,-1,22,-21,-38,-25,1,22,-20,10,2,5,-9,12,8,32,-7,26,85,-27,-41,11,-13,-2,-14,-127,-22,42,-28,-7,-32,-31,8,46,25,-9,-5,3,0,-30,-7,-1,-12,33,1,45,-26, 
  /* [2][0][][] */ -2,-39,52,-41,98,36,33,-8,81,56,-6,-85,14,21,33,-81,2,-70,7,7,-13,-28,64,47,32,7,-47,-42,-72,68,112,62,127,48,86,-21,71,61,50,9,103,-79,35,59,75,-22,-97,45, 
  /* [3][0][][] */ 33,-97,-2,43,-19,-37,56,28,33,-43,-44,36,-23,-33,-40,-8,-16,18,-9,17,-19,-61,-9,24,-41,20,-63,15,-127,-14,44,-26,-56,-31,45,51,-9,-29,-31,12,79,19,-49,32,-36,-7,-90,-12, 
  /* [4][0][][] */ -2,25,-6,-80,25,19,-13,-25,34,-27,42,-11,-40,44,-18,-41,31,17,7,36,110,127,-47,93,-15,31,-93,88,48,34,10,10,40,-32,-116,-10,-38,-53,11,-17,-69,-10,72,49,40,-6,-14,8, 
  /* [5][0][][] */ 26,4,-53,24,-34,-10,63,40,41,1,86,9,-42,101,1,28,10,8,23,-18,6,-9,-55,8,-37,-25,127,25,-52,59,67,-51,3,93,13,58,-27,1,-31,-20,65,4,0,-56,13,11,-37,-18, 
  /* [6][0][][] */ 4,3,-2,-8,48,80,-8,61,28,8,26,-4,-71,17,-55,33,21,83,14,4,-35,-93,-79,40,-115,2,-66,32,-9,50,127,-110,21,54,97,26,6,-10,-71,-64,15,49,-97,22,-51,-19,-17,-1, 
  /* [7][0][][] */ -22,14,-10,0,26,7,-32,29,127,-16,22,-26,-30,-4,-3,-47,-24,-67,-10,-33,-6,20,-10,11,70,-8,-35,-16,81,28,-76,0,61,-16,-19,47,23,53,27,7,-19,-32,-15,-35,12,-20,40,-1, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant65_scale = { 8, { 0.0052728727459907532, 0.0083079906180500984, 0.0043270839378237724, 0.0057070702314376831, 0.0032784722279757261, 0.0055205724202096462, 0.0050139357335865498, 0.0057258293963968754, } };
const TfArray<8, int> quant65_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[48*1*1*8] = { 
  /* [0][0][][] */ -116,127,-11,-34,86,-3,25,-94, 
  /* [1][0][][] */ -85,-40,42,-29,4,2,28,127, 
  /* [2][0][][] */ -77,41,-99,125,-81,62,-71,-127, 
  /* [3][0][][] */ 49,-127,16,-13,-3,-89,-14,16, 
  /* [4][0][][] */ 32,40,-80,-127,-1,-28,1,32, 
  /* [5][0][][] */ -40,81,51,-6,-127,-71,4,-99, 
  /* [6][0][][] */ -73,79,-94,127,-21,8,67,53, 
  /* [7][0][][] */ 83,87,-49,-127,6,-66,10,44, 
  /* [8][0][][] */ -42,-115,62,-127,-65,8,-80,17, 
  /* [9][0][][] */ -127,61,36,12,-85,46,125,72, 
  /* [10][0][][] */ -5,-85,62,-32,-64,-127,41,118, 
  /* [11][0][][] */ 127,10,94,-4,-69,-80,11,87, 
  /* [12][0][][] */ 127,16,-46,-50,-33,54,-13,29, 
  /* [13][0][][] */ -9,-76,4,-34,39,3,-127,16, 
  /* [14][0][][] */ -74,103,78,-24,-127,-6,9,99, 
  /* [15][0][][] */ -16,31,127,-68,105,-62,57,-13, 
  /* [16][0][][] */ 37,-117,41,-54,22,127,37,-42, 
  /* [17][0][][] */ -8,-91,35,89,82,-48,33,127, 
  /* [18][0][][] */ -58,102,26,-127,-17,63,48,-36, 
  /* [19][0][][] */ -22,11,-7,-46,-6,127,-56,-92, 
  /* [20][0][][] */ 5,-75,-106,-127,-32,78,-12,-96, 
  /* [21][0][][] */ 127,94,80,-22,-107,91,82,-92, 
  /* [22][0][][] */ 127,62,47,33,0,60,-43,-2, 
  /* [23][0][][] */ 73,-127,-30,58,17,-108,56,60, 
  /* [24][0][][] */ 127,60,85,-7,90,9,-5,-18, 
  /* [25][0][][] */ 3,106,127,-83,-85,39,-91,-38, 
  /* [26][0][][] */ 32,-78,-127,6,-3,-18,-39,-40, 
  /* [27][0][][] */ 33,-62,-29,23,79,-127,-87,-99, 
  /* [28][0][][] */ -74,-38,-54,-35,-127,-35,17,-13, 
  /* [29][0][][] */ 13,-22,56,-98,30,127,43,-4, 
  /* [30][0][][] */ 88,23,-10,-127,13,-112,23,78, 
  /* [31][0][][] */ -97,-55,51,-64,-36,-5,18,127, 
  /* [32][0][][] */ -28,-127,-14,-8,-91,47,58,-36, 
  /* [33][0][][] */ 19,8,127,-21,-7,18,-5,-38, 
  /* [34][0][][] */ 35,-105,34,-125,12,-74,108,127, 
  /* [35][0][][] */ 25,39,83,-85,-127,-16,84,8, 
  /* [36][0][][] */ 46,-77,27,11,-38,-66,15,127, 
  /* [37][0][][] */ -67,32,58,-60,3,-41,127,55, 
  /* [38][0][][] */ 11,82,127,-125,37,-98,68,-53, 
  /* [39][0][][] */ 1,-127,31,-11,125,-33,-70,13, 
  /* [40][0][][] */ 33,-6,127,29,-6,-14,27,16, 
  /* [41][0][][] */ -11,-41,97,-38,7,-5,10,127, 
  /* [42][0][][] */ 7,-2,-21,32,-32,15,-57,-127, 
  /* [43][0][][] */ -114,47,-119,127,-71,-97,-20,-50, 
  /* [44][0][][] */ -62,-97,127,42,-3,-7,46,7, 
  /* [45][0][][] */ 127,-57,-24,-33,111,-3,105,8, 
  /* [46][0][][] */ 87,-49,127,-78,45,38,71,115, 
  /* [47][0][][] */ -112,-62,-4,-110,-67,-83,102,127, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant66_scale = { 48, { 0.0014378819614648819, 0.0023928077425807714, 0.00060233258409425616, 0.0022713961079716682, 0.0022083350922912359, 0.001815935829654336, 0.0013896496966481209, 0.0010707604233175516, 0.0018808917375281453, 0.0014117946848273277, 0.0021100968588143587, 0.0012219100026413798, 0.0022769372444599867, 0.0021895903628319502, 0.0013963753590360284, 0.0011876506032422185, 0.0018118578009307384, 0.0017318791942670941, 0.0019960405770689249, 0.0017285508802160621, 0.0015794881619513035, 0.0013057715259492397, 0.0014193875249475241, 0.00084826117381453514, 0.0018426515161991119, 0.001498302211984992, 0.0017669540829956532, 0.00090361252659931779, 0.002406280254945159, 0.0024645242374390364, 0.0014244898920878768, 0.0025782252196222544, 0.0012176932068541646, 0.0030925858300179243, 0.001723884604871273, 0.0020528486929833889, 0.0020447699353098869, 0.001655060681514442, 0.00117036874871701, 0.0010513324523344636, 0.0020101545378565788, 0.0018592412816360593, 0.0024939579889178276, 0.0012648532865568995, 0.0020743068307638168, 0.0020473143085837364, 0.00087630969937890768, 0.0019696864765137434, } };
const TfArray<48, int> quant66_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[8*1*1*48] = { 
  /* [0][0][][] */ -77,127,8,-64,31,-54,5,-87,-21,-57,-33,-3,46,-18,-69,-40,118,-26,-43,7,-2,2,28,56,64,-9,65,31,11,6,61,-57,-30,21,61,48,13,-33,20,-33,-48,-57,-33,16,-97,-26,85,-39, 
  /* [1][0][][] */ 47,0,-47,-34,39,-3,36,-58,-44,-4,-21,-14,4,-8,93,66,-19,-33,52,-10,11,87,77,-62,30,39,-37,57,-62,35,24,-46,-96,1,-56,11,-99,45,42,-127,-2,-29,13,-26,-49,5,-18,-11, 
  /* [2][0][][] */ 55,-36,-41,-108,-69,38,-91,56,1,82,11,-2,-38,27,6,89,5,15,-27,6,28,-95,14,-18,-17,73,-3,25,13,24,-127,21,-8,124,-116,31,-22,3,56,0,-96,71,-63,53,104,40,90,-84, 
  /* [3][0][][] */ -41,49,-25,41,-92,-34,127,122,-77,-48,-6,9,-29,-53,-16,-17,41,48,-69,-79,61,66,48,18,16,-56,-23,-6,11,-65,-70,-19,-16,2,-100,-31,65,11,-26,-1,-56,-26,-17,-41,104,-30,-23,-59, 
  /* [4][0][][] */ 42,-7,49,-11,7,0,2,-15,-9,4,35,-2,-28,7,-42,47,27,-14,-9,7,1,-37,-28,22,22,-3,14,-31,41,21,14,-20,-52,-1,18,-42,-54,1,-9,127,-3,13,6,16,2,3,16,7, 
  /* [5][0][][] */ -44,-36,-18,-29,40,-96,10,64,58,11,-9,-69,-20,-13,35,-25,-81,-58,33,87,-32,63,14,-51,56,-15,6,69,57,89,-51,-17,24,37,-102,-43,-127,-16,-33,-77,-28,6,-3,55,45,5,47,30, 
  /* [6][0][][] */ -10,-2,-36,19,-20,-68,127,-20,-23,-30,31,-49,-41,-82,-4,-7,-24,-25,19,-9,-1,30,-58,-2,32,-60,-22,58,30,25,8,-22,80,-5,68,36,-53,97,-11,-80,-41,45,20,36,35,52,70,55, 
  /* [7][0][][] */ -4,-60,53,-77,38,23,27,-48,-32,49,46,-11,6,3,106,-14,46,23,-70,27,-11,-80,-52,42,-32,11,50,89,33,4,18,59,-80,-44,77,-14,127,9,-53,-2,29,85,104,-10,7,-33,35,46, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant67_scale = { 8, { 0.0041627022437751293, 0.0057374825701117516, 0.0045214113779366016, 0.0055408631451427937, 0.0092999320477247238, 0.0055848630145192146, 0.00624462915584445, 0.0056293783709406853, } };
const TfArray<8, int> quant67_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[48*1*1*8] = { 
  /* [0][0][][] */ 20,-43,-18,41,127,10,-34,-3, 
  /* [1][0][][] */ -111,21,113,-57,-95,-87,-50,127, 
  /* [2][0][][] */ -127,41,-12,9,-67,-11,27,-47, 
  /* [3][0][][] */ 127,-19,-43,8,-19,26,-64,72, 
  /* [4][0][][] */ -127,34,50,13,-17,17,14,-23, 
  /* [5][0][][] */ 4,117,-127,20,36,-84,-26,73, 
  /* [6][0][][] */ 97,16,-127,127,-3,65,-3,68, 
  /* [7][0][][] */ 123,-19,27,7,32,22,127,31, 
  /* [8][0][][] */ 97,-28,-127,69,-38,68,-18,-25, 
  /* [9][0][][] */ 2,-70,7,85,45,-119,-8,127, 
  /* [10][0][][] */ -38,-2,64,-127,-26,-18,54,-5, 
  /* [11][0][][] */ 93,24,-120,-127,27,-112,10,82, 
  /* [12][0][][] */ -127,69,-112,85,-36,59,79,-49, 
  /* [13][0][][] */ -85,-6,-8,11,28,-65,127,19, 
  /* [14][0][][] */ -46,-34,7,-2,127,46,-21,97, 
  /* [15][0][][] */ -5,127,47,8,-8,-9,33,-36, 
  /* [16][0][][] */ 60,-29,127,-84,37,-30,33,83, 
  /* [17][0][][] */ -24,6,108,126,-30,127,12,-51, 
  /* [18][0][][] */ -35,-15,1,-115,-35,127,21,41, 
  /* [19][0][][] */ -21,64,52,-23,51,-127,17,11, 
  /* [20][0][][] */ -34,104,-27,78,-88,69,127,89, 
  /* [21][0][][] */ 68,-116,64,-87,-74,72,-127,120, 
  /* [22][0][][] */ -69,-54,41,-35,-18,-127,-46,65, 
  /* [23][0][][] */ -32,-53,110,127,-30,24,-16,-11, 
  /* [24][0][][] */ -91,-11,-11,-34,127,35,9,51, 
  /* [25][0][][] */ -90,113,46,-34,-100,7,-19,-127, 
  /* [26][0][][] */ -48,-127,86,-48,32,-121,34,16, 
  /* [27][0][][] */ -26,-127,-49,-53,-34,39,-36,-11, 
  /* [28][0][][] */ -50,-76,36,-50,-3,-56,70,127, 
  /* [29][0][][] */ -43,6,38,-125,28,-127,8,75, 
  /* [30][0][][] */ 40,127,0,-28,81,-99,80,10, 
  /* [31][0][][] */ -31,61,-94,11,-127,26,87,-28, 
  /* [32][0][][] */ -9,-127,63,-40,-32,-34,-40,-15, 
  /* [33][0][][] */ 111,50,127,31,42,-7,-42,71, 
  /* [34][0][][] */ 39,24,127,-31,47,-102,-9,110, 
  /* [35][0][][] */ -29,-89,40,-65,127,-73,-50,-56, 
  /* [36][0][][] */ -15,9,-18,37,-127,60,11,-4, 
  /* [37][0][][] */ 43,54,-18,64,-127,-39,-72,-45, 
  /* [38][0][][] */ 15,55,-127,6,18,-20,-64,109, 
  /* [39][0][][] */ 79,-127,6,-2,-58,75,25,69, 
  /* [40][0][][] */ 102,-91,73,34,-62,-127,62,122, 
  /* [41][0][][] */ -75,-36,-10,64,-62,7,-39,-127, 
  /* [42][0][][] */ 28,99,127,-37,70,58,-105,48, 
  /* [43][0][][] */ 97,14,-48,17,-30,127,-42,29, 
  /* [44][0][][] */ 99,4,-127,-76,11,-28,-11,95, 
  /* [45][0][][] */ 22,-1,-79,28,26,31,41,-127, 
  /* [46][0][][] */ 127,-65,9,14,48,31,-106,80, 
  /* [47][0][][] */ 40,-127,-35,37,123,18,8,-17, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant68_scale = { 48, { 0.0024022648576647043, 0.001477983663789928, 0.0017184343887493014, 0.0021435827948153019, 0.0025855270214378834, 0.001713837031275034, 0.0013103248784318566, 0.0020250473171472549, 0.002133113332092762, 0.0012466390617191792, 0.0027036026585847139, 0.0010502255754545331, 0.0014731682604178786, 0.0024003640282899141, 0.0016902572242543101, 0.0023318063467741013, 0.0008783040102571249, 0.0013621082762256265, 0.00103760976344347, 0.0021330236922949553, 0.001524684252217412, 0.0013944040983915329, 0.0016387837240472436, 0.0014524207217618823, 0.0017676566494628787, 0.001160513493232429, 0.0018061872106045485, 0.0018419200787320733, 0.0016551557928323746, 0.0016590198501944542, 0.001370923244394362, 0.0012693987227976322, 0.0025856976862996817, 0.0015205866657197475, 0.00095585256349295378, 0.001931950799189508, 0.0021327540744096041, 0.00080639013322070241, 0.0016673022182658315, 0.0022719947155565023, 0.0011365668615326285, 0.0019329482456669211, 0.001567770610563457, 0.0017936985241249204, 0.00086137349717319012, 0.0011691718827933073, 0.0013540702639147639, 0.0010555504122748971, } };
const TfArray<48, int> quant68_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[8*1*1*48] = { 
  /* [0][0][][] */ -39,-102,65,27,-10,-3,14,41,-19,9,-41,81,40,41,-87,12,115,-2,-17,-17,-11,-13,-70,-10,-120,-33,-27,-42,-15,35,17,22,44,-2,38,-3,17,-27,-16,35,9,18,-11,36,41,-19,127,53, 
  /* [1][0][][] */ 11,40,-34,-19,-12,14,2,-18,8,-51,-19,33,-10,-8,-2,0,-8,-14,21,-69,54,-41,12,-42,18,52,-70,-127,-41,19,40,-44,20,-40,45,-27,-11,-40,32,-49,1,23,52,14,-9,32,-14,-21, 
  /* [2][0][][] */ -45,44,6,67,-9,-27,-36,-18,88,-15,24,-110,76,-14,2,63,127,77,-91,-17,-38,-5,41,78,-41,-75,95,-76,-18,-33,-29,-2,-19,-107,56,15,-22,-41,-82,-46,33,-15,27,-2,-106,39,-9,-49, 
  /* [3][0][][] */ 23,-40,18,-10,42,15,46,32,-13,117,-79,-110,-58,49,-10,-8,-69,45,-26,-11,37,-34,-30,127,-9,5,-4,-88,-9,-57,13,-4,-19,-40,-12,-25,11,5,14,4,-20,-26,-11,-12,-33,-25,61,58, 
  /* [4][0][][] */ 8,-61,49,-5,-6,-6,21,19,25,44,-31,19,-15,0,114,48,15,-25,-34,0,-32,-29,-58,-10,127,-59,-31,-52,-2,16,16,-27,43,-16,19,64,48,99,2,-42,-57,21,17,-3,11,-44,18,41, 
  /* [5][0][][] */ 1,-38,-19,-60,27,-39,9,8,-62,-94,0,-54,-40,-14,45,-42,-51,34,127,99,38,34,-87,18,101,47,-48,29,9,-55,7,-56,34,44,-34,-34,-6,71,-4,51,-23,22,19,75,5,1,53,-16, 
  /* [6][0][][] */ -23,-119,40,-47,15,-34,27,86,-4,1,42,13,-23,30,-10,-12,127,7,10,-4,53,-64,-98,-4,-45,-4,42,-19,58,-12,31,60,57,-18,-23,-28,32,97,-67,23,-16,-15,-65,-21,-51,-34,-81,52, 
  /* [7][0][][] */ -48,54,28,26,-77,18,79,-19,-12,109,0,23,43,-73,65,11,-11,-16,-108,75,52,40,4,-54,72,-127,-77,-7,53,0,-25,-75,87,-44,35,-65,-34,-1,65,68,45,43,20,56,110,70,37,-111, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant69_scale = { 8, { 0.0071422131732106209, 0.0079641146585345268, 0.0064824498258531094, 0.0063813207671046257, 0.0063565582968294621, 0.0079838559031486511, 0.006501032505184412, 0.0053529832512140274, } };
const TfArray<8, int> quant69_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[48*1*1*8] = { 
  /* [0][0][][] */ 39,28,9,71,-127,-113,-31,-7, 
  /* [1][0][][] */ 37,50,-88,-127,19,-35,15,60, 
  /* [2][0][][] */ 127,-65,73,-87,-24,113,70,97, 
  /* [3][0][][] */ -22,97,127,24,-2,-4,78,43, 
  /* [4][0][][] */ -19,127,75,-21,121,-50,62,-9, 
  /* [5][0][][] */ -50,-36,127,105,1,35,-10,-43, 
  /* [6][0][][] */ -52,50,-23,123,-55,68,127,43, 
  /* [7][0][][] */ -2,-30,102,-107,-49,-55,127,8, 
  /* [8][0][][] */ 77,127,84,39,39,-49,-49,-22, 
  /* [9][0][][] */ 51,24,-127,-69,24,-27,-18,64, 
  /* [10][0][][] */ 12,95,-30,-6,-17,107,-107,127, 
  /* [11][0][][] */ -127,21,24,13,32,-37,-12,50, 
  /* [12][0][][] */ 127,27,43,26,-2,47,-4,76, 
  /* [13][0][][] */ -79,70,-24,-127,-19,-88,59,-30, 
  /* [14][0][][] */ -3,44,77,-127,36,73,13,13, 
  /* [15][0][][] */ 5,36,-108,99,37,48,-127,-3, 
  /* [16][0][][] */ -90,76,-33,-127,-21,-93,69,-30, 
  /* [17][0][][] */ 6,81,-20,-43,-15,89,10,-127, 
  /* [18][0][][] */ -81,-127,-76,-32,-40,46,56,18, 
  /* [19][0][][] */ -127,22,57,-7,-9,-33,53,-30, 
  /* [20][0][][] */ 28,-46,54,5,-127,17,-30,-4, 
  /* [21][0][][] */ 23,127,83,-45,96,-49,59,-18, 
  /* [22][0][][] */ -20,-39,127,-66,-19,58,18,-40, 
  /* [23][0][][] */ 3,-87,-35,57,122,-113,49,-127, 
  /* [24][0][][] */ 127,-35,-19,-14,-36,32,7,-44, 
  /* [25][0][][] */ -59,-127,-92,5,-64,111,-78,-17, 
  /* [26][0][][] */ -77,11,39,-11,-19,-21,127,-21, 
  /* [27][0][][] */ -127,-21,-55,-23,-7,-103,113,-11, 
  /* [28][0][][] */ 44,-127,59,-55,-122,67,42,-46, 
  /* [29][0][][] */ 106,-88,37,127,24,110,-66,30, 
  /* [30][0][][] */ -55,54,19,75,-63,30,127,71, 
  /* [31][0][][] */ 70,44,91,42,127,26,23,90, 
  /* [32][0][][] */ -113,75,-78,66,24,-62,127,67, 
  /* [33][0][][] */ 72,127,85,34,34,-46,-44,-20, 
  /* [34][0][][] */ 15,80,47,-64,-126,121,-56,127, 
  /* [35][0][][] */ -20,-68,29,-99,53,-22,-127,6, 
  /* [36][0][][] */ -58,-26,127,77,-28,27,22,-69, 
  /* [37][0][][] */ -67,-48,-85,-51,-127,-16,-30,-63, 
  /* [38][0][][] */ 30,-82,54,-111,68,-36,-127,-106, 
  /* [39][0][][] */ -52,-33,-11,-75,127,118,49,13, 
  /* [40][0][][] */ 107,9,5,-8,-13,127,-38,-10, 
  /* [41][0][][] */ 66,3,-110,-104,-45,127,14,-30, 
  /* [42][0][][] */ -7,-27,96,-100,-42,-56,127,7, 
  /* [43][0][][] */ 25,47,-67,-127,-26,-16,65,39, 
  /* [44][0][][] */ 76,-18,76,-30,-124,-23,43,127, 
  /* [45][0][][] */ -7,-84,20,52,23,-93,-10,127, 
  /* [46][0][][] */ 18,-108,35,-127,-63,4,-79,-11, 
  /* [47][0][][] */ -34,-57,127,-36,-22,61,26,-105, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant70_scale = { 48, { 0.0019538151100277901, 0.0021288418211042881, 0.0013542510569095612, 0.0013124268734827638, 0.0018518101423978806, 0.0015996049623936415, 0.0012907925993204117, 0.0018266590777784586, 0.0019242903217673302, 0.00053703947924077511, 0.0016862449701875448, 0.0030527282506227493, 0.0013055037707090378, 0.0016798428259789944, 0.0017325249500572681, 0.0020517250522971153, 0.0017183190211653709, 0.0016176849603652954, 0.001937889726832509, 0.0023972420021891594, 0.003166689071804285, 0.0011323513463139534, 0.0020269532687962055, 0.001655275234952569, 0.003190282266587019, 0.00070574268465861678, 0.0026508460287004709, 0.0018801620462909341, 0.001392077305354178, 0.001311069936491549, 0.0014277092413976789, 0.0018640991766005754, 0.0022130808793008327, 0.0018109704833477736, 0.0015134612331166863, 0.001972871134057641, 0.0021451115608215332, 0.0019119883654639125, 0.0018015904352068901, 0.0017588069895282388, 0.0021162708289921284, 0.001272431924007833, 0.0021211574785411358, 0.0022057031746953726, 0.0019548677373677492, 0.0016782465390861034, 0.0020384318195283413, 0.0020071486942470074, } };
const TfArray<48, int> quant70_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[8*1*1*48] = { 
  /* [0][0][][] */ 1,0,0,-2,3,6,17,-20,-8,2,-2,-38,-18,-13,-16,12,20,63,-8,-17,-11,-6,-13,19,40,0,-4,15,-8,-9,0,-12,7,4,-12,-17,-3,8,-6,2,-5,19,10,-8,-8,-127,-12,0, 
  /* [1][0][][] */ -25,-40,-17,1,7,35,16,-35,33,127,-10,-20,-2,-8,6,31,19,-18,31,18,-14,-2,35,12,20,6,52,-7,-8,10,10,24,31,-26,-15,-8,-90,-11,-23,18,-4,5,28,46,10,57,4,-15, 
  /* [2][0][][] */ -23,-5,1,14,-32,15,-19,6,-26,13,-15,6,-9,-12,-26,-2,12,3,-23,12,29,-4,11,-127,-14,5,40,13,6,-8,44,8,-1,24,118,8,-25,-13,-41,13,49,25,2,5,-19,-31,-14,4, 
  /* [3][0][][] */ 12,2,22,1,-17,3,-12,-127,-12,-14,-11,14,-18,17,7,103,-3,9,-8,-5,7,9,-5,1,-18,15,6,27,-22,24,11,-20,17,20,0,33,10,-3,6,-5,9,1,98,3,30,3,8,-10, 
  /* [4][0][][] */ 127,-13,5,-17,-1,9,-5,27,-51,40,3,-15,-27,-15,11,-12,23,-9,-38,0,23,-1,12,3,30,-26,24,-8,24,-4,33,-9,-9,51,2,-8,-24,10,-6,-77,-19,-11,-16,3,-19,24,7,-25, 
  /* [5][0][][] */ 70,5,-30,32,-127,7,-14,42,104,0,5,-45,-11,3,8,-30,-19,-12,102,9,65,115,-41,-53,58,126,-19,-28,41,-7,-5,-120,-58,-90,48,27,-5,98,20,-46,-16,9,-23,3,-20,31,-34,27, 
  /* [6][0][][] */ -13,17,-47,19,-18,-21,-3,-7,-16,-16,-4,-93,-63,104,8,10,-127,-20,-7,6,17,3,-21,-12,88,0,31,54,20,74,-19,85,-48,16,12,-16,10,-36,23,12,-60,-7,14,-29,-10,42,1,2, 
  /* [7][0][][] */ -27,-18,1,25,1,23,-95,-7,-18,38,24,16,-2,-19,-13,-3,28,-4,-17,8,15,4,-4,-2,-12,9,-11,13,-21,0,-102,-8,-39,23,-3,85,-26,1,127,12,-23,-1,2,25,26,-5,2,14, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant71_scale = { 8, { 0.0089708520099520683, 0.0080417431890964508, 0.007503243163228035, 0.010167623870074749, 0.0072377510368824005, 0.0047328677028417587, 0.0062452307902276516, 0.0061828363686800003, } };
const TfArray<8, int> quant71_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[48*1*1*8] = { 
  /* [0][0][][] */ -127,-30,42,-91,111,-74,-34,113, 
  /* [1][0][][] */ -127,7,-54,46,0,34,16,-75, 
  /* [2][0][][] */ -97,83,-58,-56,-127,-104,22,49, 
  /* [3][0][][] */ -1,127,54,-22,15,15,-40,-124, 
  /* [4][0][][] */ -26,59,-9,-3,0,-51,-11,-127, 
  /* [5][0][][] */ -43,4,5,10,1,-127,76,-38, 
  /* [6][0][][] */ -127,-4,-11,-20,53,-58,-4,3, 
  /* [7][0][][] */ 53,74,-127,-30,11,55,7,36, 
  /* [8][0][][] */ 127,35,-38,91,-110,111,-17,-71, 
  /* [9][0][][] */ 5,-115,-38,-2,-118,27,21,-127, 
  /* [10][0][][] */ 127,-2,-15,102,-39,46,1,-22, 
  /* [11][0][][] */ 10,6,-127,-15,-34,7,-123,-58, 
  /* [12][0][][] */ -28,-127,0,27,-23,-65,-14,-20, 
  /* [13][0][][] */ 40,-73,91,57,-73,126,-127,-24, 
  /* [14][0][][] */ 102,-12,-83,87,10,-127,13,73, 
  /* [15][0][][] */ 69,35,-110,31,-40,-127,-11,89, 
  /* [16][0][][] */ -127,-56,-56,34,115,-26,8,-3, 
  /* [17][0][][] */ 43,127,37,-77,83,-19,-43,71, 
  /* [18][0][][] */ -127,-34,-59,35,74,-60,-64,-42, 
  /* [19][0][][] */ -52,71,-39,35,-127,-28,69,84, 
  /* [20][0][][] */ 119,47,-26,79,-127,81,-33,-125, 
  /* [21][0][][] */ 42,51,23,127,20,-8,48,-15, 
  /* [22][0][][] */ -68,46,-125,0,-127,-13,-35,46, 
  /* [23][0][][] */ 11,115,60,-58,72,-2,-112,127, 
  /* [24][0][][] */ 10,-44,-127,-102,-20,61,126,76, 
  /* [25][0][][] */ -42,-34,-13,-5,40,0,-18,127, 
  /* [26][0][][] */ 69,-46,70,19,86,58,127,30, 
  /* [27][0][][] */ 96,61,55,-27,-127,34,12,-29, 
  /* [28][0][][] */ -127,63,76,-35,-93,-59,-87,19, 
  /* [29][0][][] */ -127,-25,-55,-16,24,-33,-3,50, 
  /* [30][0][][] */ -127,28,52,31,-46,-27,10,38, 
  /* [31][0][][] */ -127,-11,-38,-9,14,-38,-3,35, 
  /* [32][0][][] */ 1,24,-41,-96,127,-28,-109,101, 
  /* [33][0][][] */ -91,24,-72,-127,92,-40,83,1, 
  /* [34][0][][] */ 64,80,23,10,127,-9,29,43, 
  /* [35][0][][] */ 10,-39,42,-24,118,-127,58,98, 
  /* [36][0][][] */ -45,-49,-29,-127,-18,8,-47,8, 
  /* [37][0][][] */ -57,-46,45,-100,113,-127,73,56, 
  /* [38][0][][] */ 72,22,15,-34,-115,-16,-127,-45, 
  /* [39][0][][] */ -36,-31,90,43,56,127,-23,-42, 
  /* [40][0][][] */ -53,8,40,-104,31,127,-102,112, 
  /* [41][0][][] */ -64,23,-33,-78,-127,-38,-88,-12, 
  /* [42][0][][] */ 34,127,33,-10,51,-16,-29,56, 
  /* [43][0][][] */ 127,54,80,-58,-12,86,71,12, 
  /* [44][0][][] */ -33,127,-69,47,-52,56,56,-38, 
  /* [45][0][][] */ 127,6,-32,80,-55,81,-23,-92, 
  /* [46][0][][] */ 12,10,-12,-44,105,-127,-48,41, 
  /* [47][0][][] */ -1,127,69,-17,17,-11,-49,-122, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant72_scale = { 48, { 0.00077422312460839748, 0.0016098169144243002, 0.0022777663543820381, 0.0012881256407126784, 0.0014339529443532228, 0.0014862825628370047, 0.0031012492254376411, 0.0033794136252254248, 0.00078389112604781985, 0.0013849699171259999, 0.002701248973608017, 0.00080530473496764898, 0.0034671772737056017, 0.00055512395920231938, 0.00036162440665066242, 0.0025254471693187952, 0.0029201321303844452, 0.00086408742936328053, 0.003161693224683404, 0.0024715273175388575, 0.0019663593266159296, 0.00258226552978158, 0.0019760783761739731, 0.0018071645172312856, 0.00049642822705209255, 0.0030872398056089878, 0.0025137613993138075, 0.0015484938630834222, 0.0017113635549321771, 0.0018573066918179393, 0.0023111589252948761, 0.0036723755765706301, 0.0023285089991986752, 0.0015988080995157361, 0.0025323573499917984, 0.0025192354805767536, 0.0027499496936798096, 0.0014154511736705899, 0.0010087236296385527, 0.0020702329929918051, 0.00085578550351783633, 0.001554941525682807, 0.0035811739508062601, 0.0015985167119652033, 0.0012708515860140324, 0.0011372327571734786, 0.0020044532138854265, 0.0017427174607291818, } };
const TfArray<48, int> quant72_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[8*1*1*48] = { 
  /* [0][0][][] */ 35,-127,-13,-7,7,19,-47,-11,74,-2,30,1,-13,-46,1,2,-24,-10,7,2,-41,-10,11,-10,27,-1,-11,-26,-3,-36,-28,31,13,32,-5,-3,20,-22,-28,-2,-45,-12,-2,-17,-29,56,-26,6, 
  /* [1][0][][] */ 10,67,-12,100,62,-12,-7,-79,20,63,23,-18,-52,33,18,-11,-39,-110,30,-53,-59,-75,-15,-127,-39,-56,39,-60,25,-57,20,4,8,17,18,-36,71,-27,-51,-22,-12,-47,121,-16,97,7,-30,-103, 
  /* [2][0][][] */ -20,-127,-31,51,-22,-27,4,113,-22,12,33,-117,16,-4,-9,-37,-40,-47,47,35,-4,-45,1,-38,-105,-3,-57,-47,42,-25,36,-33,-5,-8,23,19,29,19,-24,-9,58,105,42,-50,-30,-18,43,-50, 
  /* [3][0][][] */ 46,77,6,-22,-11,30,0,6,67,14,19,-35,0,31,82,3,17,37,-2,-31,-5,-127,34,5,-77,27,0,20,-7,-21,23,-3,-13,4,7,8,117,-35,31,2,-35,1,-30,20,32,63,29,18, 
  /* [4][0][][] */ -65,-6,-66,33,-17,-42,56,-6,-11,60,-46,-2,10,-36,39,20,39,-92,-72,11,127,15,-87,-35,-10,-9,-18,92,9,72,10,23,37,-64,62,41,23,79,82,62,34,1,81,7,-38,-83,-96,-17, 
  /* [5][0][][] */ 23,36,-27,11,-44,33,-26,-12,112,13,15,-19,-11,-1,-127,-30,-6,-12,13,2,-9,44,23,-19,54,11,-13,7,28,-4,14,0,8,-8,0,-34,-40,-33,13,22,56,-16,2,-18,29,49,125,-5, 
  /* [6][0][][] */ -1,79,25,-51,6,-92,15,-8,-59,-64,-48,-126,43,28,4,15,4,51,50,-58,-19,-63,-71,127,86,26,12,-22,-15,35,-19,-16,-57,14,-24,38,61,70,101,36,-28,13,-58,-73,60,-49,29,60, 
  /* [7][0][][] */ -59,-107,24,-95,-88,76,20,-17,-34,47,-3,-34,2,91,79,39,4,-57,43,-35,81,-18,3,-127,19,112,3,34,-46,72,12,-33,51,-29,34,39,12,54,12,20,40,38,75,8,32,-32,-11,91, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant73_scale = { 8, { 0.0052522537298500538, 0.0029593950603157282, 0.0029406363610178232, 0.0045872516930103302, 0.0027272687293589115, 0.0041758017614483833, 0.0026787715032696724, 0.0028095892630517483, } };
const TfArray<8, int> quant73_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[48*1*1*8] = { 
  /* [0][0][][] */ 29,-62,76,-3,54,58,-100,-127, 
  /* [1][0][][] */ 9,-53,91,-6,127,2,50,-78, 
  /* [2][0][][] */ 1,-33,-39,28,48,27,21,127, 
  /* [3][0][][] */ -127,74,-43,4,72,-19,41,18, 
  /* [4][0][][] */ -34,-127,-24,57,-43,8,61,-77, 
  /* [5][0][][] */ 109,37,127,-63,67,-86,32,-83, 
  /* [6][0][][] */ 3,-127,-52,62,-106,58,113,-119, 
  /* [7][0][][] */ -12,-57,127,33,16,-58,-48,-41, 
  /* [8][0][][] */ -44,-47,37,63,-73,127,-12,61, 
  /* [9][0][][] */ -16,27,-11,-8,-18,127,14,8, 
  /* [10][0][][] */ -127,34,-98,-127,44,0,50,-91, 
  /* [11][0][][] */ -8,-20,27,-40,45,-127,4,-39, 
  /* [12][0][][] */ -5,-23,3,-4,13,-127,-11,-11, 
  /* [13][0][][] */ 19,5,-84,2,3,10,127,38, 
  /* [14][0][][] */ -80,127,23,56,80,-92,44,-7, 
  /* [15][0][][] */ -14,-27,-13,-127,-40,23,-51,42, 
  /* [16][0][][] */ -5,30,-6,-127,48,-40,-23,33, 
  /* [17][0][][] */ 64,37,-41,114,-69,88,-96,-127, 
  /* [18][0][][] */ 23,-111,-127,5,-43,13,-42,42, 
  /* [19][0][][] */ 127,37,16,91,-85,67,5,-67, 
  /* [20][0][][] */ 53,22,24,91,127,5,118,41, 
  /* [21][0][][] */ -127,-45,26,-116,-17,-6,28,8, 
  /* [22][0][][] */ 25,16,34,-87,-127,-37,54,30, 
  /* [23][0][][] */ -80,38,-44,57,-127,43,-33,-55, 
  /* [24][0][][] */ 70,17,-127,51,107,-13,-38,-32, 
  /* [25][0][][] */ -127,-66,-83,108,65,-63,-89,-92, 
  /* [26][0][][] */ -127,44,-93,-11,12,-67,109,2, 
  /* [27][0][][] */ -3,11,-28,-3,-12,76,100,127, 
  /* [28][0][][] */ -18,-59,33,77,-14,85,-59,-127, 
  /* [29][0][][] */ 93,101,15,-40,-9,-3,127,60, 
  /* [30][0][][] */ -39,-127,-34,65,-50,7,69,-79, 
  /* [31][0][][] */ -2,-49,48,-16,-116,-2,-127,-77, 
  /* [32][0][][] */ -118,51,-11,-61,55,-52,127,-74, 
  /* [33][0][][] */ 89,47,-108,103,36,13,127,68, 
  /* [34][0][][] */ -23,-127,-15,23,-90,56,96,-53, 
  /* [35][0][][] */ -22,-40,-11,-127,-5,5,-58,15, 
  /* [36][0][][] */ 127,-72,-28,48,106,-6,-12,-122, 
  /* [37][0][][] */ -127,-92,11,-98,50,-74,-66,77, 
  /* [38][0][][] */ 127,-37,51,-17,-11,-52,18,30, 
  /* [39][0][][] */ -127,-48,16,-55,53,-12,-48,108, 
  /* [40][0][][] */ 127,-54,73,12,20,-112,-12,-3, 
  /* [41][0][][] */ 14,-65,30,-48,127,-97,55,-9, 
  /* [42][0][][] */ -20,-56,127,-54,-95,-10,-57,-70, 
  /* [43][0][][] */ 16,127,-29,68,-113,25,-50,-108, 
  /* [44][0][][] */ 13,25,17,-58,-7,127,20,-32, 
  /* [45][0][][] */ -42,16,1,-23,-127,-77,-59,106, 
  /* [46][0][][] */ 16,1,-66,-67,-15,-14,-127,-77, 
  /* [47][0][][] */ 103,85,-126,-49,31,-34,127,114, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant74_scale = { 48, { 0.0017596660181879997, 0.0013302761362865567, 0.0022620547097176313, 0.0024107161443680525, 0.0033856371883302927, 0.0014919057721272111, 0.0020287004299461842, 0.0036641363985836506, 0.0015076720155775547, 0.0036020404659211636, 0.0024051063228398561, 0.0030684084631502628, 0.0034437272697687149, 0.0028032376430928707, 0.0023864498361945152, 0.0038482975214719772, 0.0031503615900874138, 0.0015728076687082648, 0.0024680686183273792, 0.0016583256656304002, 0.0026111856568604708, 0.0024980104062706232, 0.0019659607205539942, 0.0015838423278182745, 0.0005506281740963459, 0.0019474108703434467, 0.0013538154307752848, 0.0024882846046239138, 0.0015905246837064624, 0.002186227822676301, 0.0033112557139247656, 0.0010288191260769963, 0.0022832038812339306, 0.0025604197289794683, 0.0029979462269693613, 0.0037940687034279108, 0.0019147110870108008, 0.0017057223012670875, 0.0034197098575532436, 0.0016931525897234678, 0.0028190016746520996, 0.0015842332504689693, 0.0017694634152576327, 0.00091786752454936504, 0.0031392136588692665, 0.0025129695422947407, 0.0024261379148811102, 0.0024080222938209772, } };
const TfArray<48, int> quant74_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[8*1*1*48] = { 
  /* [0][0][][] */ -9,27,42,-67,-47,63,-30,-10,49,12,23,-42,-29,-52,30,8,-29,-3,-3,127,-10,-79,82,66,-12,43,95,-28,31,-110,-12,66,21,-1,-7,32,40,-110,51,42,64,35,47,-39,42,5,-23,35, 
  /* [1][0][][] */ 28,89,-74,16,-127,-7,115,51,-20,-26,-26,-16,-6,-12,-48,-48,46,25,74,65,-11,-41,-7,-84,-52,-12,10,14,33,-3,-109,48,6,-1,-108,-48,-76,7,-38,0,-74,8,46,-106,-28,-4,-19,-17, 
  /* [2][0][][] */ -73,-121,-7,-22,-25,-24,41,-124,-85,47,-6,38,1,84,45,-13,20,-60,-8,-53,11,32,-63,-1,112,23,38,31,-54,12,-35,-43,9,45,-44,-33,-35,61,12,-47,52,-9,-127,40,-77,-12,69,-83, 
  /* [3][0][][] */ 14,27,122,9,25,45,-51,-54,-23,10,46,-33,-18,-88,-53,-90,-123,-26,-21,48,55,-52,127,10,-17,13,38,-1,-40,22,19,29,7,-48,11,-90,-94,-41,8,52,-6,33,51,-51,32,-44,10,5, 
  /* [4][0][][] */ -40,-127,-9,32,-26,39,36,7,6,-18,-18,35,41,55,-10,-30,19,-63,-17,-85,62,12,84,66,-30,-17,-60,6,-62,31,-5,51,-15,1,-15,-14,50,23,2,-9,38,-30,43,38,-12,2,37,-36, 
  /* [5][0][][] */ -40,-37,56,-33,-4,14,-9,13,-37,-115,32,-76,127,-14,5,28,-1,60,25,24,-5,6,63,14,28,16,-10,40,-33,-15,17,10,26,7,35,8,-41,-28,-14,52,-63,28,20,-13,-23,-3,7,-33, 
  /* [6][0][][] */ 26,-98,26,9,61,-35,-59,5,32,17,-72,18,-35,20,-28,-42,-22,0,-28,22,15,23,-67,-12,47,-6,-88,0,37,-84,30,55,-26,-58,41,-30,38,30,-11,-41,-22,-38,8,27,-16,31,127,67, 
  /* [7][0][][] */ 52,60,65,25,-57,-3,90,12,-63,-18,36,-14,25,27,51,14,22,-33,-30,-127,40,20,-55,-3,-17,-20,50,43,-36,5,-23,-41,-35,-63,-5,-34,-6,51,6,-1,49,-34,-9,83,9,-51,49,40, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant75_scale = { 8, { 0.0027861958369612694, 0.0019473189022392035, 0.0018475920660421252, 0.0020960504189133644, 0.0031234330963343382, 0.0026585904415696859, 0.0022045709192752838, 0.0022850637324154377, } };
const TfArray<8, int> quant75_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[48*1*1*8] = { 
  /* [0][0][][] */ 5,-17,-18,18,127,64,6,-22, 
  /* [1][0][][] */ -24,9,10,-39,48,-127,43,11, 
  /* [2][0][][] */ 33,30,-127,-32,-46,-53,59,72, 
  /* [3][0][][] */ 26,52,-49,11,-15,27,127,28, 
  /* [4][0][][] */ -50,-52,76,-60,17,-60,-127,-36, 
  /* [5][0][][] */ -56,-39,127,-6,29,39,27,-10, 
  /* [6][0][][] */ 20,59,-1,-4,-39,-5,23,-127, 
  /* [7][0][][] */ 32,16,-15,18,62,-127,99,12, 
  /* [8][0][][] */ -8,-31,-64,-71,0,53,-127,-83, 
  /* [9][0][][] */ -24,-127,-36,24,-23,-15,43,-64, 
  /* [10][0][][] */ 6,10,127,6,-35,-3,34,-26, 
  /* [11][0][][] */ -51,32,-31,-32,-46,127,3,-26, 
  /* [12][0][][] */ -127,-9,-6,-2,41,-54,11,-8, 
  /* [13][0][][] */ -30,-55,-17,-127,-1,26,-63,8, 
  /* [14][0][][] */ 2,39,34,2,4,-31,-31,-127, 
  /* [15][0][][] */ 18,127,30,-44,37,4,-49,93, 
  /* [16][0][][] */ -38,-37,127,28,45,51,-73,-63, 
  /* [17][0][][] */ -45,24,-97,-32,-127,-66,43,98, 
  /* [18][0][][] */ -50,-3,-26,-127,56,-50,-27,16, 
  /* [19][0][][] */ -5,17,11,36,-65,127,41,10, 
  /* [20][0][][] */ 80,34,-18,67,-99,127,-19,5, 
  /* [21][0][][] */ 35,19,-19,-1,-67,127,7,2, 
  /* [22][0][][] */ -127,70,-48,-42,-2,34,35,13, 
  /* [23][0][][] */ 31,-17,25,-38,41,-127,-12,-12, 
  /* [24][0][][] */ 8,-8,-3,127,-19,-7,74,-22, 
  /* [25][0][][] */ 16,68,-127,-10,-32,-15,113,17, 
  /* [26][0][][] */ 88,-127,118,6,57,-117,-48,92, 
  /* [27][0][][] */ 28,55,22,127,5,-32,56,-5, 
  /* [28][0][][] */ 12,127,36,-61,50,-1,-60,88, 
  /* [29][0][][] */ -16,-127,-31,-5,-37,8,24,-49, 
  /* [30][0][][] */ 96,20,-78,-34,57,-127,-8,-59, 
  /* [31][0][][] */ 127,-51,24,-2,-10,35,-42,3, 
  /* [32][0][][] */ -4,16,18,-20,-127,-68,-1,23, 
  /* [33][0][][] */ 50,51,-64,40,-88,127,-119,-85, 
  /* [34][0][][] */ -127,42,30,-48,-97,-17,-66,-42, 
  /* [35][0][][] */ -127,46,-69,-39,-121,-89,-6,84, 
  /* [36][0][][] */ -59,-6,-25,51,-37,-44,-127,-9, 
  /* [37][0][][] */ -35,-31,-1,-127,23,8,-71,55, 
  /* [38][0][][] */ 58,3,32,-54,38,42,127,12, 
  /* [39][0][][] */ -127,63,-34,-29,-6,15,50,19, 
  /* [40][0][][] */ 127,13,-4,64,7,-23,56,7, 
  /* [41][0][][] */ -29,-120,122,-10,127,-111,124,41, 
  /* [42][0][][] */ -10,-42,-2,13,-1,37,7,127, 
  /* [43][0][][] */ -127,48,-8,4,55,-11,44,-2, 
  /* [44][0][][] */ -13,12,11,-29,68,-127,73,2, 
  /* [45][0][][] */ -96,65,74,-70,-91,-37,127,25, 
  /* [46][0][][] */ -86,29,3,-55,117,-121,127,-37, 
  /* [47][0][][] */ 28,-13,12,-15,127,28,48,12, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant76_scale = { 48, { 0.0043137180618941784, 0.0026420673821121454, 0.0033662293571978807, 0.004116155207157135, 0.0029182659927755594, 0.0032253304962068796, 0.0038765922654420137, 0.0024551644455641508, 0.0026718094013631344, 0.0034713279455900192, 0.0014408096903935075, 0.003704283619299531, 0.0028940124902874231, 0.003977104090154171, 0.0018714480102062225, 0.0027151112444698811, 0.0030186313670128584, 0.0023618326522409916, 0.002753180917352438, 0.0031626515556126833, 0.0018841357668861747, 0.00075870100408792496, 0.0016887016827240586, 0.00301741948351264, 0.0029388950206339359, 0.0023326266091316938, 0.0017836648039519787, 0.0038179091643542051, 0.0026178385596722364, 0.003142389003187418, 0.0026199484709650278, 0.0026113658677786589, 0.0043154284358024597, 0.0019082092912867665, 0.0017466238932684064, 0.0010245884768664837, 0.0041772443801164627, 0.0027905055321753025, 0.0043274411000311375, 0.0026320489123463631, 0.001917342422530055, 0.00068513111909851432, 0.0030422857962548733, 0.0022259489633142948, 0.0020751270931214094, 0.001249049324542284, 0.00085155386477708817, 0.002625937107950449, } };
const TfArray<48, int> quant76_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[16*1*1*48] = { 
  /* [0][0][][] */ -50,31,-30,35,-93,123,-82,26,-60,14,14,-60,-121,-19,52,-4,-40,1,-3,55,-127,-43,70,16,-62,47,16,-15,-23,13,-26,-47,26,2,-46,47,24,-38,-35,-58,-5,40,65,28,33,-6,32,1, 
  /* [1][0][][] */ 8,-44,41,-13,11,-26,11,29,-62,9,-43,-127,-12,42,-27,-16,11,-66,53,36,25,-98,-7,-21,64,-38,-60,-40,-21,-34,-55,27,9,15,-7,-107,5,76,-8,-3,-19,-68,-8,-52,-13,-76,28,22, 
  /* [2][0][][] */ -8,15,-47,-44,-29,49,32,28,-35,-20,-57,-55,-47,-13,15,19,-7,-17,-12,22,-107,1,33,-8,-26,-28,70,0,26,22,-55,-33,-27,50,-11,7,-19,44,3,-40,-24,70,-127,-7,21,42,-33,2, 
  /* [3][0][][] */ 2,-24,2,-23,30,58,-19,34,0,63,-14,-1,71,-18,-14,-11,14,-20,48,16,23,4,-7,-8,54,40,-63,42,-10,-125,-25,113,-36,3,22,127,-17,24,-19,31,27,81,-59,13,-6,-9,-80,11, 
  /* [4][0][][] */ -16,-12,-31,-9,-13,-61,16,-10,-40,-9,-103,-2,81,43,-28,19,8,7,9,-20,127,68,-18,-49,12,-45,-13,-40,-2,46,2,47,6,-8,-39,16,70,-10,-89,17,-73,-1,44,43,-5,53,-51,0, 
  /* [5][0][][] */ 95,33,59,29,37,-25,37,125,-16,-21,-44,-22,-35,-14,-42,-26,-7,-51,71,-30,-94,10,-34,-50,-6,-8,-13,-1,-58,-36,-15,-49,-75,36,-37,42,41,7,-42,-25,-34,5,4,0,62,127,55,43, 
  /* [6][0][][] */ -36,24,-4,-45,-4,-70,-25,33,49,36,34,9,-26,40,64,-4,-22,55,73,11,-11,34,4,47,66,52,-22,-37,-19,-36,-23,23,66,-36,127,-12,-70,6,94,40,83,-17,-16,42,30,23,1,-21, 
  /* [7][0][][] */ 1,-22,-67,2,-14,-79,9,-39,17,15,-17,-22,-81,-87,-36,-16,127,22,-53,63,70,-55,38,68,-20,-1,59,62,-4,-68,18,-90,60,-31,30,-18,12,-50,7,-38,50,-54,40,22,-26,34,36,-18, 
  /* [8][0][][] */ 107,26,-29,2,-71,-31,-44,20,-26,33,-2,-72,1,22,11,-14,-13,29,-8,41,50,96,-16,-14,9,-39,64,-80,-16,-103,10,3,-127,-31,-19,-37,-53,-19,32,5,-33,6,39,84,4,-98,-19,18, 
  /* [9][0][][] */ -7,-10,-25,38,4,87,-14,30,23,-13,-28,-30,-4,-4,-35,69,-10,17,72,-7,31,-3,2,1,13,56,-73,26,127,117,-4,-4,-39,-62,-23,26,24,6,-17,28,12,-52,-23,36,5,-109,66,-4, 
  /* [10][0][][] */ -1,-19,-32,-31,5,44,-26,-14,26,3,8,-34,-38,48,20,-52,25,3,21,31,44,18,1,30,26,59,31,10,-127,63,-23,26,-23,-20,0,67,-30,22,27,28,53,19,34,-35,-18,-28,-31,5, 
  /* [11][0][][] */ -38,-26,-17,38,-57,-5,27,-43,-15,-7,-5,19,2,127,-51,-45,9,28,-24,17,83,-25,33,20,-106,-24,-21,-91,-47,-46,78,-31,52,-36,-9,23,-7,-64,-6,-48,9,-19,-82,42,-26,-21,17,-18, 
  /* [12][0][][] */ 68,-112,7,-15,-21,62,92,-40,-44,-49,24,-19,-15,54,-47,17,9,-50,-39,51,66,-39,127,32,31,-9,55,-35,-13,-2,-12,28,-74,7,15,27,-4,80,-10,-84,50,22,46,19,-77,43,-114,13, 
  /* [13][0][][] */ 9,6,-20,13,-25,7,-8,-16,3,-19,22,12,6,-86,16,-9,-20,5,-9,-25,19,45,32,7,60,-21,-90,58,-107,116,-2,68,-25,-10,48,-48,10,-19,-7,6,-23,-14,-62,127,6,-8,24,-18, 
  /* [14][0][][] */ -46,-26,18,34,-18,72,12,29,9,-23,-87,-55,56,-59,-37,12,-24,-53,50,-10,78,20,-23,-26,27,-23,-14,66,10,37,-10,1,16,2,-27,77,-127,2,118,-1,-30,-18,46,-2,-6,78,-22,31, 
  /* [15][0][][] */ -21,43,123,-28,24,-4,66,31,37,1,59,-24,-84,-40,-24,-8,-41,-12,9,56,-15,127,4,32,8,-14,71,34,-8,-33,-4,-11,62,-25,31,-38,33,-9,-11,28,50,-15,-47,-16,33,10,12,-14, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant77_scale = { 16, { 0.0081492876634001732, 0.011154201813042164, 0.010242808610200882, 0.0088775902986526489, 0.0083166947588324547, 0.013477196916937828, 0.011283054016530514, 0.0086364932358264923, 0.0060396213084459305, 0.0083014555275440216, 0.0095690386369824409, 0.0091645987704396248, 0.0086370548233389854, 0.00797272939234972, 0.0079582687467336655, 0.0075195371173322201, } };
const TfArray<16, int> quant77_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const ALIGN(8) int8_t tensor_data78[1280*1*1*16] = { 
  /* [0][0][][] */ -6,-82,55,-112,127,48,21,81,18,-68,20,-58,6,-45,-18,-71, 
  /* [1][0][][] */ -44,67,-60,90,11,-42,-36,102,125,75,-45,-78,20,-55,12,127, 
  /* [2][0][][] */ 51,-30,86,-79,-10,-29,52,127,9,8,64,-98,47,-62,-115,-104, 
  /* [3][0][][] */ 79,-61,104,-32,62,-28,65,114,-77,-27,-127,14,-29,14,92,-3, 
  /* [4][0][][] */ 76,127,125,32,-4,-43,62,22,-14,55,-61,38,-59,84,32,66, 
  /* [5][0][][] */ 27,95,52,72,48,54,121,-76,-32,127,-56,113,93,-72,5,-41, 
  /* [6][0][][] */ 11,-36,-74,24,127,13,-31,-124,53,-24,-14,-4,-71,42,-96,32, 
  /* [7][0][][] */ 46,85,34,-18,116,127,76,23,-106,20,44,23,-55,-76,-32,-112, 
  /* [8][0][][] */ 95,53,69,96,-55,16,-127,44,74,-32,65,28,63,-25,8,32, 
  /* [9][0][][] */ 20,9,-63,-56,127,91,-19,-87,-110,-25,55,-57,-1,-111,-79,92, 
  /* [10][0][][] */ -6,96,-118,47,34,69,127,-25,-31,-48,24,0,19,3,-78,-71, 
  /* [11][0][][] */ 57,-36,79,-96,127,18,71,-84,-49,113,-88,-70,37,-33,30,-43, 
  /* [12][0][][] */ 93,40,127,-24,-24,7,27,-35,-48,35,-21,35,-62,18,-10,31, 
  /* [13][0][][] */ 1,14,37,-28,45,-51,-57,21,-36,-16,26,-15,-15,127,54,-30, 
  /* [14][0][][] */ 25,-23,-76,-121,-127,-109,-65,-121,39,-37,-88,62,-39,-22,71,-33, 
  /* [15][0][][] */ 11,-46,23,-40,33,3,-74,-41,67,-13,44,-52,-127,8,-54,62, 
  /* [16][0][][] */ 24,41,62,-10,72,-22,-34,4,-44,127,10,66,41,-7,-31,-15, 
  /* [17][0][][] */ -25,-68,13,42,-99,-68,48,-43,-97,-52,-48,-16,-127,116,-4,-101, 
  /* [18][0][][] */ 127,-15,19,13,0,-81,-97,84,49,61,-117,-20,18,111,28,0, 
  /* [19][0][][] */ -36,-35,-104,16,23,-73,50,-127,-118,-4,1,-26,-14,14,111,-80, 
  /* [20][0][][] */ -53,-127,-73,-30,9,-74,-13,16,21,15,-58,61,55,57,50,-43, 
  /* [21][0][][] */ 54,0,7,67,18,14,71,-127,-71,67,2,8,17,2,-27,88, 
  /* [22][0][][] */ -66,5,104,116,-65,-36,69,81,46,16,-17,127,-60,1,-73,17, 
  /* [23][0][][] */ -34,28,10,-26,-38,33,-19,-35,12,-26,-4,106,49,9,-90,-127, 
  /* [24][0][][] */ -54,40,1,-4,-127,-27,-56,-89,24,67,-15,20,-9,17,47,38, 
  /* [25][0][][] */ -116,-12,-4,82,-19,4,56,-45,-38,6,-115,101,4,127,91,13, 
  /* [26][0][][] */ -29,-79,-127,115,-99,-30,-32,112,-126,6,-17,-44,80,-53,-53,38, 
  /* [27][0][][] */ -127,-22,82,-43,85,85,50,4,-80,51,120,34,26,64,-95,-6, 
  /* [28][0][][] */ 26,-19,92,-127,41,-11,12,52,2,2,-9,-78,8,-61,-107,13, 
  /* [29][0][][] */ -15,-26,73,7,68,71,46,-45,1,-23,-66,-26,-11,127,59,-20, 
  /* [30][0][][] */ 48,127,60,-22,-14,-43,-1,-47,56,18,26,12,-12,-56,47,-105, 
  /* [31][0][][] */ 54,86,14,-127,90,-38,-1,46,-51,-21,-20,44,-65,24,43,37, 
  /* [32][0][][] */ 68,28,24,-43,11,-57,-21,95,40,-43,111,87,41,-53,-127,64, 
  /* [33][0][][] */ 81,-76,37,9,3,29,40,14,127,61,-10,5,-100,-72,53,11, 
  /* [34][0][][] */ -24,29,39,18,-127,-35,30,-55,-12,46,-6,60,20,18,-6,56, 
  /* [35][0][][] */ -127,32,-46,-21,-53,56,29,7,-79,10,53,-35,-42,-117,-60,13, 
  /* [36][0][][] */ 22,110,-38,127,14,-8,-9,14,37,-27,-40,-4,-27,30,-66,1, 
  /* [37][0][][] */ -97,-10,21,57,53,87,-81,-120,70,-107,-26,127,46,47,-37,30, 
  /* [38][0][][] */ -35,-21,28,2,67,-14,-39,41,3,105,-127,-78,21,-68,17,-22, 
  /* [39][0][][] */ -19,-57,99,-44,-127,14,7,-19,-13,-51,76,4,95,-55,-23,55, 
  /* [40][0][][] */ -109,-112,7,4,-40,68,-19,-62,-94,-6,-79,-127,-37,45,-31,-51, 
  /* [41][0][][] */ -67,-4,127,-50,22,95,53,65,16,63,-40,60,-70,9,20,-59, 
  /* [42][0][][] */ -64,-52,36,37,6,103,36,89,41,-1,29,49,-33,-43,-92,-127, 
  /* [43][0][][] */ 57,75,127,-22,18,39,-16,-7,30,78,75,46,38,-68,41,13, 
  /* [44][0][][] */ 61,36,90,-22,32,-29,14,3,42,-127,98,25,77,62,-55,-44, 
  /* [45][0][][] */ 23,5,-24,6,26,-76,32,-2,22,37,-11,23,80,-27,127,-33, 
  /* [46][0][][] */ -13,-5,-23,-16,-14,-42,-35,-127,17,9,-11,18,-67,8,-18,-54, 
  /* [47][0][][] */ -127,83,-69,-21,-55,-68,12,16,22,21,-93,-47,16,-77,-40,12, 
  /* [48][0][][] */ 22,59,-56,-49,25,44,-123,15,17,-18,61,-21,-96,-127,26,-10, 
  /* [49][0][][] */ -65,-74,-58,-60,54,-36,-127,122,-35,-48,62,65,-66,4,-46,63, 
  /* [50][0][][] */ 78,-22,-20,17,-127,6,-7,27,65,9,-37,65,25,-82,8,14, 
  /* [51][0][][] */ 11,22,2,82,-37,55,-18,-30,-31,-15,9,82,-50,-116,127,56, 
  /* [52][0][][] */ 127,-67,10,64,-47,45,27,72,22,-110,123,92,-16,45,-33,25, 
  /* [53][0][][] */ -73,87,117,52,-115,117,99,-17,51,-88,66,127,-38,64,-66,13, 
  /* [54][0][][] */ 25,28,80,-87,5,112,11,-31,60,0,2,-47,-61,75,96,127, 
  /* [55][0][][] */ 69,-21,-59,-64,18,35,-127,41,38,-72,-10,17,53,-36,91,-1, 
  /* [56][0][][] */ 45,-86,-59,-11,-120,14,-62,26,-8,35,-60,-55,92,89,-52,-127, 
  /* [57][0][][] */ 127,-91,52,22,100,79,34,127,72,117,-92,-19,97,25,-55,-66, 
  /* [58][0][][] */ 53,111,-127,21,-86,-32,-62,-5,-36,64,-87,86,-13,97,24,42, 
  /* [59][0][][] */ 23,-21,94,-15,63,-18,1,-127,-67,-63,41,-17,67,-84,-30,46, 
  /* [60][0][][] */ -57,-1,-34,-29,1,79,50,-41,22,-28,127,-43,-12,-48,-17,57, 
  /* [61][0][][] */ -49,-8,-1,-23,-35,5,44,-33,-32,-101,56,38,26,127,31,-23, 
  /* [62][0][][] */ -17,-39,-29,-56,-41,6,127,-28,-102,-35,-1,-60,79,-75,86,-40, 
  /* [63][0][][] */ -80,50,-31,13,68,-110,-26,78,14,59,127,56,-125,10,57,10, 
  /* [64][0][][] */ -58,30,29,-21,83,45,-32,-8,-127,8,-37,1,-38,-79,68,-23, 
  /* [65][0][][] */ -109,-87,42,26,-16,-5,-97,64,-15,30,53,120,71,79,-75,127, 
  /* [66][0][][] */ 23,-68,-19,127,-23,-12,-12,0,-67,66,67,-27,111,-53,67,49, 
  /* [67][0][][] */ -18,14,-15,-54,-127,31,-31,-77,-74,43,-19,98,45,62,18,-26, 
  /* [68][0][][] */ 79,-57,108,119,88,2,-21,29,102,-106,36,23,107,-127,13,19, 
  /* [69][0][][] */ -54,106,-82,10,-93,-43,-83,-74,127,-64,-41,37,99,91,-40,105, 
  /* [70][0][][] */ 19,3,28,45,6,45,-15,37,-48,-127,105,5,61,30,53,27, 
  /* [71][0][][] */ -52,6,13,-43,11,15,52,25,-127,-66,-43,42,6,-41,57,-121, 
  /* [72][0][][] */ -14,127,-5,8,41,-29,-37,43,9,41,-7,64,12,8,51,13, 
  /* [73][0][][] */ 127,71,-35,70,-16,-65,-23,-82,6,18,70,-9,90,-50,104,-83, 
  /* [74][0][][] */ 72,-26,58,106,19,114,-13,-9,34,127,19,33,-3,19,70,-9, 
  /* [75][0][][] */ 105,53,-5,44,45,-94,23,10,25,-113,24,48,-127,33,5,-32, 
  /* [76][0][][] */ -40,85,30,-6,14,9,8,-21,127,118,61,-44,-13,31,66,36, 
  /* [77][0][][] */ -127,9,27,-31,-2,10,38,96,2,44,14,79,0,3,-75,21, 
  /* [78][0][][] */ 29,-34,20,10,-4,51,52,56,-49,46,127,-89,44,-57,-80,56, 
  /* [79][0][][] */ -69,-69,-46,16,-39,30,10,-28,-127,-91,-37,-83,14,-72,-10,-32, 
  /* [80][0][][] */ 32,-51,32,41,-32,-67,-127,43,-6,-124,28,76,-72,-26,19,31, 
  /* [81][0][][] */ -103,26,-21,-2,-32,-10,-114,-29,127,-81,35,-125,75,11,-38,-88, 
  /* [82][0][][] */ -73,6,43,43,76,-22,-1,52,18,91,23,73,86,93,-45,127, 
  /* [83][0][][] */ -59,105,-58,-118,-104,-105,56,-33,-84,77,-127,22,0,79,-63,69, 
  /* [84][0][][] */ -10,-41,-67,-24,81,68,15,-31,-21,127,58,-8,-90,-87,-5,-45, 
  /* [85][0][][] */ -6,-32,24,31,-42,-46,-69,26,85,0,-127,-2,-34,76,87,42, 
  /* [86][0][][] */ -51,48,127,24,30,-40,-125,115,33,-28,9,125,-2,7,39,73, 
  /* [87][0][][] */ -127,-90,-26,83,71,-8,-23,-88,-48,78,-37,-2,97,19,67,-101, 
  /* [88][0][][] */ -94,32,-41,41,-127,-46,-49,-56,-43,81,10,69,41,-88,20,-13, 
  /* [89][0][][] */ 46,1,-20,48,10,-38,26,8,-61,91,-127,18,101,50,31,56, 
  /* [90][0][][] */ 0,-23,56,-63,71,-22,68,127,-114,27,-14,33,14,-41,-83,-38, 
  /* [91][0][][] */ -7,33,6,-26,-80,15,-36,-49,48,-12,-30,26,40,73,39,-127, 
  /* [92][0][][] */ 78,46,-127,13,13,2,-29,-39,56,-93,6,-16,-20,-83,-22,43, 
  /* [93][0][][] */ -36,-60,-118,-40,35,35,11,12,56,-4,45,-127,-57,-14,-16,-77, 
  /* [94][0][][] */ -83,-10,-34,-13,0,67,75,-127,-67,-24,22,98,20,21,-99,-66, 
  /* [95][0][][] */ 41,7,0,55,-116,61,-4,59,-41,-69,-61,31,-29,58,89,-127, 
  /* [96][0][][] */ 58,-55,-54,-47,28,21,127,-26,112,-74,-24,-115,-7,-3,-33,-101, 
  /* [97][0][][] */ 32,28,68,-29,0,-24,-82,-127,60,58,44,122,7,-47,75,105, 
  /* [98][0][][] */ 52,-33,90,35,61,51,24,66,-21,-42,67,-82,124,-54,-1,-127, 
  /* [99][0][][] */ -51,-24,-3,-51,77,12,-47,23,13,-49,22,-62,-127,-16,-30,-11, 
  /* [100][0][][] */ 107,-2,115,64,111,119,-42,-77,-14,-80,13,-58,-63,-39,-40,-127, 
  /* [101][0][][] */ -48,14,44,-3,14,-23,-45,-32,-22,16,32,87,41,-64,-42,127, 
  /* [102][0][][] */ -54,-9,6,-94,-38,-25,95,-32,-21,-69,-2,11,-36,-127,-15,-10, 
  /* [103][0][][] */ -32,-70,-127,75,-49,6,-45,-28,-19,-71,-56,13,-17,8,-107,-88, 
  /* [104][0][][] */ -40,42,-50,96,47,-61,127,-79,-20,118,97,-71,7,-27,-21,95, 
  /* [105][0][][] */ -27,-2,-108,-113,-73,-38,-29,4,111,-43,-127,-2,-15,56,-37,-36, 
  /* [106][0][][] */ 79,-10,24,-9,2,18,127,82,-10,53,-61,79,26,103,64,-51, 
  /* [107][0][][] */ 21,47,-23,51,70,-18,-28,-3,-27,-2,54,-127,-20,-13,-38,-24, 
  /* [108][0][][] */ 113,-90,-74,41,94,-13,-60,-76,118,21,-62,57,-50,-21,-34,127, 
  /* [109][0][][] */ 127,-81,-26,117,74,73,-49,-20,-44,19,98,-62,46,-53,28,-90, 
  /* [110][0][][] */ 38,49,32,-5,-38,44,79,-17,58,-73,-28,127,-15,-122,-46,-15, 
  /* [111][0][][] */ -26,-13,-4,22,-46,86,27,22,127,-10,3,-27,71,5,52,-48, 
  /* [112][0][][] */ -15,-127,-5,7,85,-48,12,34,-122,-48,70,26,-20,-26,-18,62, 
  /* [113][0][][] */ -8,-66,127,-40,48,50,35,27,-29,42,28,21,-18,19,-3,-65, 
  /* [114][0][][] */ -66,43,-127,96,27,-36,-57,-56,-32,9,-24,89,-30,41,-12,-114, 
  /* [115][0][][] */ -83,84,51,111,12,-27,-112,70,-29,127,-91,-85,-58,40,89,29, 
  /* [116][0][][] */ 64,-127,-73,126,-83,94,80,12,86,-67,-97,34,12,-16,-55,20, 
  /* [117][0][][] */ 34,26,-63,68,41,127,-47,17,90,-122,40,26,10,40,-90,-12, 
  /* [118][0][][] */ 107,40,21,-78,90,65,65,17,92,-17,127,4,-77,-28,-24,-96, 
  /* [119][0][][] */ 84,46,27,5,107,86,25,38,76,4,-58,-75,23,3,-16,-127, 
  /* [120][0][][] */ 47,65,28,49,127,-16,119,72,-1,11,25,-23,-36,-21,26,-11, 
  /* [121][0][][] */ 35,48,86,47,-20,59,10,7,6,-43,4,127,6,27,-19,11, 
  /* [122][0][][] */ -112,-41,15,-37,-127,75,22,11,50,22,41,16,34,38,-8,-89, 
  /* [123][0][][] */ -41,37,-25,-7,-112,59,-127,-56,37,8,-8,-5,10,-4,75,82, 
  /* [124][0][][] */ -2,67,-68,8,-1,13,-90,59,19,-41,-99,-101,85,-10,127,-8, 
  /* [125][0][][] */ -103,14,-24,-6,10,1,-36,-72,-83,-41,24,127,-33,5,-46,61, 
  /* [126][0][][] */ -65,-9,-28,4,3,16,4,-35,-39,-11,16,-18,46,127,18,-7, 
  /* [127][0][][] */ 5,50,-52,-88,85,34,-116,-23,-47,-127,-38,-8,-13,10,76,46, 
  /* [128][0][][] */ -21,60,65,15,-81,44,127,42,65,46,-58,50,60,35,-101,53, 
  /* [129][0][][] */ 127,39,29,8,-94,40,-3,-104,-38,-35,-45,78,-1,86,23,-15, 
  /* [130][0][][] */ 56,74,51,-98,-50,65,-127,-32,113,68,22,-112,66,-126,109,7, 
  /* [131][0][][] */ -42,-35,-90,-103,23,40,-36,-127,49,-42,-1,78,-38,-2,-36,-53, 
  /* [132][0][][] */ -50,60,31,-97,1,79,19,-46,1,-37,116,-35,61,62,22,-127, 
  /* [133][0][][] */ -80,4,127,-45,-23,9,-73,-51,-104,76,116,25,-30,101,-32,67, 
  /* [134][0][][] */ -44,-12,32,-26,-127,-48,11,23,38,-33,41,72,-125,20,55,43, 
  /* [135][0][][] */ -40,31,-127,-5,97,-2,66,-31,75,-29,-41,-22,-37,-52,-54,-19, 
  /* [136][0][][] */ -7,36,-3,8,-7,-40,-8,-87,-30,44,-65,-38,53,-127,13,5, 
  /* [137][0][][] */ 5,5,36,119,-19,-51,62,127,-5,-31,16,28,-17,106,-9,6, 
  /* [138][0][][] */ -127,-35,-98,-14,103,-34,-27,-55,-55,-22,-73,-9,-9,-15,6,44, 
  /* [139][0][][] */ -64,-33,-64,-110,-99,-32,-37,-7,22,13,42,-82,45,-72,-127,0, 
  /* [140][0][][] */ -1,-18,-100,89,-113,15,-80,-67,127,13,22,-3,80,4,96,-13, 
  /* [141][0][][] */ -8,-20,-3,-39,22,38,-28,-60,38,14,127,-31,-24,-89,-67,65, 
  /* [142][0][][] */ 39,-15,-127,-9,17,-11,41,-17,96,95,81,-110,-22,-34,90,-14, 
  /* [143][0][][] */ -32,-17,41,-6,-1,23,-52,4,21,64,110,-36,8,-82,17,-127, 
  /* [144][0][][] */ -34,35,-112,24,-23,82,34,39,-127,-28,68,61,41,29,-59,-64, 
  /* [145][0][][] */ 50,8,67,48,32,-8,13,-35,18,22,44,17,-81,127,-115,92, 
  /* [146][0][][] */ -113,-127,86,-112,0,60,-57,-108,93,-19,88,88,-80,-19,-4,-11, 
  /* [147][0][][] */ -20,127,18,-56,51,54,-33,50,-42,74,-45,69,-7,37,-24,67, 
  /* [148][0][][] */ 36,-7,29,12,-1,-86,-8,11,10,85,-127,-38,-29,-85,45,-25, 
  /* [149][0][][] */ -28,7,3,127,-23,16,59,-41,1,7,40,-63,126,-20,-31,-115, 
  /* [150][0][][] */ 80,-33,51,-14,75,-75,-27,11,127,-16,62,54,41,-26,3,21, 
  /* [151][0][][] */ 106,-54,-40,-54,4,-126,-65,-72,66,-5,-14,80,-81,-72,79,-127, 
  /* [152][0][][] */ -51,21,62,-87,-92,10,54,67,127,33,-21,25,-53,68,-14,-10, 
  /* [153][0][][] */ -46,-5,93,-37,79,81,51,25,-37,-55,79,127,-33,56,17,-24, 
  /* [154][0][][] */ 14,101,-74,-72,-83,17,36,-75,127,83,-59,-27,-98,-48,83,80, 
  /* [155][0][][] */ -53,-25,-6,-46,32,-20,-127,35,59,20,-11,-16,-29,-4,8,-38, 
  /* [156][0][][] */ 8,-51,-53,-15,41,-70,-19,10,-127,36,94,-30,85,64,11,-52, 
  /* [157][0][][] */ -70,-77,27,127,39,-22,10,-12,-100,99,57,-3,-38,-93,50,-67, 
  /* [158][0][][] */ -117,15,79,-66,103,-21,50,-99,-41,-40,6,-73,94,-127,-8,-122, 
  /* [159][0][][] */ 13,-18,35,-79,59,30,-47,9,76,27,84,-33,37,-82,28,127, 
  /* [160][0][][] */ 44,-47,122,-34,-23,-52,31,-108,92,127,-84,20,27,-118,-53,62, 
  /* [161][0][][] */ 96,-79,-122,21,-68,-45,98,8,-4,0,-63,-127,87,39,-19,-5, 
  /* [162][0][][] */ 23,35,68,10,36,-45,-7,-1,1,-15,-11,127,-16,54,71,36, 
  /* [163][0][][] */ 55,-25,-52,-121,34,-47,127,-76,4,-30,73,-9,-63,-6,-62,-102, 
  /* [164][0][][] */ 67,-67,51,-127,-2,-81,-107,98,37,65,107,11,-22,-80,-106,82, 
  /* [165][0][][] */ -7,54,25,-52,-1,2,57,4,8,-42,-127,-37,8,5,-24,40, 
  /* [166][0][][] */ 21,100,-46,97,23,-122,38,65,41,32,47,53,116,11,127,105, 
  /* [167][0][][] */ -33,-12,-36,62,91,65,8,-6,6,109,100,23,29,-44,-127,84, 
  /* [168][0][][] */ 8,18,12,-13,127,-36,20,10,15,-52,-19,13,-7,-27,-17,-9, 
  /* [169][0][][] */ -3,-55,9,-51,-108,127,-15,-25,-1,-53,47,-90,9,-73,-14,-18, 
  /* [170][0][][] */ 9,-37,82,127,45,-11,11,-52,15,-35,55,-26,52,-65,26,-65, 
  /* [171][0][][] */ -27,-18,4,-35,32,53,-122,-111,74,37,-30,27,109,127,47,-10, 
  /* [172][0][][] */ 91,-16,64,-43,55,127,-4,-9,-28,31,20,67,16,25,0,-8, 
  /* [173][0][][] */ 8,-39,-27,73,-10,-27,119,3,-38,127,120,42,-73,-62,34,75, 
  /* [174][0][][] */ 49,57,79,-1,-20,49,-7,127,37,75,-17,-67,-31,-103,-11,22, 
  /* [175][0][][] */ -28,37,-7,-52,114,34,-35,-67,-100,3,30,125,-127,-61,-65,-36, 
  /* [176][0][][] */ 100,57,-59,103,-11,33,110,-62,55,-84,-17,-58,-24,-43,-54,-127, 
  /* [177][0][][] */ 78,-62,-115,65,45,-34,-51,-68,42,2,-24,127,-70,31,-121,-5, 
  /* [178][0][][] */ -26,-9,18,-27,-73,-127,51,40,59,-121,-42,51,98,5,-24,-81, 
  /* [179][0][][] */ -43,27,48,-27,-25,59,-39,-50,66,55,8,-5,46,8,3,-127, 
  /* [180][0][][] */ 80,42,93,-31,54,3,-121,78,80,-19,8,-46,-92,28,39,-127, 
  /* [181][0][][] */ 59,81,-13,-48,8,-72,-72,-17,56,127,78,-90,17,-33,20,35, 
  /* [182][0][][] */ 42,-50,43,48,127,51,-51,-40,-84,-61,-3,38,13,-71,-18,-70, 
  /* [183][0][][] */ 8,1,127,36,42,97,-43,-54,-48,-6,-19,73,-1,-49,-4,-76, 
  /* [184][0][][] */ 18,-28,117,-83,94,22,127,60,16,27,3,33,-124,51,-49,-25, 
  /* [185][0][][] */ 23,-10,-44,-10,39,37,58,3,25,127,20,32,-24,-17,22,-112, 
  /* [186][0][][] */ 43,127,20,15,16,16,-88,-25,-51,-35,-4,31,96,-99,27,-63, 
  /* [187][0][][] */ 69,-35,113,-1,-72,127,61,58,-68,9,-62,47,-94,31,28,16, 
  /* [188][0][][] */ 107,1,-113,16,42,-104,93,2,53,36,54,93,127,1,-26,4, 
  /* [189][0][][] */ -89,127,105,27,-75,-20,91,-63,70,-6,25,-30,-57,-55,32,6, 
  /* [190][0][][] */ -57,41,11,10,-51,-83,127,114,-37,-74,-34,60,-87,18,66,-37, 
  /* [191][0][][] */ 43,40,-42,4,86,-33,31,24,-127,-7,-30,31,-37,-1,15,121, 
  /* [192][0][][] */ 22,-41,-79,10,-73,16,29,-127,35,21,-41,37,30,4,26,6, 
  /* [193][0][][] */ 116,63,-5,89,89,49,77,-32,99,127,-107,92,10,-87,-91,60, 
  /* [194][0][][] */ -125,7,-127,47,-82,-54,17,24,-83,-55,50,-54,31,-97,-10,-28, 
  /* [195][0][][] */ -127,34,-2,43,37,70,16,-36,-79,124,-13,-110,-73,57,-9,-20, 
  /* [196][0][][] */ -46,-68,-16,102,-20,-11,-7,46,14,-29,-35,53,-17,66,-127,22, 
  /* [197][0][][] */ 39,89,91,-70,39,-64,-38,78,27,-39,59,77,-45,-127,107,80, 
  /* [198][0][][] */ -78,-23,-81,39,16,42,-50,29,-55,-16,-13,41,19,-61,-127,-18, 
  /* [199][0][][] */ -49,21,-29,2,-12,43,-127,-27,-27,-101,102,14,-52,-25,-39,-17, 
  /* [200][0][][] */ -100,-26,-14,10,27,28,-127,65,-75,18,-13,-52,39,70,12,-21, 
  /* [201][0][][] */ -127,-32,-60,55,-26,-26,53,-10,-37,56,49,-40,-24,-3,-93,-1, 
  /* [202][0][][] */ -127,12,21,113,62,-38,18,90,-39,-62,-50,90,-82,101,60,46, 
  /* [203][0][][] */ 66,-127,4,-58,-13,90,21,-19,-37,-68,-6,-82,-3,0,3,43, 
  /* [204][0][][] */ 23,-7,-27,82,119,-28,-37,-45,-127,-84,56,-40,-12,-21,-106,6, 
  /* [205][0][][] */ -27,-127,115,-123,-89,74,56,-73,-61,-49,-22,-18,-13,-39,-12,-80, 
  /* [206][0][][] */ -38,-42,51,72,-12,24,86,-2,-7,-60,35,-75,-40,-70,127,51, 
  /* [207][0][][] */ -79,-12,-72,0,-8,-77,17,34,-6,-94,14,-3,-60,25,38,127, 
  /* [208][0][][] */ 63,60,-77,42,-98,38,-54,56,127,104,-52,67,99,-82,16,-63, 
  /* [209][0][][] */ 127,66,26,-83,-47,-44,48,4,-41,15,37,-21,72,93,-23,40, 
  /* [210][0][][] */ -23,16,2,35,127,89,45,67,-110,34,-68,-92,22,-23,-125,-75, 
  /* [211][0][][] */ -19,-70,40,-14,-111,123,-11,72,63,-127,-87,40,-98,-47,-91,-52, 
  /* [212][0][][] */ -15,-23,-26,-37,-100,-21,-20,25,-5,24,-3,-10,127,50,-8,7, 
  /* [213][0][][] */ -19,-37,40,-42,65,-62,-82,27,29,127,-52,-12,23,-79,78,79, 
  /* [214][0][][] */ -27,104,9,49,-107,9,26,37,-75,-91,109,119,14,-81,127,-18, 
  /* [215][0][][] */ 20,14,29,67,47,57,-50,-71,-32,60,-53,-7,47,53,-127,-22, 
  /* [216][0][][] */ -31,15,50,127,14,106,5,-52,-6,3,-99,99,-55,-28,-99,-13, 
  /* [217][0][][] */ 64,18,112,35,-38,-56,46,-114,-81,-4,-31,-68,74,-99,38,127, 
  /* [218][0][][] */ -116,34,-40,-60,-81,-42,-127,-47,-11,12,95,-13,16,-49,11,80, 
  /* [219][0][][] */ 61,48,-23,118,-31,61,37,6,74,-116,24,4,-45,-33,-127,21, 
  /* [220][0][][] */ 1,-33,-17,60,-11,-29,40,44,127,29,-29,7,-27,85,29,-27, 
  /* [221][0][][] */ 9,34,-26,-34,-15,-2,5,-55,40,14,-43,38,35,-127,-30,-37, 
  /* [222][0][][] */ 95,24,-21,-13,-111,-45,29,-127,70,43,-6,52,59,68,49,-44, 
  /* [223][0][][] */ 47,-127,31,-38,-110,-41,60,46,-24,-48,18,-42,-64,65,-115,-109, 
  /* [224][0][][] */ 16,26,17,-59,79,-29,-42,63,-38,-56,-70,78,-10,-30,11,127, 
  /* [225][0][][] */ -20,33,31,24,127,13,-32,0,64,49,-49,6,-29,108,-22,48, 
  /* [226][0][][] */ -1,-45,-105,25,-34,127,-13,-54,-47,11,-90,-86,-93,-54,-107,-31, 
  /* [227][0][][] */ 112,-8,18,-11,66,-68,53,-8,-127,59,-34,16,-53,-34,35,46, 
  /* [228][0][][] */ -32,-45,32,47,127,65,79,1,-95,50,45,127,-58,-59,29,-5, 
  /* [229][0][][] */ 119,-122,-112,14,18,-5,-63,-117,-4,-68,30,52,127,-89,63,6, 
  /* [230][0][][] */ 2,43,45,24,-8,4,1,-33,-127,41,-65,28,-11,-25,-53,-30, 
  /* [231][0][][] */ 1,6,50,57,-90,127,83,25,-18,-36,4,-61,118,-6,-5,44, 
  /* [232][0][][] */ 127,-38,30,-6,3,45,-75,-93,-6,-10,77,-44,-69,-100,-8,40, 
  /* [233][0][][] */ 14,-116,41,-64,-127,47,-61,-36,-16,25,36,81,51,-10,-11,52, 
  /* [234][0][][] */ -11,-3,85,69,104,-20,-14,-52,127,-85,-38,-56,29,38,-92,14, 
  /* [235][0][][] */ 103,-22,30,37,25,-1,-64,0,-101,25,30,74,55,2,-21,127, 
  /* [236][0][][] */ -7,-2,91,45,-16,-12,-43,-25,122,11,31,-111,106,-32,-127,-34, 
  /* [237][0][][] */ 43,24,50,66,37,19,32,22,91,65,-112,49,-7,127,57,-49, 
  /* [238][0][][] */ -5,-67,28,-127,-11,-84,-71,40,13,-46,23,29,-5,15,107,19, 
  /* [239][0][][] */ -72,20,-15,56,29,-17,-43,-75,38,-50,127,47,-118,58,1,68, 
  /* [240][0][][] */ 25,45,-28,-45,112,18,-39,-127,-12,40,-29,93,79,38,-78,0, 
  /* [241][0][][] */ 81,41,16,33,127,12,-10,-5,46,42,67,-19,23,32,0,33, 
  /* [242][0][][] */ -124,3,54,6,33,-127,126,81,-43,29,7,-39,18,-52,63,90, 
  /* [243][0][][] */ -16,59,-28,54,60,-3,61,127,-116,-74,-32,-91,42,-87,-50,-78, 
  /* [244][0][][] */ 49,-70,-7,-4,-39,-42,85,94,77,-2,17,24,18,11,-84,127, 
  /* [245][0][][] */ -39,-37,-43,-32,24,-1,77,18,-93,-127,-15,-19,-13,-4,35,-50, 
  /* [246][0][][] */ 67,30,-52,-121,105,-43,27,-62,127,-8,-26,39,-69,18,-63,-41, 
  /* [247][0][][] */ 51,-28,60,-69,118,-39,-127,-14,81,65,78,-47,-71,38,9,0, 
  /* [248][0][][] */ 89,-15,-72,-62,-127,54,49,-83,103,16,0,-36,33,26,-121,56, 
  /* [249][0][][] */ 127,9,74,-31,-46,-21,19,28,58,-20,28,13,-81,45,5,-27, 
  /* [250][0][][] */ 109,-16,-47,63,-63,-22,2,27,82,114,-82,62,94,127,-84,17, 
  /* [251][0][][] */ -16,18,113,-12,103,58,-1,81,-127,-13,-1,0,-50,114,-11,-119, 
  /* [252][0][][] */ 34,-11,-24,127,19,43,-21,31,105,-40,30,60,-43,-43,-49,58, 
  /* [253][0][][] */ -18,15,-47,-10,-5,10,37,-27,42,51,56,-5,-28,0,-127,-14, 
  /* [254][0][][] */ -20,34,-64,20,83,-56,82,32,-112,-127,-93,-37,26,79,20,23, 
  /* [255][0][][] */ 37,17,-26,-11,48,32,24,-30,40,-69,127,25,-8,49,-83,7, 
  /* [256][0][][] */ 13,22,21,8,-71,3,-127,-20,58,-30,-2,41,0,26,97,91, 
  /* [257][0][][] */ 101,6,13,-105,-27,116,70,-127,13,-67,82,70,40,72,-71,-125, 
  /* [258][0][][] */ -11,-77,19,11,61,28,-22,-78,127,1,80,46,-69,-41,38,108, 
  /* [259][0][][] */ -5,15,-80,-53,63,40,93,-95,71,7,-91,-63,-127,8,42,35, 
  /* [260][0][][] */ 96,-116,-120,15,16,117,105,84,-99,64,127,70,5,53,-122,127, 
  /* [261][0][][] */ 95,2,-57,59,1,-8,55,-15,98,-127,-76,0,-87,-120,-60,-18, 
  /* [262][0][][] */ 31,74,2,-6,-70,-74,-47,127,103,-24,-12,-1,64,46,-33,-122, 
  /* [263][0][][] */ -37,22,-22,24,26,-5,-11,23,10,22,-74,-7,5,-127,0,-1, 
  /* [264][0][][] */ 37,8,-127,31,-64,4,61,69,87,-61,79,-104,32,38,28,89, 
  /* [265][0][][] */ -34,40,51,-86,44,98,17,12,19,102,102,-68,-51,-54,63,127, 
  /* [266][0][][] */ -115,-85,-72,-50,-72,-67,-127,-19,-20,-27,-39,-1,-9,-72,117,50, 
  /* [267][0][][] */ -48,32,24,34,62,8,7,0,-15,20,-127,24,45,-81,64,-70, 
  /* [268][0][][] */ 30,-7,4,-14,-11,-17,10,22,89,-127,-48,20,-34,26,-16,-4, 
  /* [269][0][][] */ -24,63,20,27,116,11,-14,105,97,27,127,69,27,-41,7,48, 
  /* [270][0][][] */ -45,52,-53,26,39,79,-22,-24,77,-127,9,-5,-91,-17,-16,-39, 
  /* [271][0][][] */ -44,71,56,-30,106,25,0,-99,-9,-1,22,-127,-30,-22,35,-6, 
  /* [272][0][][] */ -10,-46,37,14,-25,-76,-110,19,127,4,-88,-36,66,0,1,-92, 
  /* [273][0][][] */ -18,-15,95,-77,1,127,69,-63,58,67,-33,-63,-4,-23,-117,105, 
  /* [274][0][][] */ -29,-11,44,-17,-27,116,48,70,19,-127,49,8,5,10,-82,8, 
  /* [275][0][][] */ 42,24,-113,-20,-14,76,-66,82,-33,-20,54,-80,127,-76,-29,51, 
  /* [276][0][][] */ -42,122,-44,51,27,32,-94,41,-14,-127,46,13,-54,-10,51,4, 
  /* [277][0][][] */ 68,-21,-65,64,32,52,35,14,127,-19,-22,-73,-6,-45,8,72, 
  /* [278][0][][] */ 10,39,-54,48,-3,-33,-65,-127,-75,-14,-15,-23,15,22,-1,87, 
  /* [279][0][][] */ -19,30,47,28,12,-31,67,-27,127,10,68,-119,11,0,-6,-29, 
  /* [280][0][][] */ 91,-39,-115,10,17,71,63,-17,3,-39,-90,3,-5,-97,6,-127, 
  /* [281][0][][] */ 23,18,-26,10,-12,-81,51,-87,49,50,-127,23,-57,-12,45,-47, 
  /* [282][0][][] */ 61,10,-11,55,34,-8,3,-27,-43,-15,-18,-55,-5,0,-127,109, 
  /* [283][0][][] */ 59,8,72,-31,-127,18,67,-127,30,85,-41,-87,-13,83,42,48, 
  /* [284][0][][] */ -21,-6,-127,57,39,11,-9,33,-27,16,60,-13,5,-61,29,20, 
  /* [285][0][][] */ 32,14,101,7,2,-97,83,-47,-11,23,18,62,-127,30,-43,0, 
  /* [286][0][][] */ -7,-6,-2,34,-10,-32,19,-103,-127,-15,-51,51,-98,23,-33,-119, 
  /* [287][0][][] */ -18,-99,-34,80,-118,-25,81,93,-68,-72,30,-45,-18,38,127,-15, 
  /* [288][0][][] */ 47,127,23,7,23,32,-43,1,-117,0,-35,-29,-12,41,-116,-62, 
  /* [289][0][][] */ 75,5,127,-68,97,16,10,27,-68,-16,26,-33,18,-19,-26,-97, 
  /* [290][0][][] */ 3,-62,16,7,87,-45,-71,69,44,2,-127,-55,-3,53,29,76, 
  /* [291][0][][] */ 38,-12,-47,58,127,-21,-4,19,-24,-39,-19,32,3,-4,40,-15, 
  /* [292][0][][] */ -52,-3,-92,57,89,-2,-127,-86,19,6,-46,-12,-82,-48,61,-66, 
  /* [293][0][][] */ 56,102,-47,-68,26,9,-43,35,127,-12,-46,6,-122,-5,34,15, 
  /* [294][0][][] */ -8,4,-80,-26,15,-80,41,8,-94,-53,-22,-50,-63,-4,-52,127, 
  /* [295][0][][] */ 8,-57,-13,62,56,-5,127,77,49,56,-78,-61,52,95,-125,20, 
  /* [296][0][][] */ 13,17,-11,72,13,61,-44,-12,-120,-30,-79,96,15,107,-127,-121, 
  /* [297][0][][] */ 60,42,55,-49,-7,-9,-103,-38,108,-52,42,20,-76,-21,61,127, 
  /* [298][0][][] */ -48,-41,31,-29,-26,28,-44,-32,-13,20,-3,86,-22,127,-38,4, 
  /* [299][0][][] */ -22,-7,50,37,-26,47,-41,-16,127,93,-54,22,-10,7,-52,15, 
  /* [300][0][][] */ 119,54,79,-64,85,-21,-6,-20,12,21,110,127,51,-18,62,9, 
  /* [301][0][][] */ 66,-1,-102,12,-72,39,-25,11,3,-34,86,-127,-24,-47,15,3, 
  /* [302][0][][] */ 101,-88,88,-34,67,114,114,63,-105,113,-1,-24,18,-127,92,42, 
  /* [303][0][][] */ 23,-23,24,38,35,6,48,56,-13,127,65,-15,-4,34,-5,-71, 
  /* [304][0][][] */ -5,-61,114,-127,-55,17,-4,48,48,-25,123,35,-65,81,27,9, 
  /* [305][0][][] */ -31,-104,-127,42,-82,5,10,-48,111,11,-48,-124,-48,104,28,-115, 
  /* [306][0][][] */ 9,4,-40,-5,-41,54,0,37,-21,-127,123,50,-18,102,-17,13, 
  /* [307][0][][] */ 109,10,42,38,36,-95,-86,67,127,20,-80,-63,-81,-3,47,-29, 
  /* [308][0][][] */ 60,-107,51,-27,80,4,-14,-68,-45,48,11,127,-54,72,38,17, 
  /* [309][0][][] */ -127,-82,-60,39,39,58,-35,123,25,62,-39,-39,10,-67,-101,-40, 
  /* [310][0][][] */ 34,-35,-76,-43,65,39,10,31,-32,-33,72,63,43,127,26,-66, 
  /* [311][0][][] */ 3,-58,20,121,41,-1,4,-93,14,-20,127,-2,49,-55,119,25, 
  /* [312][0][][] */ 127,109,-53,111,123,20,-24,87,-14,85,22,-19,59,-67,16,-6, 
  /* [313][0][][] */ -31,42,4,27,4,-127,58,-18,-15,54,-14,73,-2,80,18,-9, 
  /* [314][0][][] */ 8,-83,31,37,-32,-34,-50,127,-47,-17,-69,92,65,48,5,6, 
  /* [315][0][][] */ -6,-32,10,34,5,36,-55,127,53,51,-50,-61,25,-1,-87,-28, 
  /* [316][0][][] */ 11,62,-6,3,26,127,92,-16,78,-59,-79,123,-31,-18,22,5, 
  /* [317][0][][] */ -6,-38,-94,9,63,-54,29,-59,127,-80,9,-15,-122,-117,97,-59, 
  /* [318][0][][] */ 8,-71,-59,42,23,79,55,-88,-13,1,61,-127,-55,-92,100,-97, 
  /* [319][0][][] */ -76,7,-20,-13,63,23,-16,127,-5,-49,-34,-33,50,9,-38,-25, 
  /* [320][0][][] */ 100,-20,-23,47,4,17,-49,7,67,70,17,-35,1,127,-39,46, 
  /* [321][0][][] */ -13,-16,-3,-118,-75,121,55,-13,-72,-54,-88,-27,-55,-48,-127,-35, 
  /* [322][0][][] */ -43,-11,6,0,-11,-81,-31,15,-43,-19,-35,-15,-22,-109,127,-77, 
  /* [323][0][][] */ 70,-20,26,0,-7,21,-77,40,-81,-54,-15,-55,-18,127,33,-79, 
  /* [324][0][][] */ -32,-58,2,78,-42,-25,30,-51,-13,-71,-76,-21,-127,-79,-15,-74, 
  /* [325][0][][] */ -93,-24,-22,32,22,-114,14,-83,-67,-127,96,-66,-6,-18,-107,18, 
  /* [326][0][][] */ -36,68,-6,-57,-127,71,31,-82,-38,-10,96,32,37,20,-91,-59, 
  /* [327][0][][] */ 127,-16,-3,74,-63,103,84,-61,29,-13,25,-103,-75,-15,-35,-5, 
  /* [328][0][][] */ -64,-65,-36,11,-3,33,44,127,86,55,46,-53,-2,57,-5,-121, 
  /* [329][0][][] */ -36,37,31,127,84,-40,-36,36,-33,-39,107,85,-57,-73,-58,17, 
  /* [330][0][][] */ -118,-88,84,70,115,-62,11,127,-40,125,-69,-35,-33,-4,-117,-9, 
  /* [331][0][][] */ 97,4,-5,-40,-8,-35,125,-41,99,-59,-127,10,47,76,-66,1, 
  /* [332][0][][] */ 37,-127,61,72,-68,-91,76,9,23,56,88,-64,-24,-24,79,90, 
  /* [333][0][][] */ 31,-77,46,-50,34,-20,0,-67,71,-110,0,-42,61,-113,127,-8, 
  /* [334][0][][] */ -25,39,-9,-62,-83,-126,-90,38,-127,14,-10,-33,-75,-39,40,-56, 
  /* [335][0][][] */ -31,-48,127,-18,-43,24,43,-20,73,106,23,119,-22,4,-36,28, 
  /* [336][0][][] */ 127,85,-89,40,36,-35,62,56,40,-28,68,-52,-6,-14,57,-7, 
  /* [337][0][][] */ 112,-76,-22,25,77,127,54,-27,56,97,56,0,-24,-62,90,-47, 
  /* [338][0][][] */ 47,-69,67,-5,22,-13,-86,60,48,6,-71,-127,-39,-44,31,-14, 
  /* [339][0][][] */ 55,-26,46,-58,-93,-127,-44,-117,-24,-9,-47,46,49,33,100,93, 
  /* [340][0][][] */ 69,-5,-70,-25,-20,18,-34,21,61,-127,81,86,-59,-9,19,-35, 
  /* [341][0][][] */ 117,-4,118,127,-22,6,-67,0,-5,10,-16,6,-42,-6,99,-1, 
  /* [342][0][][] */ -6,11,34,-8,-106,-23,66,32,-21,54,-19,-127,34,13,58,-26, 
  /* [343][0][][] */ -17,-62,-1,6,38,-24,58,118,43,-3,127,-112,-12,7,75,17, 
  /* [344][0][][] */ 22,-64,14,-6,9,127,-20,-66,-112,35,17,-13,34,-105,3,-41, 
  /* [345][0][][] */ 22,105,-11,4,28,-121,93,127,-26,8,26,-37,1,-22,14,-13, 
  /* [346][0][][] */ -9,65,-124,-127,-109,92,-14,-21,59,34,-72,36,22,-52,34,-21, 
  /* [347][0][][] */ -127,-48,3,14,-7,65,37,4,31,-2,25,29,28,84,104,88, 
  /* [348][0][][] */ 4,31,-34,-92,-54,10,-99,-50,35,24,-62,117,117,-80,24,127, 
  /* [349][0][][] */ 104,0,-31,26,47,5,34,38,-24,-43,19,-127,9,8,10,-3, 
  /* [350][0][][] */ 0,15,-6,5,-69,-15,69,-1,36,-19,-100,-26,45,-127,52,38, 
  /* [351][0][][] */ 127,-11,66,33,0,-91,-111,62,13,-30,23,50,32,91,43,77, 
  /* [352][0][][] */ -67,7,-15,-53,4,98,7,-127,94,30,-112,16,-66,11,-2,-104, 
  /* [353][0][][] */ -20,127,-8,10,67,45,-18,92,39,20,-1,39,123,32,-20,4, 
  /* [354][0][][] */ -32,-16,4,16,-81,7,28,11,6,-20,-34,3,41,92,70,-127, 
  /* [355][0][][] */ 2,-12,-20,3,-47,10,12,12,-65,-127,-59,67,68,102,96,-19, 
  /* [356][0][][] */ 64,-34,-82,-47,-33,66,-127,-72,-89,-55,5,-66,14,-64,-4,46, 
  /* [357][0][][] */ 23,38,14,42,-68,42,52,80,-12,-52,-127,28,59,-31,89,-53, 
  /* [358][0][][] */ -43,-2,-36,3,-2,19,-50,81,4,-103,94,30,-26,127,-24,-46, 
  /* [359][0][][] */ 53,-43,46,0,58,127,-49,-127,71,-26,-9,26,-75,66,-108,-17, 
  /* [360][0][][] */ 23,120,-21,-76,67,-67,-42,27,92,64,4,-8,94,-74,66,127, 
  /* [361][0][][] */ 51,127,-67,-76,64,106,123,-82,-20,-19,73,-66,37,21,37,-41, 
  /* [362][0][][] */ 60,-20,20,29,24,-20,-5,8,-39,13,-47,-27,48,-20,-127,-30, 
  /* [363][0][][] */ 80,58,-44,-28,-101,-14,114,-116,-3,-127,-67,-58,-49,-13,66,8, 
  /* [364][0][][] */ -127,-21,43,-66,-65,48,-49,45,41,29,50,7,-2,34,-28,-25, 
  /* [365][0][][] */ -38,43,-112,-56,-87,54,-127,-43,28,-78,51,77,28,1,28,35, 
  /* [366][0][][] */ 41,-49,1,20,-61,-18,24,-7,77,-39,-127,66,-78,114,32,74, 
  /* [367][0][][] */ 50,-19,21,115,-8,13,-2,51,127,20,-127,-29,-78,-15,-78,50, 
  /* [368][0][][] */ -39,75,-15,51,-127,28,-4,-100,-46,42,-68,106,37,-8,-80,-65, 
  /* [369][0][][] */ -25,-15,127,-74,-72,61,-115,-57,9,37,2,-16,7,-45,-37,68, 
  /* [370][0][][] */ -45,-127,-41,-30,-7,65,91,15,-92,60,-37,-71,7,101,-54,-48, 
  /* [371][0][][] */ 95,-10,102,-60,-127,71,-17,5,56,42,-112,18,94,35,24,30, 
  /* [372][0][][] */ 8,22,-7,19,-24,59,32,-9,27,-127,103,85,-22,-22,-23,47, 
  /* [373][0][][] */ -1,-5,-31,32,-95,-127,14,94,81,42,34,97,85,53,-16,109, 
  /* [374][0][][] */ -73,27,21,5,-35,-94,1,127,66,-16,-15,-15,-75,48,22,-69, 
  /* [375][0][][] */ -19,3,55,73,127,41,-127,-61,-20,10,69,6,-76,-20,43,-77, 
  /* [376][0][][] */ -66,127,-23,-64,27,-8,-37,-29,2,-67,-65,-34,-55,-37,-25,-11, 
  /* [377][0][][] */ 66,-45,82,-103,-47,100,57,-30,29,29,-37,52,-17,-66,-127,23, 
  /* [378][0][][] */ -99,83,-12,-26,-22,-127,-75,60,-9,82,85,81,63,59,49,-117, 
  /* [379][0][][] */ 80,49,-39,33,-36,1,-4,32,41,-21,-127,7,60,-57,-69,-69, 
  /* [380][0][][] */ 10,-13,21,13,127,24,-21,-35,-51,-26,-45,35,-24,-8,36,17, 
  /* [381][0][][] */ -23,6,-3,9,-30,-31,6,26,52,-30,-92,-12,-32,-13,127,-22, 
  /* [382][0][][] */ -31,64,82,64,-43,-2,-1,-77,79,72,59,35,127,87,41,8, 
  /* [383][0][][] */ -52,23,101,-55,39,-5,-4,70,127,94,14,87,62,14,-49,-95, 
  /* [384][0][][] */ 11,43,-5,45,40,-127,-11,17,36,-2,116,7,-94,18,-60,-24, 
  /* [385][0][][] */ 41,-127,-51,12,-93,-91,-50,-18,-84,10,56,29,121,10,-42,58, 
  /* [386][0][][] */ 93,-83,-12,68,104,-29,-121,22,-37,1,79,16,-15,-31,127,3, 
  /* [387][0][][] */ -11,49,-7,-78,-13,-64,-107,2,-127,-53,-89,-70,116,-73,-63,26, 
  /* [388][0][][] */ -19,11,55,26,-4,98,-35,26,-8,41,8,18,31,-26,-56,-127, 
  /* [389][0][][] */ -40,14,-7,37,-48,-127,79,94,34,-92,87,51,43,-37,-10,62, 
  /* [390][0][][] */ -26,-68,-6,-44,28,-22,-48,9,127,-56,4,73,-125,7,-109,-42, 
  /* [391][0][][] */ -127,-28,-39,55,75,100,-16,-106,109,13,84,-18,-103,-87,79,-15, 
  /* [392][0][][] */ 80,-23,49,-67,-16,18,-30,12,19,6,117,-93,-2,-30,107,127, 
  /* [393][0][][] */ -16,34,-40,27,49,-76,-6,68,127,29,49,39,25,-86,-21,91, 
  /* [394][0][][] */ -33,64,-14,27,2,35,18,-10,-9,-127,125,-6,20,-49,-67,1, 
  /* [395][0][][] */ 8,48,3,-53,45,-48,45,-127,23,-97,-102,33,0,36,-3,-38, 
  /* [396][0][][] */ -32,-32,20,0,-77,30,24,56,127,32,81,-17,16,19,-10,-72, 
  /* [397][0][][] */ 86,-33,-35,55,81,66,-77,127,-30,-18,76,-45,-2,61,-2,-68, 
  /* [398][0][][] */ -74,-127,-77,18,-75,-74,-52,-23,18,-66,52,17,-3,-6,-16,-13, 
  /* [399][0][][] */ 5,-41,-8,-75,-58,39,-127,31,40,-17,89,89,32,30,-123,-5, 
  /* [400][0][][] */ 47,42,72,-38,12,34,-16,-48,60,13,-81,31,-2,-127,-61,-28, 
  /* [401][0][][] */ -127,-60,-14,-67,-34,44,-70,2,-32,-33,-92,69,42,19,88,-14, 
  /* [402][0][][] */ 1,84,50,-27,124,-127,-81,36,64,-19,-101,11,95,9,23,39, 
  /* [403][0][][] */ 70,63,40,-58,2,-78,19,-21,43,-15,-43,127,37,11,-65,0, 
  /* [404][0][][] */ 127,48,-64,-20,-91,-6,43,42,46,-36,-52,-43,54,-3,-50,-19, 
  /* [405][0][][] */ -47,-37,-8,10,-71,-9,-44,42,127,-3,-12,-56,-42,24,29,34, 
  /* [406][0][][] */ 12,8,71,92,-53,31,95,-34,76,41,31,-88,-127,36,95,-127, 
  /* [407][0][][] */ 9,-17,-9,85,11,29,-127,37,-7,-18,-6,-20,-64,55,-4,-92, 
  /* [408][0][][] */ -127,27,47,-27,-31,-29,-19,-21,-29,-38,-38,6,-73,-4,-1,14, 
  /* [409][0][][] */ 24,57,-14,43,-5,66,93,30,-43,-60,127,-17,5,89,84,33, 
  /* [410][0][][] */ -79,123,-7,67,67,-46,109,-32,-94,74,-34,-54,75,-123,82,-127, 
  /* [411][0][][] */ 46,-23,-51,-77,-37,-25,-5,-67,39,-21,37,-64,-59,-111,-70,-127, 
  /* [412][0][][] */ -2,-79,-61,6,-50,100,48,-1,16,34,-3,-10,-14,20,6,-127, 
  /* [413][0][][] */ 127,-56,63,-54,48,13,-58,-47,79,-26,1,91,-21,-59,-85,-30, 
  /* [414][0][][] */ 66,-38,15,-59,79,2,90,76,-125,9,-127,99,9,8,-46,112, 
  /* [415][0][][] */ 110,-5,89,117,47,-127,95,-2,-71,-31,76,-37,73,-63,21,-79, 
  /* [416][0][][] */ 2,5,57,111,28,-13,53,58,-120,-14,-31,63,37,53,-127,-126, 
  /* [417][0][][] */ 93,110,31,-13,127,108,-3,-47,109,-7,13,76,-41,-35,-122,-58, 
  /* [418][0][][] */ 53,-89,76,-25,29,-24,-39,-114,-37,-118,110,-47,127,121,46,55, 
  /* [419][0][][] */ 3,40,-120,37,48,-47,107,74,-36,-79,17,127,107,-73,0,-110, 
  /* [420][0][][] */ 114,-36,-90,-38,127,29,19,-35,86,-17,13,-109,30,20,115,-25, 
  /* [421][0][][] */ -62,6,-28,-65,-79,5,-26,-43,127,40,-9,-2,-4,35,-6,-33, 
  /* [422][0][][] */ 30,-28,-39,-4,-6,36,80,-17,-12,14,-3,-8,-30,-77,-4,-127, 
  /* [423][0][][] */ -50,26,-8,34,-18,21,103,28,45,-127,-45,46,-97,8,68,11, 
  /* [424][0][][] */ -77,-55,116,-127,-28,54,-27,-12,-3,21,5,27,14,-50,-71,-123, 
  /* [425][0][][] */ -25,18,-10,-51,19,6,-20,-33,-11,14,-15,31,17,-30,50,-127, 
  /* [426][0][][] */ 29,4,-76,118,-127,-73,36,-54,57,-97,-34,22,23,71,-46,8, 
  /* [427][0][][] */ -70,95,20,-119,49,127,67,-11,80,-72,77,-45,-2,-91,-87,-70, 
  /* [428][0][][] */ 55,34,-27,-60,45,127,9,32,-50,75,-50,-11,89,15,40,-5, 
  /* [429][0][][] */ 127,0,-74,-4,-79,73,40,-24,-9,-93,-38,-63,1,-7,42,-79, 
  /* [430][0][][] */ 11,-20,-61,-119,97,-127,102,-29,114,-73,-12,-71,110,3,30,-14, 
  /* [431][0][][] */ 95,-28,17,63,-127,100,5,-41,-5,53,-87,-40,70,-8,7,-73, 
  /* [432][0][][] */ 55,52,-60,17,20,67,54,-127,-57,-85,50,40,36,6,-48,57, 
  /* [433][0][][] */ -5,23,-15,-57,22,-84,29,2,127,-108,-61,-22,-58,-24,68,-30, 
  /* [434][0][][] */ -33,-5,-39,-20,-46,-3,83,60,11,-57,-2,-127,81,-16,-82,15, 
  /* [435][0][][] */ -21,51,-75,22,58,103,9,-127,38,61,-97,101,54,69,-3,-83, 
  /* [436][0][][] */ -107,-6,-126,96,-47,-9,29,36,-43,14,78,-127,18,114,-11,45, 
  /* [437][0][][] */ -46,9,-8,55,23,-21,-5,-79,-23,70,-8,7,127,12,-100,59, 
  /* [438][0][][] */ -13,-89,-78,-81,0,127,67,-17,-57,-47,14,-98,40,-56,-98,-79, 
  /* [439][0][][] */ -53,7,-33,-16,59,-15,53,3,-62,36,26,-48,-30,-127,50,-83, 
  /* [440][0][][] */ 45,-31,56,-87,40,-40,-45,-85,-29,122,-86,52,26,35,105,127, 
  /* [441][0][][] */ 44,-56,56,32,-12,-27,-11,-13,81,49,-127,-62,-31,61,-12,32, 
  /* [442][0][][] */ -15,37,-34,92,7,44,-28,4,-37,-127,30,68,18,2,-50,27, 
  /* [443][0][][] */ 58,-12,2,30,83,-12,25,-37,-22,-37,2,-33,-102,-6,127,11, 
  /* [444][0][][] */ -90,-27,-48,-12,26,43,-100,60,1,-2,34,-46,-35,-61,-127,-93, 
  /* [445][0][][] */ -46,-16,70,-52,-14,59,4,-2,-22,32,36,-127,-94,-110,114,73, 
  /* [446][0][][] */ 29,1,44,-45,-27,28,-61,127,80,-53,-2,-25,46,82,-71,-9, 
  /* [447][0][][] */ -20,83,-22,123,59,127,6,-33,-68,-50,-33,-15,-18,-18,91,-85, 
  /* [448][0][][] */ 53,3,70,-22,-36,16,1,0,53,-127,20,-34,-41,104,-72,-39, 
  /* [449][0][][] */ -13,-35,-102,112,69,23,62,74,-127,51,46,-7,56,86,11,15, 
  /* [450][0][][] */ -49,58,67,81,75,28,-8,-2,69,15,-54,-53,-127,-7,48,80, 
  /* [451][0][][] */ 106,-34,13,-7,-2,-1,-50,127,-41,-1,13,19,32,124,51,-34, 
  /* [452][0][][] */ 56,-74,11,127,18,-26,28,65,46,-49,49,24,-92,108,54,-18, 
  /* [453][0][][] */ 127,-51,38,-11,26,-33,-8,53,-38,35,-33,5,84,7,-29,11, 
  /* [454][0][][] */ -48,38,91,-56,-45,-21,-78,28,-38,52,-11,127,61,39,25,82, 
  /* [455][0][][] */ 12,28,-19,127,83,-30,-9,-86,15,-32,8,-6,10,-6,-1,-82, 
  /* [456][0][][] */ -25,127,-91,-36,59,-66,15,17,47,-29,-29,38,38,59,76,4, 
  /* [457][0][][] */ 127,24,8,61,114,-6,16,1,-1,-51,-9,40,11,-49,-13,28, 
  /* [458][0][][] */ 99,7,70,4,86,-10,-63,44,-127,23,25,51,-1,-100,58,18, 
  /* [459][0][][] */ -4,11,-60,41,-56,-74,60,-94,41,76,-127,-49,70,-49,-5,-21, 
  /* [460][0][][] */ 23,-114,-16,-27,111,-45,-53,65,61,-93,55,-94,-122,-29,-26,127, 
  /* [461][0][][] */ -55,-47,80,-66,-29,65,28,11,127,22,-45,-48,8,89,-10,-102, 
  /* [462][0][][] */ 41,14,-29,-20,56,76,23,-122,15,68,68,1,36,-41,-127,34, 
  /* [463][0][][] */ 27,-30,127,-25,57,18,29,-8,85,38,-51,16,-50,8,-16,10, 
  /* [464][0][][] */ 3,-81,-4,55,18,107,-39,-44,51,127,27,-68,12,62,73,13, 
  /* [465][0][][] */ -38,-73,-56,58,36,-93,-50,41,9,-9,-50,56,-17,39,116,-127, 
  /* [466][0][][] */ -88,80,-127,18,-10,-18,-74,-99,-18,-7,-66,-1,24,-108,116,-102, 
  /* [467][0][][] */ 98,53,-109,-57,4,-3,49,98,85,-127,-21,25,107,-79,67,29, 
  /* [468][0][][] */ -2,4,-8,-26,-5,19,-37,15,8,-127,87,105,2,47,-42,-11, 
  /* [469][0][][] */ 28,127,101,48,-57,62,35,7,33,43,-35,88,-73,108,116,-65, 
  /* [470][0][][] */ 60,-11,62,-33,-20,98,-47,40,41,65,51,90,15,-127,-51,81, 
  /* [471][0][][] */ -43,-98,24,-106,80,81,3,-27,127,83,99,-19,70,-120,61,-55, 
  /* [472][0][][] */ -3,6,127,14,30,44,25,16,-11,-44,35,-46,117,-47,-41,-31, 
  /* [473][0][][] */ 10,-16,64,-50,59,2,7,-76,-28,0,-5,1,80,14,-127,-19, 
  /* [474][0][][] */ -36,3,-8,-54,-11,48,-16,-8,-4,57,-17,33,127,-19,-43,23, 
  /* [475][0][][] */ -54,-44,-57,25,-127,10,8,-110,-3,-5,-52,-1,10,93,-29,-29, 
  /* [476][0][][] */ 28,-7,29,-45,94,97,-127,78,-92,10,-97,27,86,-50,27,-32, 
  /* [477][0][][] */ -61,-26,-112,95,-73,-127,51,-19,-23,108,-47,57,86,-97,-66,-85, 
  /* [478][0][][] */ -17,23,-12,-44,0,56,-84,-89,-26,17,-107,8,-127,4,26,49, 
  /* [479][0][][] */ 111,127,16,26,-38,57,-7,-82,70,21,-16,87,61,-4,-43,-10, 
  /* [480][0][][] */ 106,15,44,12,-21,-127,47,-30,25,23,-50,-101,-98,-23,3,-30, 
  /* [481][0][][] */ -61,33,95,86,50,-64,76,53,11,0,-115,19,56,4,115,-127, 
  /* [482][0][][] */ 22,-52,127,44,72,1,47,-34,-80,-93,-29,60,66,1,23,109, 
  /* [483][0][][] */ -103,-35,-70,-86,74,6,-19,-41,-71,-20,30,103,127,-69,75,80, 
  /* [484][0][][] */ 16,-127,37,42,-40,-8,-91,29,-27,17,74,84,-23,-22,39,-20, 
  /* [485][0][][] */ 8,-49,-1,6,-29,-2,44,16,-16,19,-32,28,-22,-127,-22,10, 
  /* [486][0][][] */ 4,57,-2,-105,18,-21,-127,40,68,22,5,52,28,-40,-25,-21, 
  /* [487][0][][] */ 14,-67,64,-45,37,11,-81,-74,80,52,-61,89,49,-3,-83,-127, 
  /* [488][0][][] */ -47,29,127,-54,-87,5,-26,-14,93,86,23,61,2,33,-11,16, 
  /* [489][0][][] */ 35,25,127,32,-98,44,-27,61,76,-49,-24,-17,-44,-30,0,27, 
  /* [490][0][][] */ 2,35,-48,76,-24,74,72,-2,18,-15,-105,-44,55,127,11,-33, 
  /* [491][0][][] */ 127,3,-3,-81,35,-69,38,-41,63,66,48,-42,-27,-59,30,-22, 
  /* [492][0][][] */ -127,121,67,-9,-45,-67,-9,-25,-14,80,-2,122,-13,-58,75,52, 
  /* [493][0][][] */ 73,43,-30,19,64,-74,-15,-47,40,-65,-57,-127,-11,-6,108,-78, 
  /* [494][0][][] */ 51,14,27,-71,-90,127,-51,-56,91,-69,-35,-26,8,52,5,38, 
  /* [495][0][][] */ -10,-27,-74,10,-75,-30,65,-127,18,69,80,34,73,42,56,59, 
  /* [496][0][][] */ 27,14,-126,-59,-95,40,-55,20,-127,36,-58,49,15,-28,53,125, 
  /* [497][0][][] */ 20,-77,127,-86,-66,0,-40,82,78,-7,72,46,86,-91,18,68, 
  /* [498][0][][] */ 8,51,-82,127,58,19,10,-93,-16,-14,-42,12,30,64,-75,9, 
  /* [499][0][][] */ 32,-12,29,76,-14,-37,-46,-127,4,31,-75,16,-6,-32,-80,106, 
  /* [500][0][][] */ -5,6,127,-35,49,-6,54,43,-32,48,36,12,-49,-43,-91,-17, 
  /* [501][0][][] */ -44,-47,-97,33,127,77,-4,-78,13,-94,-119,1,0,-22,38,-34, 
  /* [502][0][][] */ -75,17,58,6,36,114,-81,62,-3,-51,69,127,-50,-24,-87,41, 
  /* [503][0][][] */ 46,48,40,-7,39,-42,15,-10,-19,19,-127,-18,73,42,-12,6, 
  /* [504][0][][] */ -23,16,26,-66,46,54,100,-40,85,-127,-51,-91,48,-6,-112,7, 
  /* [505][0][][] */ 102,-9,53,47,-30,6,56,42,106,-19,-127,15,15,-91,-23,9, 
  /* [506][0][][] */ -70,-8,127,-20,-110,-23,28,-51,-17,88,73,55,-51,26,-87,-48, 
  /* [507][0][][] */ 18,-39,74,-42,52,65,-16,54,-71,80,67,127,-25,-23,-101,-79, 
  /* [508][0][][] */ 38,-10,21,-45,2,72,-127,-77,34,-5,-5,-20,-74,8,52,19, 
  /* [509][0][][] */ -127,19,50,91,66,57,-98,119,-48,48,45,10,16,18,-37,39, 
  /* [510][0][][] */ -60,127,-60,-26,59,-2,-101,-13,20,36,25,-33,-16,28,35,23, 
  /* [511][0][][] */ 99,-70,101,6,127,63,51,3,43,-23,20,-53,14,-1,30,-56, 
  /* [512][0][][] */ 47,-14,-12,-39,-46,18,-10,-18,-13,-127,79,86,-40,123,61,-13, 
  /* [513][0][][] */ 50,-57,-2,-59,121,69,-83,48,-13,-57,-53,54,127,47,-22,-53, 
  /* [514][0][][] */ 98,70,55,41,25,-31,49,108,127,34,27,82,53,46,53,-3, 
  /* [515][0][][] */ 6,-56,-36,-23,-68,-32,-127,44,8,-32,38,-33,90,-29,36,79, 
  /* [516][0][][] */ -6,56,40,77,-20,11,-68,127,-25,2,-4,60,72,9,46,-70, 
  /* [517][0][][] */ -66,-2,-57,1,76,8,0,-2,0,24,127,-82,7,-110,-108,-2, 
  /* [518][0][][] */ -127,24,33,-91,-101,86,5,55,-6,32,-64,53,118,-4,28,29, 
  /* [519][0][][] */ 40,-14,45,20,-35,42,36,-31,97,-62,127,76,-60,40,-1,51, 
  /* [520][0][][] */ -8,-96,-15,-13,-55,18,20,-20,-127,-17,-43,-37,-26,-1,-91,11, 
  /* [521][0][][] */ -88,82,7,30,82,127,-70,103,96,11,-74,15,72,-46,102,100, 
  /* [522][0][][] */ -25,-71,24,40,9,12,111,-30,12,-50,14,-45,-127,-46,33,-55, 
  /* [523][0][][] */ 126,10,27,23,98,72,-40,-67,-118,23,44,-44,-127,-9,-55,37, 
  /* [524][0][][] */ 96,-18,-54,-67,31,-65,-127,6,-4,-35,-35,80,29,102,54,-99, 
  /* [525][0][][] */ -80,-45,46,-27,30,34,-81,-70,62,4,89,-127,21,-61,-46,27, 
  /* [526][0][][] */ 74,-55,-79,66,-1,14,42,38,-2,124,127,49,68,-75,52,-83, 
  /* [527][0][][] */ -32,41,70,-107,-28,74,-127,-13,5,76,99,71,16,-39,-38,8, 
  /* [528][0][][] */ 62,24,-13,-65,3,-42,48,-101,52,-42,92,127,-36,-13,24,-4, 
  /* [529][0][][] */ 46,91,-16,0,36,54,-22,42,34,-68,85,127,-8,40,17,4, 
  /* [530][0][][] */ 78,107,-14,18,108,-18,-90,127,63,-53,-16,6,52,-25,43,-31, 
  /* [531][0][][] */ 3,1,28,-25,-106,-33,52,-15,-83,-33,-47,0,-13,103,78,-127, 
  /* [532][0][][] */ 48,-62,36,60,127,30,26,-30,-92,24,3,6,23,11,59,-4, 
  /* [533][0][][] */ -25,-25,-10,7,-127,16,-95,-32,108,56,48,17,34,-9,14,-55, 
  /* [534][0][][] */ 41,34,30,-5,127,-64,28,16,-92,-95,-12,-36,-63,-35,55,77, 
  /* [535][0][][] */ 0,15,56,-29,30,29,6,-35,13,16,52,-1,12,127,-32,75, 
  /* [536][0][][] */ 26,32,15,72,-26,-4,-19,-27,-36,25,-51,127,36,105,2,-65, 
  /* [537][0][][] */ 76,-24,2,11,-85,12,64,-127,105,51,-31,3,52,-24,99,59, 
  /* [538][0][][] */ 25,-8,53,-28,127,-62,-25,-76,58,-106,11,-49,29,-52,42,3, 
  /* [539][0][][] */ -39,-57,127,-10,49,26,-87,-31,27,20,55,110,-81,67,-63,104, 
  /* [540][0][][] */ -9,-77,54,68,11,46,-48,-48,127,50,69,-28,90,38,-7,-110, 
  /* [541][0][][] */ -23,-12,-43,2,-127,16,65,38,18,-21,-83,-20,89,18,-73,-95, 
  /* [542][0][][] */ -63,-36,33,-24,62,66,100,-64,-39,31,127,-41,8,-77,-39,36, 
  /* [543][0][][] */ 108,-18,-44,-48,-47,-18,10,-127,-2,-1,-13,-17,43,-20,21,13, 
  /* [544][0][][] */ -13,-16,-15,-55,32,17,0,-65,90,-55,-21,-40,68,6,127,42, 
  /* [545][0][][] */ 29,-32,-51,-60,-16,-15,-38,-63,-58,-11,-56,-36,71,3,-60,-127, 
  /* [546][0][][] */ 96,-86,-16,-65,-30,61,-46,127,14,33,7,19,28,-33,-25,-116, 
  /* [547][0][][] */ 106,-55,76,-3,-55,86,22,-65,6,-127,-52,86,-100,-64,-33,108, 
  /* [548][0][][] */ 29,-8,-127,-4,-21,-16,45,50,123,7,-41,28,-48,-5,-13,-47, 
  /* [549][0][][] */ 73,-18,-72,59,107,45,16,-63,29,-30,-127,33,64,-106,-71,94, 
  /* [550][0][][] */ 127,-4,30,-114,40,-29,68,-20,62,-15,-13,100,108,28,12,-84, 
  /* [551][0][][] */ 3,53,-86,60,-62,48,41,89,118,-127,10,99,19,50,-87,-5, 
  /* [552][0][][] */ -29,-93,-17,60,-35,72,-6,36,-92,31,127,112,-16,-40,-30,-10, 
  /* [553][0][][] */ 125,-127,-15,-53,-32,-9,3,63,19,-67,93,-9,-21,-15,-5,11, 
  /* [554][0][][] */ 8,-7,-5,38,24,-31,-2,-18,40,-48,-127,52,-8,-3,-53,-6, 
  /* [555][0][][] */ 124,127,44,-30,-27,28,-13,18,57,-126,28,41,-45,-37,-59,-53, 
  /* [556][0][][] */ -28,58,-43,-127,-85,96,-20,51,9,20,-53,56,13,110,-12,-21, 
  /* [557][0][][] */ 58,78,69,-97,87,96,-127,62,29,-11,59,12,-7,108,-39,7, 
  /* [558][0][][] */ 98,-1,-83,-43,26,-29,-35,97,76,-9,-76,-127,-100,102,107,94, 
  /* [559][0][][] */ -61,-44,47,23,16,8,-17,73,-1,57,58,-33,22,-11,-27,127, 
  /* [560][0][][] */ -2,94,-89,37,-36,-25,-15,15,-42,-98,127,76,-40,41,-22,-28, 
  /* [561][0][][] */ 36,127,-73,64,-8,-52,-79,-76,-26,67,-5,-1,12,9,-77,32, 
  /* [562][0][][] */ 43,-46,52,-10,-84,77,-80,-81,47,12,107,4,127,-42,31,-24, 
  /* [563][0][][] */ -29,97,49,17,35,-19,-45,-127,22,61,16,55,-54,-31,20,-26, 
  /* [564][0][][] */ 75,3,51,17,5,-124,27,36,13,25,-22,127,12,-34,44,-6, 
  /* [565][0][][] */ 79,9,127,44,47,-29,32,55,75,124,85,27,-14,28,20,-55, 
  /* [566][0][][] */ -43,36,-39,28,-127,-36,-1,-3,13,-28,5,50,18,14,98,26, 
  /* [567][0][][] */ 55,-21,-127,126,-74,-18,-12,39,88,41,23,-126,73,-8,6,-46, 
  /* [568][0][][] */ 24,9,-31,-90,-73,-36,85,21,0,-106,-29,-42,-20,127,-78,12, 
  /* [569][0][][] */ 68,2,22,-92,8,-127,-7,-41,53,82,-90,-34,57,-100,104,3, 
  /* [570][0][][] */ -58,59,98,-33,-5,22,-4,-49,52,100,23,-13,-80,-127,41,85, 
  /* [571][0][][] */ 1,-39,-20,40,116,-117,7,49,-127,-33,-27,-31,10,-72,-4,43, 
  /* [572][0][][] */ 48,-17,35,8,82,35,-70,33,127,-25,9,-17,-34,88,-52,6, 
  /* [573][0][][] */ -43,-6,1,8,-103,42,23,-3,127,88,-37,-112,62,0,11,-37, 
  /* [574][0][][] */ -27,-11,-3,-81,-12,1,5,5,127,-4,-43,6,-23,-68,-5,-11, 
  /* [575][0][][] */ 71,0,111,-6,-112,40,26,70,-23,-4,8,-85,-3,127,-65,24, 
  /* [576][0][][] */ 127,-24,-28,11,-54,13,54,-11,22,-49,41,-31,40,23,-29,-99, 
  /* [577][0][][] */ 99,3,-2,37,-125,119,-25,-17,80,127,40,51,14,23,111,-35, 
  /* [578][0][][] */ -127,-19,37,3,-50,65,67,-110,109,82,-22,73,50,-25,-74,-83, 
  /* [579][0][][] */ 2,-29,-16,-26,13,-14,-47,7,-62,-54,1,-45,12,-127,38,-12, 
  /* [580][0][][] */ -85,-8,-49,12,-40,-78,-96,82,21,-40,37,-70,-34,-40,127,-24, 
  /* [581][0][][] */ 68,-127,73,-44,83,-18,-95,55,72,15,10,61,-12,71,15,8, 
  /* [582][0][][] */ -101,-21,-18,61,64,58,-42,-127,-126,-88,-39,69,-45,81,83,1, 
  /* [583][0][][] */ -70,-112,-20,31,68,-35,7,46,6,-16,127,7,-47,-31,19,121, 
  /* [584][0][][] */ 62,-9,30,-118,55,34,1,-65,127,1,48,-13,-70,-80,71,95, 
  /* [585][0][][] */ -49,98,-108,20,44,-96,49,-83,11,-49,-37,-43,5,-52,127,-36, 
  /* [586][0][][] */ 9,-15,93,18,-62,36,60,-127,125,30,-85,-29,14,86,5,39, 
  /* [587][0][][] */ 14,6,-35,3,-44,109,-127,41,-23,-12,20,-28,66,6,-13,3, 
  /* [588][0][][] */ -17,-4,19,4,-19,36,-20,-127,-29,-18,73,9,-62,-20,-27,14, 
  /* [589][0][][] */ -2,49,99,-127,-36,56,63,-43,52,-29,0,-15,15,-32,40,18, 
  /* [590][0][][] */ -91,-19,98,-15,-127,3,18,-9,22,57,-7,100,-13,14,20,-1, 
  /* [591][0][][] */ 28,53,-30,10,-59,62,-89,-8,23,127,54,40,100,25,95,29, 
  /* [592][0][][] */ -63,86,33,51,58,-41,-50,89,-70,-1,90,-30,-83,127,36,65, 
  /* [593][0][][] */ 14,-21,-14,45,15,11,-45,9,-26,-105,125,72,-42,127,-23,13, 
  /* [594][0][][] */ 42,51,4,-93,31,-90,25,-62,127,-40,-96,102,-54,-64,-38,44, 
  /* [595][0][][] */ -72,5,25,3,21,-45,27,-28,41,71,-51,-13,-49,-127,19,-22, 
  /* [596][0][][] */ 84,-15,24,-21,53,-41,-1,-118,97,22,-7,13,-55,61,36,-127, 
  /* [597][0][][] */ -127,-20,-75,-88,-19,40,-5,21,28,-9,-7,42,-44,-14,57,-5, 
  /* [598][0][][] */ -6,-76,18,-42,27,15,-36,-34,-13,83,-127,-86,56,-40,44,46, 
  /* [599][0][][] */ 127,-63,-26,-24,-53,-29,-1,-51,104,57,0,-86,-29,101,-53,-110, 
  /* [600][0][][] */ 109,-127,54,81,-21,-5,-4,-67,28,-116,16,13,61,-28,21,-45, 
  /* [601][0][][] */ 53,51,16,71,44,98,127,24,59,67,-71,0,79,126,-39,-113, 
  /* [602][0][][] */ -64,-71,-83,20,-22,-85,16,96,-30,0,-92,-105,-34,-19,125,-127, 
  /* [603][0][][] */ -34,92,-16,-60,-70,127,41,43,-11,58,-5,-48,-64,-22,14,-100, 
  /* [604][0][][] */ -58,-67,-57,72,-41,-117,58,50,-1,73,-127,9,114,-119,38,57, 
  /* [605][0][][] */ -33,127,-22,-67,13,29,40,3,18,59,-113,-5,-16,52,-8,31, 
  /* [606][0][][] */ -123,67,-51,122,35,27,-1,127,93,-80,47,0,-78,-62,-35,68, 
  /* [607][0][][] */ -44,1,10,40,62,34,58,-116,-41,83,-15,28,23,-127,-66,-42, 
  /* [608][0][][] */ 80,-38,77,-11,-31,-6,58,14,70,32,-127,23,31,74,20,11, 
  /* [609][0][][] */ 36,-28,-4,-25,2,51,-15,29,84,-70,-82,127,16,-34,9,1, 
  /* [610][0][][] */ 91,14,-62,-39,127,90,75,-16,91,-64,19,-55,-73,-107,23,-62, 
  /* [611][0][][] */ -20,-6,23,-21,28,55,-2,13,-3,91,9,61,-40,-50,127,-35, 
  /* [612][0][][] */ -79,26,5,-34,43,-64,-32,1,-7,-8,-53,-127,-23,-45,0,27, 
  /* [613][0][][] */ -24,-28,54,-51,40,40,5,-5,3,-10,-25,11,-10,-40,127,-3, 
  /* [614][0][][] */ -9,-79,-14,12,-27,-42,-36,2,58,-95,-2,9,4,127,62,100, 
  /* [615][0][][] */ -31,-8,-31,-94,72,-56,1,26,-58,-91,-37,6,-127,-5,3,59, 
  /* [616][0][][] */ -77,-23,-66,-13,84,19,63,11,6,-46,-127,29,-78,65,61,-92, 
  /* [617][0][][] */ 23,35,108,59,41,-36,127,39,20,51,19,103,-17,45,10,56, 
  /* [618][0][][] */ -29,29,127,-25,42,-35,12,-7,54,52,33,7,-56,-1,72,99, 
  /* [619][0][][] */ -56,-38,40,112,-21,50,6,87,-34,127,-102,-44,47,18,44,28, 
  /* [620][0][][] */ -127,-64,9,-91,30,98,-70,26,-76,0,-34,11,98,-46,-13,0, 
  /* [621][0][][] */ 117,14,127,-7,17,-65,42,-1,-16,-54,93,15,9,-44,22,114, 
  /* [622][0][][] */ 13,-3,-24,41,18,-2,-127,18,-19,-5,-9,13,-21,94,-58,1, 
  /* [623][0][][] */ 28,17,39,7,127,-24,-80,-21,32,-11,22,48,-4,52,-15,106, 
  /* [624][0][][] */ -13,-3,127,-4,19,-4,32,52,26,42,-5,-8,-20,20,-46,-125, 
  /* [625][0][][] */ -54,-19,115,-127,75,3,-13,-62,-19,44,-83,93,-61,-47,19,11, 
  /* [626][0][][] */ -31,35,20,32,49,79,-18,25,-39,21,75,81,28,43,4,-127, 
  /* [627][0][][] */ -22,-81,-44,-8,-121,2,-63,-3,58,-67,-53,57,-61,127,26,-31, 
  /* [628][0][][] */ 15,-7,-10,51,-77,9,64,60,-60,47,0,29,13,127,21,8, 
  /* [629][0][][] */ 92,-52,-74,-29,-92,37,33,-127,-47,2,-101,32,60,47,127,77, 
  /* [630][0][][] */ -4,6,-58,8,-127,85,-11,-14,-62,58,47,-106,84,-95,-110,-72, 
  /* [631][0][][] */ 22,-22,21,-12,37,54,57,-19,-13,30,107,107,-59,-127,-37,86, 
  /* [632][0][][] */ -103,-9,76,-74,7,-18,43,4,-127,-49,10,-45,86,107,-48,-23, 
  /* [633][0][][] */ 105,-127,-56,95,28,-39,43,31,-8,81,-22,-20,17,28,1,-93, 
  /* [634][0][][] */ 75,-20,9,-124,-16,-25,-16,29,95,60,-76,-86,127,-59,58,2, 
  /* [635][0][][] */ -125,8,-124,70,127,-85,-124,11,46,60,-82,-11,59,58,-36,78, 
  /* [636][0][][] */ -7,65,19,-19,-120,27,-66,-39,11,29,-21,127,118,31,55,82, 
  /* [637][0][][] */ 91,44,-16,22,-82,-127,76,-6,17,-10,75,-7,30,-2,42,23, 
  /* [638][0][][] */ -32,91,98,-103,-32,87,41,35,-119,25,-109,66,127,63,-8,28, 
  /* [639][0][][] */ 66,-15,-45,-90,111,74,-78,5,55,15,-34,-4,127,9,66,-36, 
  /* [640][0][][] */ 0,44,-69,41,-47,-4,10,-88,127,-43,-55,-12,67,-29,35,-25, 
  /* [641][0][][] */ -37,80,127,28,22,98,-72,6,47,33,-109,-14,-15,-34,-93,15, 
  /* [642][0][][] */ 11,78,-60,-26,-8,52,68,-70,-42,-40,103,127,33,23,-50,-40, 
  /* [643][0][][] */ -36,14,-25,-39,-9,40,26,-40,-25,4,-28,-127,19,8,-2,40, 
  /* [644][0][][] */ 54,18,75,-21,-127,19,63,20,-20,37,-12,-10,50,-11,-25,65, 
  /* [645][0][][] */ 71,-9,127,-14,-69,22,-28,39,-23,61,-25,78,16,-44,26,-34, 
  /* [646][0][][] */ 29,-2,19,1,-82,-30,-53,-100,60,87,66,93,-50,127,-2,113, 
  /* [647][0][][] */ -93,6,-44,7,36,-44,-27,-60,43,34,17,-72,-127,-18,86,21, 
  /* [648][0][][] */ 46,58,32,-65,-24,46,-27,-14,122,16,27,28,-5,-127,-10,-13, 
  /* [649][0][][] */ -40,58,19,6,18,-12,104,-22,76,-25,-29,-127,-25,58,-35,-31, 
  /* [650][0][][] */ 62,-83,2,118,61,71,9,-97,62,26,121,36,8,-44,-36,127, 
  /* [651][0][][] */ 48,12,10,-57,-59,-7,-67,79,-70,-127,44,113,27,49,104,-65, 
  /* [652][0][][] */ -81,-72,40,40,117,-88,33,69,-35,14,54,62,18,-58,44,-127, 
  /* [653][0][][] */ 48,-48,6,-44,-34,30,5,-66,127,-65,-17,-55,-108,31,54,-62, 
  /* [654][0][][] */ -23,24,-8,-31,20,126,-15,-19,117,36,5,-127,-6,-60,-71,-28, 
  /* [655][0][][] */ 67,-121,55,62,-82,45,-54,-29,-93,123,3,60,-70,127,-39,82, 
  /* [656][0][][] */ 44,-31,-83,-17,117,58,48,45,-42,68,10,-8,12,63,127,-66, 
  /* [657][0][][] */ 43,-63,24,-22,0,15,19,3,66,-3,-29,14,-56,-43,-127,-72, 
  /* [658][0][][] */ 127,19,5,8,29,61,91,59,11,74,11,-77,94,-4,-116,-70, 
  /* [659][0][][] */ 61,51,-101,82,86,-39,57,21,82,-60,-38,-92,-8,59,127,3, 
  /* [660][0][][] */ -23,78,-52,-9,-1,-5,7,-65,2,53,32,-42,70,-127,2,50, 
  /* [661][0][][] */ -8,-21,46,-109,127,-1,-22,-45,52,-60,34,38,48,60,-18,69, 
  /* [662][0][][] */ 127,-42,-27,-69,-57,-4,84,16,85,-64,-22,-50,-28,-43,-24,-36, 
  /* [663][0][][] */ 51,25,-36,28,12,3,34,-31,-8,-69,-47,-49,0,4,-1,-127, 
  /* [664][0][][] */ 46,34,-30,-51,-10,121,46,16,14,-34,-88,-34,37,16,29,127, 
  /* [665][0][][] */ 12,23,109,49,73,26,70,50,-127,5,51,-99,-8,40,18,34, 
  /* [666][0][][] */ 63,84,125,-17,24,70,-13,29,-39,39,-2,-127,4,-60,-8,-50, 
  /* [667][0][][] */ -115,52,94,34,22,-29,-67,-84,15,-1,-36,62,-127,106,45,13, 
  /* [668][0][][] */ 41,97,63,66,14,35,-127,-10,76,43,53,-94,-123,22,1,58, 
  /* [669][0][][] */ 41,-19,123,37,86,43,90,23,-13,-2,12,-73,-45,-127,-35,74, 
  /* [670][0][][] */ -52,-13,-115,-4,28,-127,-32,55,25,-20,-8,35,-9,-10,80,-21, 
  /* [671][0][][] */ 42,-58,-45,-61,22,-118,38,39,34,-29,-37,127,21,10,104,2, 
  /* [672][0][][] */ 40,-26,42,-64,-43,84,98,15,-1,-38,69,45,-127,-117,-10,-14, 
  /* [673][0][][] */ -29,-93,127,-13,93,15,3,-57,47,-2,18,0,10,-20,-5,6, 
  /* [674][0][][] */ 9,-54,78,35,39,-39,127,94,-83,-25,30,6,-18,16,86,94, 
  /* [675][0][][] */ -51,15,127,-56,47,41,27,-43,30,7,103,77,-106,-63,-32,14, 
  /* [676][0][][] */ -19,-69,21,44,46,59,61,-30,39,34,52,-37,10,0,-127,44, 
  /* [677][0][][] */ -15,-1,29,14,53,7,127,1,-38,17,40,-22,21,-38,-55,-22, 
  /* [678][0][][] */ 64,-2,6,127,50,-25,98,30,-88,-16,92,51,-43,8,10,-1, 
  /* [679][0][][] */ -66,-34,-63,78,-60,-127,29,18,13,12,-30,-7,-38,19,7,80, 
  /* [680][0][][] */ 60,-100,-39,31,20,66,-39,-103,71,-18,-30,81,26,-44,-127,-15, 
  /* [681][0][][] */ 35,8,-27,-104,15,74,19,-27,127,68,94,-73,8,-3,14,36, 
  /* [682][0][][] */ -37,-5,31,-15,35,-40,74,127,-2,-61,41,-11,-41,48,5,22, 
  /* [683][0][][] */ 32,24,66,3,127,-17,-20,-31,27,25,18,-28,17,-53,45,-58, 
  /* [684][0][][] */ -58,-62,-90,-66,-127,27,36,-30,29,-35,-8,-117,19,11,-5,25, 
  /* [685][0][][] */ 7,84,-94,95,127,26,-76,-26,68,26,5,56,71,2,-18,-41, 
  /* [686][0][][] */ 127,88,43,-50,-22,79,95,-20,-55,75,-23,56,73,-52,-18,-96, 
  /* [687][0][][] */ 116,-19,4,-3,27,-12,127,20,30,39,46,-50,100,49,-9,63, 
  /* [688][0][][] */ 50,33,11,36,-46,-28,-45,-49,9,-18,-115,127,-69,67,-7,-80, 
  /* [689][0][][] */ -9,115,10,-68,-104,42,58,-28,31,-76,110,106,127,112,18,-108, 
  /* [690][0][][] */ -15,-1,-6,-8,-13,-66,-38,92,12,-49,-95,41,21,127,85,-11, 
  /* [691][0][][] */ 15,-102,-52,-127,-33,33,83,29,-46,-38,-4,85,4,-78,-66,-31, 
  /* [692][0][][] */ 51,72,62,-58,31,-82,-28,-101,-70,-90,-125,23,127,-126,13,-55, 
  /* [693][0][][] */ -52,-8,127,-23,-61,86,-24,73,-56,121,17,82,75,-14,14,7, 
  /* [694][0][][] */ 24,37,-30,-43,88,-5,24,6,41,3,-54,64,-48,-22,127,-20, 
  /* [695][0][][] */ -9,33,-43,-15,-127,54,-47,-123,17,91,3,13,36,-26,8,42, 
  /* [696][0][][] */ 45,30,10,41,127,76,-28,7,-46,13,34,-9,57,-18,-16,-82, 
  /* [697][0][][] */ -127,55,-95,-59,-21,51,85,52,75,-2,-61,-23,-98,32,-87,-58, 
  /* [698][0][][] */ -52,-117,-11,-26,-60,-4,127,74,-72,15,32,-122,60,-91,-40,-30, 
  /* [699][0][][] */ -15,24,29,36,99,-111,-25,83,20,-31,37,-91,-127,78,78,31, 
  /* [700][0][][] */ 33,66,127,-71,14,28,103,-60,-111,-107,-88,87,-72,-6,71,7, 
  /* [701][0][][] */ 40,21,127,9,125,23,18,49,-59,2,58,28,-39,-12,-57,-17, 
  /* [702][0][][] */ 75,4,-37,-47,127,-4,12,-5,42,-54,45,-66,22,-26,-50,-47, 
  /* [703][0][][] */ 47,-21,-36,-33,-127,-71,111,-99,42,-55,-99,20,116,69,54,-102, 
  /* [704][0][][] */ -36,-22,13,80,-4,3,67,10,68,-2,-127,-24,17,55,33,-45, 
  /* [705][0][][] */ 14,-22,-3,32,12,-8,29,15,-9,-41,63,41,56,127,-49,40, 
  /* [706][0][][] */ 79,81,32,30,1,127,-61,-33,-1,40,42,-36,43,-40,8,89, 
  /* [707][0][][] */ 9,-96,6,-127,-77,23,-44,-61,38,-90,-96,-26,-60,-27,-7,4, 
  /* [708][0][][] */ -127,-30,15,-37,4,14,-37,46,-99,-82,-17,24,-30,37,78,83, 
  /* [709][0][][] */ 13,-27,44,8,58,24,127,3,-38,31,72,18,100,60,-47,-64, 
  /* [710][0][][] */ -10,-14,56,26,-8,127,112,-20,11,125,25,40,-74,-17,-5,51, 
  /* [711][0][][] */ 101,14,-13,13,127,32,-7,-70,-23,5,13,41,-12,-12,-77,24, 
  /* [712][0][][] */ 66,-76,-7,18,14,83,-127,62,77,-97,-85,-27,-106,64,0,21, 
  /* [713][0][][] */ -14,-115,96,-96,29,100,27,-113,14,36,120,95,97,-75,-90,127, 
  /* [714][0][][] */ 66,49,-2,48,19,-15,-68,-57,-21,99,36,32,53,-56,-9,127, 
  /* [715][0][][] */ -46,2,-37,-120,51,-106,28,-14,127,10,-89,0,-10,36,34,65, 
  /* [716][0][][] */ 38,-24,-35,45,-15,15,24,79,1,-32,39,108,73,-47,-127,44, 
  /* [717][0][][] */ -14,-30,55,120,-65,-39,-127,-58,-31,105,-37,9,-37,127,-116,-108, 
  /* [718][0][][] */ -71,-10,-38,1,4,-127,-9,-57,11,-27,-34,-40,-113,97,19,-56, 
  /* [719][0][][] */ -7,13,-14,-72,19,-65,-37,60,-11,-8,-53,-7,72,-127,13,-66, 
  /* [720][0][][] */ -18,0,48,45,0,-44,4,47,-97,24,6,55,-52,-1,2,127, 
  /* [721][0][][] */ 49,58,73,65,-16,24,96,49,127,-34,21,8,-22,3,3,49, 
  /* [722][0][][] */ 22,-63,-5,-1,86,85,-8,-88,0,73,-114,30,-66,127,-33,-8, 
  /* [723][0][][] */ -11,15,10,-4,16,-25,15,55,-127,-59,-36,-37,-51,27,-67,59, 
  /* [724][0][][] */ -13,-49,-71,103,55,-44,127,116,49,-60,49,-57,-4,-43,1,-53, 
  /* [725][0][][] */ 39,-37,127,-15,21,42,18,-31,-16,-59,-34,8,-42,9,-10,-60, 
  /* [726][0][][] */ -18,-18,-1,92,-25,5,-43,3,-30,67,-127,25,39,2,-95,-24, 
  /* [727][0][][] */ -30,3,-77,22,114,12,-91,5,127,-97,8,36,-33,-45,52,53, 
  /* [728][0][][] */ -22,-10,25,36,-127,80,-84,1,46,56,67,51,88,-34,58,-18, 
  /* [729][0][][] */ -45,-17,56,16,-127,29,-35,30,80,75,13,33,38,59,36,-97, 
  /* [730][0][][] */ 74,-77,-97,56,-70,22,-31,-39,2,57,30,-30,35,3,127,-1, 
  /* [731][0][][] */ 10,-55,111,-127,29,50,-109,5,94,-77,63,-27,-79,26,56,46, 
  /* [732][0][][] */ 97,-66,-107,-55,-31,126,-94,26,13,-117,-5,-53,127,18,-57,-73, 
  /* [733][0][][] */ -21,-4,118,-5,74,48,39,44,76,67,127,1,-47,-80,-12,-68, 
  /* [734][0][][] */ 54,84,56,-69,92,-42,46,6,25,-42,-23,49,-127,56,-29,119, 
  /* [735][0][][] */ -81,116,-32,-110,-31,125,-32,-22,25,-4,76,-68,-103,-55,127,61, 
  /* [736][0][][] */ 4,14,-2,-23,15,-37,-6,78,60,40,-4,102,15,70,127,28, 
  /* [737][0][][] */ 127,46,0,3,-13,3,42,10,-64,32,-53,65,-7,33,46,-125, 
  /* [738][0][][] */ 96,0,26,-60,-100,-18,-14,127,107,-28,-1,33,71,67,58,-38, 
  /* [739][0][][] */ 66,24,19,7,33,96,43,10,103,56,5,-45,-96,127,-12,110, 
  /* [740][0][][] */ -10,36,38,110,-122,123,24,36,-99,86,95,8,127,-105,9,57, 
  /* [741][0][][] */ 35,-9,-51,-21,-55,-33,-31,-23,-11,6,-127,-20,69,-41,65,33, 
  /* [742][0][][] */ -6,-77,24,-69,-70,55,72,-106,-22,6,-17,-127,-53,-24,-41,-78, 
  /* [743][0][][] */ -101,-6,82,34,-15,-27,115,-19,-119,51,-1,127,-69,-91,-63,-97, 
  /* [744][0][][] */ -125,18,49,-55,-74,-11,37,-26,-72,31,113,41,74,8,127,101, 
  /* [745][0][][] */ 79,-38,28,-127,-100,-27,-75,66,61,3,-36,-12,13,1,-38,5, 
  /* [746][0][][] */ 127,-123,-27,-49,-84,-13,58,4,67,47,-43,-41,-21,-40,55,-26, 
  /* [747][0][][] */ -95,44,-34,-25,-30,19,15,17,-19,61,34,-15,-3,-127,94,-7, 
  /* [748][0][][] */ -107,11,86,95,70,-56,117,-70,-4,49,-127,119,-29,-28,48,67, 
  /* [749][0][][] */ -127,8,-16,-45,49,-7,-22,-46,-19,-1,74,4,32,40,-59,48, 
  /* [750][0][][] */ 3,-20,32,-127,-75,9,-40,62,-38,-63,-5,-3,66,16,-58,-7, 
  /* [751][0][][] */ -19,-24,52,-18,127,48,52,50,11,35,28,30,13,-25,20,-87, 
  /* [752][0][][] */ 7,31,-67,-29,122,-112,-22,21,-7,-96,98,46,0,127,-18,-45, 
  /* [753][0][][] */ -17,0,91,-45,64,-27,21,108,-3,-127,-54,49,-53,62,101,-48, 
  /* [754][0][][] */ 79,-36,-24,-44,-41,23,95,-50,7,-5,-19,-25,17,-127,-38,-72, 
  /* [755][0][][] */ 127,-5,-77,-70,28,-35,-9,-56,66,-10,46,-1,-27,116,24,-11, 
  /* [756][0][][] */ -10,-25,127,-47,-12,-51,17,64,55,-66,-78,116,2,-39,-33,-17, 
  /* [757][0][][] */ 50,-13,-34,21,-49,-9,-58,-127,50,84,-113,-32,56,-75,58,58, 
  /* [758][0][][] */ 59,0,-6,44,16,-3,74,-36,15,74,-127,-98,-12,-118,-29,-62, 
  /* [759][0][][] */ -3,32,-45,7,-80,-75,-41,-51,-35,-31,-12,67,34,25,72,127, 
  /* [760][0][][] */ 52,0,-68,55,57,-70,-68,33,111,-35,51,-127,-28,-29,-34,-1, 
  /* [761][0][][] */ -35,21,-86,31,-109,-62,-91,-24,-4,6,-15,-33,-21,28,-57,127, 
  /* [762][0][][] */ 65,-51,-39,8,-98,-39,-74,83,-127,28,-63,58,81,9,15,-101, 
  /* [763][0][][] */ 127,-74,-88,68,20,35,-21,-1,-30,-76,-106,-83,53,40,49,0, 
  /* [764][0][][] */ 63,127,-20,-67,-21,40,3,81,-5,-12,-75,47,103,83,-23,-113, 
  /* [765][0][][] */ 53,79,-51,80,88,-33,19,-25,127,35,24,-27,37,-64,5,36, 
  /* [766][0][][] */ 6,23,0,127,-81,40,48,89,19,-38,-3,26,23,-62,23,-58, 
  /* [767][0][][] */ 63,26,-17,-38,-127,-10,-34,-96,100,14,-81,57,97,31,118,53, 
  /* [768][0][][] */ 28,-102,42,8,39,6,-53,-59,-2,18,-127,-1,36,-7,87,-41, 
  /* [769][0][][] */ -81,25,127,-124,-91,110,-25,104,13,39,59,-11,92,-59,-88,61, 
  /* [770][0][][] */ 127,73,-78,92,68,32,22,-2,106,-80,127,39,11,-81,6,22, 
  /* [771][0][][] */ -56,48,6,-44,35,-10,31,-34,-9,13,-27,4,-25,-127,-4,-14, 
  /* [772][0][][] */ -1,53,-46,-66,-127,54,-12,-78,-31,-61,-31,20,92,-71,6,9, 
  /* [773][0][][] */ -29,63,21,88,45,-58,24,48,51,27,-118,-11,-38,127,89,29, 
  /* [774][0][][] */ -49,8,-2,-21,54,-5,-55,-41,25,-96,-60,1,-83,10,127,-45, 
  /* [775][0][][] */ 49,11,-45,10,-3,4,-12,-18,23,-121,13,127,-35,-19,-54,-89, 
  /* [776][0][][] */ 38,3,0,-5,28,2,-15,66,-127,23,50,-53,102,-31,21,33, 
  /* [777][0][][] */ 76,-74,24,-127,33,1,-59,93,18,-20,-88,7,40,16,-14,10, 
  /* [778][0][][] */ -66,27,-61,-99,55,50,56,59,-91,48,-69,-49,-127,48,97,-72, 
  /* [779][0][][] */ -3,31,6,54,-38,-35,27,20,4,-38,56,127,58,45,-12,-9, 
  /* [780][0][][] */ 19,-35,47,-21,-55,10,-40,-19,25,11,-42,10,10,127,93,9, 
  /* [781][0][][] */ 12,-28,109,-66,127,23,-20,19,53,59,0,-4,-45,-49,-95,-61, 
  /* [782][0][][] */ 14,90,75,53,26,43,127,-43,-22,-6,-23,-1,45,4,2,0, 
  /* [783][0][][] */ 46,-14,-80,-50,-19,3,30,81,-69,60,27,63,-48,-10,-32,127, 
  /* [784][0][][] */ -20,18,-25,51,17,127,18,-47,-65,-19,-49,-4,-8,40,-16,-47, 
  /* [785][0][][] */ 23,6,-43,25,26,-18,-63,42,85,43,-127,-91,1,65,90,6, 
  /* [786][0][][] */ 100,8,-8,0,67,-103,37,-65,-82,7,36,39,-30,-6,71,127, 
  /* [787][0][][] */ -77,-71,-60,-14,-7,27,-1,24,-72,37,50,4,-127,-87,14,54, 
  /* [788][0][][] */ 127,76,-16,49,-17,13,47,-38,32,-72,61,-6,-72,62,-11,-85, 
  /* [789][0][][] */ -17,-74,-36,21,2,68,-42,36,-127,-35,-24,97,54,27,102,-21, 
  /* [790][0][][] */ -61,-38,-50,-24,-56,61,-14,-6,39,-96,-41,29,-3,-127,-37,-11, 
  /* [791][0][][] */ 84,-12,-22,6,39,-20,59,32,18,93,56,-24,16,127,-43,26, 
  /* [792][0][][] */ -22,111,-106,92,-6,-121,16,-74,25,-64,-67,111,-73,11,75,127, 
  /* [793][0][][] */ -73,-102,115,-90,-56,-57,127,127,70,22,6,106,94,109,-46,58, 
  /* [794][0][][] */ -27,-42,64,35,-16,-64,9,10,47,53,-127,-56,-104,2,124,-15, 
  /* [795][0][][] */ 63,102,127,-8,20,104,-124,-28,123,28,-101,-61,43,58,57,-61, 
  /* [796][0][][] */ 64,-34,62,70,127,-5,-93,13,-20,1,71,-95,33,-87,-63,-105, 
  /* [797][0][][] */ -45,-41,-44,51,-127,39,96,108,77,35,-19,-87,13,105,50,-17, 
  /* [798][0][][] */ -14,57,19,-28,21,6,6,-28,60,-4,94,30,44,-41,127,-4, 
  /* [799][0][][] */ 32,50,-7,-23,32,19,41,-57,63,-20,127,10,-3,9,65,50, 
  /* [800][0][][] */ -22,32,-53,19,-30,48,17,48,28,-73,104,122,57,-127,1,15, 
  /* [801][0][][] */ -92,0,-10,8,-24,-48,-117,-90,-113,-89,-120,66,-48,-127,20,72, 
  /* [802][0][][] */ 1,66,-34,-113,42,61,-25,127,4,23,10,57,24,-95,-98,-57, 
  /* [803][0][][] */ -127,-69,-5,-69,17,15,-6,-67,34,-92,28,-17,-71,-56,30,0, 
  /* [804][0][][] */ -8,19,-33,-13,127,-24,47,-59,-26,7,12,-84,-42,-122,-20,69, 
  /* [805][0][][] */ -24,2,-5,-7,78,-39,-2,8,-26,-11,61,53,-38,-71,10,127, 
  /* [806][0][][] */ 0,23,70,-28,40,31,-127,-37,124,-6,-83,53,-6,-41,-5,100, 
  /* [807][0][][] */ -18,-21,49,77,125,43,59,33,34,-13,73,84,97,23,93,-127, 
  /* [808][0][][] */ 6,55,48,-127,-37,-2,-8,-19,34,32,-31,49,-72,117,43,-3, 
  /* [809][0][][] */ -35,-122,-46,-47,-41,29,-112,-6,-39,-37,21,-52,-59,127,5,-27, 
  /* [810][0][][] */ 79,25,70,-120,-16,24,-127,-84,-71,-93,-96,42,-48,69,-61,109, 
  /* [811][0][][] */ 125,-113,43,106,-50,24,60,-127,6,86,74,27,81,4,-42,-71, 
  /* [812][0][][] */ -21,-22,-34,-6,-12,16,-86,6,-75,3,40,118,102,24,51,127, 
  /* [813][0][][] */ -101,-20,-32,44,-52,40,127,-80,-86,-68,-26,50,44,44,12,-86, 
  /* [814][0][][] */ -25,-54,10,-81,-26,-6,-39,-18,-27,10,4,127,58,27,40,-58, 
  /* [815][0][][] */ 46,11,15,-41,-22,31,-28,15,-32,-29,127,70,51,113,-24,-28, 
  /* [816][0][][] */ -11,98,-83,127,49,-124,13,13,39,-4,82,-11,20,72,25,-14, 
  /* [817][0][][] */ 43,-7,-22,-28,-21,40,-23,1,62,-14,20,-14,8,127,16,32, 
  /* [818][0][][] */ 53,-19,-34,101,104,49,86,60,68,21,-28,-22,67,-65,-127,29, 
  /* [819][0][][] */ -26,75,-8,-71,71,89,21,-27,-68,-20,49,-87,127,-100,-119,-100, 
  /* [820][0][][] */ -100,-55,50,59,-24,40,-2,-12,-102,27,27,-2,96,-66,127,86, 
  /* [821][0][][] */ -50,-16,127,-5,37,22,101,61,41,65,62,-11,-3,-2,-36,-15, 
  /* [822][0][][] */ 115,17,-83,-18,-127,-52,-34,3,42,9,33,37,-26,43,34,52, 
  /* [823][0][][] */ 112,77,77,-68,-28,-22,46,82,18,-8,-4,-7,31,-99,127,-14, 
  /* [824][0][][] */ -44,-37,-2,-95,-127,35,-45,44,14,-16,-6,39,34,-10,12,23, 
  /* [825][0][][] */ 33,24,-4,-14,-40,23,27,-5,-11,-76,127,13,-3,92,5,-41, 
  /* [826][0][][] */ -38,-2,-90,29,-58,15,-81,127,8,84,101,61,54,59,42,90, 
  /* [827][0][][] */ 9,-34,125,0,127,-4,60,107,-64,45,17,65,-22,2,-113,-62, 
  /* [828][0][][] */ 127,16,13,-72,33,-20,29,6,87,69,-47,-42,-101,20,-71,36, 
  /* [829][0][][] */ -65,24,68,82,37,8,-127,75,2,55,-37,90,93,28,20,40, 
  /* [830][0][][] */ 29,-50,-26,-51,127,74,67,126,18,-5,43,-53,-20,40,92,120, 
  /* [831][0][][] */ -118,79,-86,112,-108,16,-127,-79,-61,96,-66,78,80,93,-39,0, 
  /* [832][0][][] */ -20,80,-52,-50,-9,28,11,25,23,-19,-115,22,-5,-127,117,-5, 
  /* [833][0][][] */ -43,-4,-80,44,-22,81,-53,9,95,109,-13,-19,35,80,-10,127, 
  /* [834][0][][] */ -47,44,-60,56,1,99,30,22,81,127,-42,-32,-45,65,-80,-76, 
  /* [835][0][][] */ 73,42,-16,-51,-73,73,-38,-39,-45,-40,-66,-26,56,24,127,49, 
  /* [836][0][][] */ -40,-91,60,127,11,-6,-18,-31,36,-5,33,-21,20,57,-10,20, 
  /* [837][0][][] */ -11,-2,12,54,-37,-12,86,30,-38,42,127,-46,35,-12,87,-3, 
  /* [838][0][][] */ 30,13,127,-62,-34,20,91,-46,101,75,12,-44,67,-63,-31,-93, 
  /* [839][0][][] */ 69,29,12,-43,-34,56,24,-21,22,-36,127,55,-54,9,-20,26, 
  /* [840][0][][] */ -54,-101,-33,12,85,24,-127,-55,20,16,-26,-2,-46,-45,-33,4, 
  /* [841][0][][] */ 111,20,9,109,38,-37,45,-1,-100,-9,4,127,70,-120,-8,39, 
  /* [842][0][][] */ -127,37,-16,60,-45,-95,106,-6,30,-20,-110,13,-49,106,-27,65, 
  /* [843][0][][] */ -116,56,-22,-100,-23,41,17,-19,-35,-62,-46,-113,-127,8,-77,102, 
  /* [844][0][][] */ 32,-63,-26,60,-13,-20,-49,36,73,-127,-11,126,27,-75,48,9, 
  /* [845][0][][] */ 42,-116,-70,13,22,-62,48,127,14,-52,11,-49,15,14,-32,-16, 
  /* [846][0][][] */ -113,-57,-76,93,61,71,76,-88,18,-48,-33,-127,-22,54,62,-12, 
  /* [847][0][][] */ 40,81,4,53,-47,-16,-7,43,42,-30,-15,127,81,52,24,66, 
  /* [848][0][][] */ 7,31,-49,92,-75,-90,-1,-41,12,-59,-109,15,31,89,127,-19, 
  /* [849][0][][] */ 100,40,75,-46,4,92,102,-86,40,127,-47,6,88,6,82,-40, 
  /* [850][0][][] */ 12,0,-13,7,-16,0,49,-16,21,-59,-49,-11,61,127,99,46, 
  /* [851][0][][] */ 78,33,-19,-47,47,27,-88,61,127,53,-3,86,22,16,48,56, 
  /* [852][0][][] */ 127,-68,-39,-50,-18,-57,-7,-46,51,-79,-21,-72,-36,84,58,-74, 
  /* [853][0][][] */ 49,45,18,14,-25,-85,-34,-66,-1,16,11,-8,-115,51,127,-42, 
  /* [854][0][][] */ 55,-1,-127,-17,-122,-32,-110,-69,71,-80,-74,32,26,31,121,58, 
  /* [855][0][][] */ 34,-36,15,-12,-105,-39,-40,-127,7,58,-35,68,34,34,30,34, 
  /* [856][0][][] */ -78,20,40,-127,49,109,-15,-123,11,86,119,-78,53,79,-111,-15, 
  /* [857][0][][] */ -7,-87,59,-98,127,-52,-65,-25,62,-99,-23,76,-35,-108,-28,-14, 
  /* [858][0][][] */ -103,127,-13,-14,102,10,55,50,-21,88,4,0,-39,-2,0,43, 
  /* [859][0][][] */ 8,13,-24,11,-70,-127,-98,0,81,-9,-21,96,-115,85,-22,-11, 
  /* [860][0][][] */ -108,-68,-84,-30,82,53,38,-46,127,-21,-75,17,-42,104,-14,30, 
  /* [861][0][][] */ -10,-34,61,-47,-92,-76,-127,112,63,20,8,-12,-115,112,-27,-40, 
  /* [862][0][][] */ 2,-97,-83,74,48,-33,37,40,-31,63,92,-127,2,121,60,-13, 
  /* [863][0][][] */ -53,40,17,-7,86,-61,83,-76,-94,34,51,18,-81,-127,84,-11, 
  /* [864][0][][] */ 45,-20,-20,-60,9,-20,42,-37,79,-17,-59,7,-8,-31,127,0, 
  /* [865][0][][] */ 2,-75,26,-21,-4,-2,70,-35,-68,-59,-28,10,-25,127,23,-17, 
  /* [866][0][][] */ -4,31,-3,-17,-18,55,127,49,-67,27,-9,-63,-9,-32,11,-16, 
  /* [867][0][][] */ 62,-33,74,59,46,60,16,106,44,49,21,-74,38,-29,127,-28, 
  /* [868][0][][] */ 45,68,92,42,-127,-106,58,61,-36,36,-111,94,86,100,125,-58, 
  /* [869][0][][] */ -48,19,-41,24,51,66,-74,-20,-30,-12,45,-74,127,-104,-50,58, 
  /* [870][0][][] */ -117,-79,-64,12,-45,-118,-3,-27,-18,30,98,127,1,-34,-67,60, 
  /* [871][0][][] */ -17,-51,-3,49,1,23,-1,23,27,127,-14,-8,-9,2,24,-54, 
  /* [872][0][][] */ 36,-23,3,-43,-37,29,-43,79,0,3,9,2,127,50,-4,75, 
  /* [873][0][][] */ -70,-29,-121,82,101,42,19,-119,17,-2,6,-48,40,-48,-127,-110, 
  /* [874][0][][] */ 125,35,-49,-44,20,-16,36,127,-71,-85,-81,-5,27,-12,21,19, 
  /* [875][0][][] */ -73,44,-41,-20,-127,38,66,0,60,77,71,59,34,58,-38,25, 
  /* [876][0][][] */ -11,-44,-53,-18,-39,-50,-31,60,-2,-53,61,-66,10,-60,29,127, 
  /* [877][0][][] */ 30,-29,127,42,124,123,-89,35,45,121,19,-27,-23,16,-107,-85, 
  /* [878][0][][] */ -39,77,-45,54,-7,16,61,-13,-42,-62,-18,-65,-127,18,-12,-24, 
  /* [879][0][][] */ 33,127,-73,71,-9,113,7,-99,18,32,-48,-31,107,46,23,-16, 
  /* [880][0][][] */ 14,-25,-39,-10,98,40,9,23,-27,22,-32,-127,59,-5,3,-83, 
  /* [881][0][][] */ -109,-45,11,-91,-72,103,-127,-88,24,43,66,0,-6,-55,-22,25, 
  /* [882][0][][] */ -120,-24,-5,52,16,-61,-82,45,54,60,101,86,127,-11,75,6, 
  /* [883][0][][] */ -39,-3,0,70,94,-127,83,-28,57,-35,-12,-102,82,-38,-35,15, 
  /* [884][0][][] */ 66,127,21,2,-29,38,-9,31,-57,10,62,51,74,-20,46,-125, 
  /* [885][0][][] */ -43,-77,-78,2,-22,-83,-14,-17,-73,-49,30,-15,-127,-39,-34,-103, 
  /* [886][0][][] */ 71,31,-35,54,127,-16,-90,3,57,-9,11,89,-7,-4,54,-102, 
  /* [887][0][][] */ -53,76,127,8,21,-57,-47,-39,28,44,-36,55,19,-25,-5,-19, 
  /* [888][0][][] */ -69,-4,7,-127,-67,-13,15,75,43,-11,-83,-59,-100,-53,-44,54, 
  /* [889][0][][] */ 1,7,-68,91,-2,-24,-45,-23,-57,34,127,27,2,-3,11,7, 
  /* [890][0][][] */ -81,-67,54,-86,-15,127,43,-15,39,11,17,13,-19,-78,-29,-65, 
  /* [891][0][][] */ -24,2,127,-46,36,64,-15,-17,64,-11,-1,25,32,-17,8,-49, 
  /* [892][0][][] */ 41,7,-42,55,42,1,-25,-19,-127,78,-5,-27,19,6,-48,-109, 
  /* [893][0][][] */ -3,-11,-24,-31,47,-11,-49,28,90,-127,65,6,-58,-3,31,-89, 
  /* [894][0][][] */ 127,-25,-97,-36,30,-32,64,-41,30,-71,-6,-53,-2,3,-46,-120, 
  /* [895][0][][] */ -36,-61,93,42,-20,-64,-120,22,44,-127,25,-15,53,-46,65,-59, 
  /* [896][0][][] */ 46,1,-21,122,92,-2,96,-107,80,-49,-8,-108,-127,45,-38,-70, 
  /* [897][0][][] */ -11,-29,12,-74,21,78,99,-41,-112,55,127,67,112,116,-112,-50, 
  /* [898][0][][] */ -5,116,-12,-51,38,33,42,-1,-66,-21,94,110,68,88,-82,-127, 
  /* [899][0][][] */ 85,-37,85,-10,-62,94,25,92,68,-25,-22,99,59,127,-68,-53, 
  /* [900][0][][] */ -21,-26,50,-100,-33,115,-99,22,37,-96,11,-7,-127,2,127,86, 
  /* [901][0][][] */ 17,120,110,-107,-19,49,-108,-98,2,112,-127,-13,15,-23,-98,81, 
  /* [902][0][][] */ -100,13,-31,25,-35,-3,-95,-127,-28,18,42,-34,-9,-47,118,-48, 
  /* [903][0][][] */ -41,124,12,-12,-76,31,-81,-127,-4,-15,-35,-81,76,19,39,4, 
  /* [904][0][][] */ 126,5,33,89,93,10,38,31,-47,59,-72,11,-39,-30,94,127, 
  /* [905][0][][] */ 119,49,3,52,-41,127,62,-3,109,74,4,-28,28,32,36,101, 
  /* [906][0][][] */ 67,-53,53,-58,-15,-10,6,127,-39,-69,-17,11,58,32,91,-67, 
  /* [907][0][][] */ 59,-51,9,79,10,-42,60,-29,-11,33,-11,127,57,22,118,4, 
  /* [908][0][][] */ -9,28,-32,-35,-126,-6,-96,-90,-113,98,3,127,-12,-103,18,-10, 
  /* [909][0][][] */ 58,19,16,55,17,115,64,19,-46,-27,-105,110,122,127,10,-16, 
  /* [910][0][][] */ -127,-57,-8,-27,-31,28,-31,-54,-87,-4,19,21,36,-33,-33,7, 
  /* [911][0][][] */ 39,34,8,-6,21,14,-18,26,-127,-50,-66,11,-9,24,2,-22, 
  /* [912][0][][] */ -15,-127,15,-64,24,-14,77,-89,97,-50,17,-79,-41,27,-30,1, 
  /* [913][0][][] */ 127,43,-11,32,18,43,-29,-38,-126,16,-23,22,95,11,27,16, 
  /* [914][0][][] */ 68,31,66,0,72,59,-25,-127,76,29,-16,-46,-114,16,6,-71, 
  /* [915][0][][] */ 35,-4,6,-2,127,-123,1,110,67,65,69,45,46,-43,54,84, 
  /* [916][0][][] */ -15,-33,26,-62,87,68,75,127,-7,31,60,-45,-38,40,-48,-53, 
  /* [917][0][][] */ -15,22,-40,127,-60,-11,-10,66,-33,62,52,-69,120,73,-75,42, 
  /* [918][0][][] */ 68,-62,-17,47,36,-30,-18,9,55,72,112,-100,11,-127,1,64, 
  /* [919][0][][] */ 0,-39,39,11,24,-86,-106,127,18,-60,9,-28,45,21,14,24, 
  /* [920][0][][] */ 39,-88,68,-35,-50,97,-79,-35,-2,35,44,49,127,6,112,-38, 
  /* [921][0][][] */ -69,-19,6,126,-41,-5,-28,-24,-42,127,14,13,43,-28,-44,80, 
  /* [922][0][][] */ -12,10,-66,53,-41,-127,6,58,-66,15,1,25,91,35,17,-24, 
  /* [923][0][][] */ 7,40,5,53,52,-23,-9,23,20,-22,48,22,127,13,-71,-8, 
  /* [924][0][][] */ 6,49,-25,18,-19,127,37,-127,25,-12,31,-2,51,4,-101,-44, 
  /* [925][0][][] */ -1,32,-103,-7,26,44,-19,-80,-20,-32,69,21,127,-71,-45,-54, 
  /* [926][0][][] */ -94,-5,58,-20,-127,20,6,-12,-19,52,-3,-24,39,78,17,-95, 
  /* [927][0][][] */ 47,28,-73,55,-106,52,-43,-39,27,-127,-26,-73,-25,5,21,4, 
  /* [928][0][][] */ 26,-18,-71,127,10,25,14,74,7,-60,-50,-5,21,-7,-12,17, 
  /* [929][0][][] */ 36,120,-62,-94,-25,-47,58,75,36,-37,-16,-127,-109,13,-81,-1, 
  /* [930][0][][] */ -53,11,-32,52,-127,-75,-17,-51,88,107,9,-11,-5,-32,-59,-42, 
  /* [931][0][][] */ 20,-31,5,39,-21,-96,54,127,-28,29,86,-57,0,-60,-61,97, 
  /* [932][0][][] */ -16,-37,11,33,-55,23,21,-4,-10,-6,-14,45,38,127,-16,-93, 
  /* [933][0][][] */ -3,24,-2,-8,33,-15,17,-73,-111,127,23,-127,98,7,-118,4, 
  /* [934][0][][] */ -47,37,-64,27,23,-91,11,52,-43,6,78,-47,89,-4,-108,127, 
  /* [935][0][][] */ -75,36,-39,7,-52,5,-63,9,-38,-51,-127,-22,-14,54,-91,21, 
  /* [936][0][][] */ 49,-20,70,12,-38,30,63,21,111,21,58,-37,-13,45,127,44, 
  /* [937][0][][] */ -52,-127,30,-52,63,18,-110,-72,-38,-86,-9,-27,-63,-60,59,-1, 
  /* [938][0][][] */ 25,41,2,25,-98,56,-60,28,127,-104,-26,43,-86,8,-29,4, 
  /* [939][0][][] */ 5,22,-40,-24,-78,38,-19,-127,78,-10,-33,4,-31,-104,-6,120, 
  /* [940][0][][] */ 31,34,38,-12,-6,18,2,127,82,-20,-72,-42,-49,49,63,-44, 
  /* [941][0][][] */ -36,21,-35,21,116,19,53,38,-1,-9,-2,-52,-12,-32,127,-23, 
  /* [942][0][][] */ -60,-42,31,-21,31,127,34,-22,79,-10,-27,4,7,6,84,-32, 
  /* [943][0][][] */ -40,-42,29,6,2,115,46,-67,68,75,-7,-16,43,127,-67,-68, 
  /* [944][0][][] */ 104,-40,-94,66,15,89,54,-50,72,-15,-88,-127,8,-8,15,33, 
  /* [945][0][][] */ -112,121,71,101,98,-53,13,10,127,-42,11,-18,52,10,43,106, 
  /* [946][0][][] */ 81,56,-36,-120,101,127,6,-74,-10,13,-88,82,-30,-13,-24,27, 
  /* [947][0][][] */ 108,-46,42,127,21,44,-71,-28,-5,70,88,22,66,-38,48,-24, 
  /* [948][0][][] */ 9,-33,38,-89,-14,54,42,44,127,57,15,39,46,-9,-16,-116, 
  /* [949][0][][] */ -28,-3,-52,32,18,16,-14,0,41,-127,30,57,-20,9,-38,54, 
  /* [950][0][][] */ 95,127,6,62,11,-7,-18,68,110,8,89,-2,9,-4,25,78, 
  /* [951][0][][] */ 47,-18,55,-77,55,21,3,-57,127,-21,-81,89,22,-113,125,34, 
  /* [952][0][][] */ -3,5,81,-76,-44,83,-13,-38,-35,-35,49,55,0,-127,33,-25, 
  /* [953][0][][] */ 117,-1,85,-28,90,73,127,94,-103,-40,-61,-22,96,49,1,-69, 
  /* [954][0][][] */ 7,-66,102,23,127,-4,61,-1,-61,27,67,18,8,-49,-93,61, 
  /* [955][0][][] */ -85,54,37,-55,79,77,-44,2,24,44,-44,91,-127,19,-40,-68, 
  /* [956][0][][] */ 41,69,11,-23,-5,18,11,-21,-35,-38,127,2,10,25,-24,-3, 
  /* [957][0][][] */ -127,-70,61,-39,-43,98,-71,32,-118,-13,-41,76,40,-22,-20,17, 
  /* [958][0][][] */ -68,33,31,-81,127,10,14,5,-68,-15,-56,54,94,68,47,58, 
  /* [959][0][][] */ -16,-21,-8,42,-84,52,2,-15,45,23,36,21,10,-8,-28,127, 
  /* [960][0][][] */ 63,57,14,0,58,-92,24,11,127,1,-4,-57,103,32,-91,-3, 
  /* [961][0][][] */ -35,7,53,-48,56,-11,-127,-47,-17,-123,-39,-7,-23,35,-12,-30, 
  /* [962][0][][] */ -59,39,-14,-106,-8,-66,-101,-120,73,-70,-127,64,81,50,1,122, 
  /* [963][0][][] */ 43,48,-45,2,-34,-29,-99,-27,127,-21,89,-87,-72,-68,-50,112, 
  /* [964][0][][] */ 37,28,-1,-21,58,73,-52,52,9,19,6,-89,37,51,-127,-90, 
  /* [965][0][][] */ -31,65,-14,-10,16,50,-127,11,28,66,19,16,2,77,84,-48, 
  /* [966][0][][] */ 127,48,44,23,41,-26,31,-25,73,42,-73,-15,1,-40,25,-3, 
  /* [967][0][][] */ -48,23,63,-48,127,29,-6,41,-57,0,-33,49,-56,-42,-89,-65, 
  /* [968][0][][] */ 25,-63,48,-103,68,27,24,-86,-127,-50,14,28,-45,38,51,-9, 
  /* [969][0][][] */ -46,17,4,-35,16,24,-35,-127,-41,29,68,48,3,54,49,-55, 
  /* [970][0][][] */ 8,-32,-60,43,108,11,-9,-127,106,111,-2,-71,90,-41,50,6, 
  /* [971][0][][] */ -14,-91,-23,18,-29,-45,-10,-23,-45,-53,3,127,34,50,-57,-1, 
  /* [972][0][][] */ 10,-23,45,-40,-15,-10,65,-127,61,-9,-23,3,-41,87,-23,78, 
  /* [973][0][][] */ 88,46,14,-114,44,127,-31,50,-31,6,-111,-21,-93,-15,22,-31, 
  /* [974][0][][] */ 52,-29,-25,-49,-40,-45,-61,-127,-40,-25,-23,96,-33,26,67,41, 
  /* [975][0][][] */ -24,-2,-16,53,16,-4,78,-30,127,-125,-41,-1,27,-95,-68,16, 
  /* [976][0][][] */ 63,-93,45,30,-100,32,-52,4,61,38,-58,-127,-50,-70,-97,89, 
  /* [977][0][][] */ 31,81,57,40,89,0,-38,-12,72,52,36,-43,-15,-34,86,127, 
  /* [978][0][][] */ 41,82,48,-40,80,36,-48,-127,-52,22,-56,46,-14,-47,124,-87, 
  /* [979][0][][] */ -53,54,58,24,-39,-2,42,29,88,127,-20,-14,40,45,57,124, 
  /* [980][0][][] */ -21,-87,-25,-34,-40,127,19,-3,-30,-16,33,-37,-48,-11,-68,-48, 
  /* [981][0][][] */ -112,26,25,-52,-127,34,-32,17,124,80,2,-11,23,68,-5,-101, 
  /* [982][0][][] */ 11,51,4,-35,36,-22,-34,2,-16,31,-99,-17,127,-100,-51,-95, 
  /* [983][0][][] */ 54,-13,-97,1,42,-53,26,-8,127,9,-62,-38,3,15,75,-66, 
  /* [984][0][][] */ -47,-22,26,62,52,62,75,-36,-42,68,-58,63,40,-18,-127,-9, 
  /* [985][0][][] */ -127,-3,81,-43,-44,-69,68,46,74,-36,-72,-27,-39,14,-125,-8, 
  /* [986][0][][] */ 21,-21,-29,70,127,-10,16,-40,-83,-2,25,-81,-13,-16,17,12, 
  /* [987][0][][] */ 33,41,35,-16,8,-15,-127,28,-28,43,7,-14,29,-27,86,-26, 
  /* [988][0][][] */ -127,19,-4,-37,-18,3,-42,17,-24,-16,8,-28,1,-40,18,-92, 
  /* [989][0][][] */ 85,8,-2,-22,95,-21,-49,-127,-59,-18,-49,52,-7,67,32,6, 
  /* [990][0][][] */ -51,38,-46,-15,-38,91,45,14,-2,8,-60,36,-49,-55,-127,55, 
  /* [991][0][][] */ 127,-19,31,-37,-44,10,89,-68,-28,37,-41,-22,18,-34,126,19, 
  /* [992][0][][] */ 34,8,114,23,-33,127,-4,30,-66,-4,-95,1,-16,0,-82,-30, 
  /* [993][0][][] */ 46,18,41,-122,-41,70,-127,-39,-75,59,-49,41,25,-86,-65,-14, 
  /* [994][0][][] */ -80,-29,-121,47,-62,-17,-1,-14,72,64,7,46,-127,49,-3,-23, 
  /* [995][0][][] */ -127,60,-52,-56,-76,21,108,62,-18,-77,-9,28,-9,-15,44,43, 
  /* [996][0][][] */ 26,2,44,-58,35,-89,-127,22,-27,-77,19,0,-6,38,60,2, 
  /* [997][0][][] */ -92,-1,36,3,103,-103,16,-92,113,-127,-6,13,65,76,14,106, 
  /* [998][0][][] */ -7,-121,64,31,32,-127,-36,-100,-22,-13,-10,-47,-61,-15,72,-53, 
  /* [999][0][][] */ -21,20,-34,38,127,-15,13,-18,-38,21,32,1,-3,22,40,21, 
  /* [1000][0][][] */ -26,18,127,-87,-19,70,-5,4,77,69,91,67,14,-11,-12,-81, 
  /* [1001][0][][] */ -94,87,-12,34,-20,4,37,-88,-109,15,93,-3,-3,127,29,-19, 
  /* [1002][0][][] */ 22,-5,-99,-64,66,-53,-70,-127,76,52,-5,-20,-26,-52,-46,-40, 
  /* [1003][0][][] */ -9,16,-102,-36,-5,49,62,11,46,-9,-51,-53,-31,68,127,-18, 
  /* [1004][0][][] */ 39,-47,-8,-26,-127,-19,51,-38,-9,-66,-50,38,-110,11,-64,-45, 
  /* [1005][0][][] */ 17,33,-8,7,-14,19,-108,56,-59,-127,-125,118,-80,116,-24,-81, 
  /* [1006][0][][] */ -67,3,127,-14,60,46,104,23,-15,83,-50,-14,14,26,-32,-78, 
  /* [1007][0][][] */ -17,13,-6,32,-2,-59,-86,-57,-11,-127,44,-13,-20,-30,39,51, 
  /* [1008][0][][] */ -31,-6,-13,-7,-108,5,20,-43,-5,65,48,-31,127,-56,-55,56, 
  /* [1009][0][][] */ 59,-35,83,75,53,-8,-14,-16,96,49,-73,102,-41,3,-84,127, 
  /* [1010][0][][] */ -11,45,-5,-4,-127,5,-58,-25,86,-33,-87,4,10,45,27,71, 
  /* [1011][0][][] */ 40,-103,16,2,24,127,23,-49,63,-56,-58,-5,-39,54,14,20, 
  /* [1012][0][][] */ -127,26,-95,125,-27,34,116,55,25,65,-10,-32,-69,-62,102,109, 
  /* [1013][0][][] */ 101,-31,76,-127,-59,21,-43,54,-48,35,-27,-14,108,-103,-13,104, 
  /* [1014][0][][] */ -36,-7,-23,-127,2,-11,27,-4,-46,94,-29,10,40,-40,7,4, 
  /* [1015][0][][] */ -85,127,59,-20,66,-25,99,5,-9,-23,61,-28,-113,-68,91,-109, 
  /* [1016][0][][] */ 122,-51,-26,65,59,47,-10,116,127,-47,50,-57,42,94,112,-112, 
  /* [1017][0][][] */ 42,29,11,-22,-107,-76,73,12,4,-40,-127,15,25,-101,93,-114, 
  /* [1018][0][][] */ 48,-1,35,-64,-8,28,1,25,13,-42,-4,60,25,127,-4,-6, 
  /* [1019][0][][] */ -13,-68,2,44,-43,-126,-51,103,30,-89,1,-84,0,9,127,21, 
  /* [1020][0][][] */ -93,27,6,7,127,94,-80,-41,-71,-47,31,-26,-2,-62,11,13, 
  /* [1021][0][][] */ -70,14,69,-127,-17,58,-4,6,42,33,-43,16,-23,1,30,31, 
  /* [1022][0][][] */ 125,-33,53,31,5,22,88,-127,102,-4,-23,-56,-22,0,34,42, 
  /* [1023][0][][] */ 0,-41,86,-45,13,-48,76,-19,46,61,-55,60,-19,-127,89,-9, 
  /* [1024][0][][] */ 87,67,-23,9,-121,16,-24,-45,102,53,-53,-1,56,-127,-46,70, 
  /* [1025][0][][] */ -17,16,78,-29,95,-8,-25,123,89,16,5,127,40,74,29,-24, 
  /* [1026][0][][] */ 39,-13,56,-114,16,117,-11,55,-42,51,-50,-127,87,121,17,-104, 
  /* [1027][0][][] */ 50,71,-104,-23,52,39,105,68,127,33,-9,-80,-37,34,73,30, 
  /* [1028][0][][] */ -100,46,-3,-4,66,39,-3,-3,-20,19,43,105,25,5,26,127, 
  /* [1029][0][][] */ -3,67,-127,4,-106,-58,-5,-70,109,-4,75,29,12,-101,-15,33, 
  /* [1030][0][][] */ -44,9,12,-8,44,24,127,-32,-59,-35,120,71,34,12,18,0, 
  /* [1031][0][][] */ -42,31,6,-127,-9,54,28,-4,-32,-15,-12,11,-37,-5,-116,3, 
  /* [1032][0][][] */ -47,-62,-8,-44,-78,26,-48,75,-58,108,-39,127,-35,56,-54,97, 
  /* [1033][0][][] */ 78,6,50,-15,23,127,-16,-2,1,24,66,39,7,-73,-112,-59, 
  /* [1034][0][][] */ 53,35,75,8,127,25,-11,94,66,65,22,54,-39,-40,-40,-87, 
  /* [1035][0][][] */ 28,-75,98,-62,127,-50,16,-29,-63,-51,3,-42,-5,-93,-23,68, 
  /* [1036][0][][] */ 50,-3,127,-32,32,-75,-43,38,10,105,21,-53,13,59,17,44, 
  /* [1037][0][][] */ -43,14,68,-127,-31,26,61,56,-8,2,-82,34,-38,54,-20,-40, 
  /* [1038][0][][] */ -127,-3,89,-31,107,15,50,35,15,-3,42,6,-102,-47,-29,-26, 
  /* [1039][0][][] */ -53,-10,127,-97,-85,-59,-16,55,-68,-49,-33,22,19,-119,34,19, 
  /* [1040][0][][] */ -47,-1,-99,-26,53,127,-45,-56,-38,-54,92,51,-96,-23,16,-15, 
  /* [1041][0][][] */ -30,24,12,-2,100,-24,-24,-64,47,14,-31,-14,14,4,-24,-127, 
  /* [1042][0][][] */ -13,11,39,8,7,93,-10,58,21,48,58,-62,127,82,46,-11, 
  /* [1043][0][][] */ 27,63,-14,11,-12,-53,-72,6,59,77,-79,100,127,51,71,72, 
  /* [1044][0][][] */ -67,-127,-43,-7,-27,3,-2,-2,-90,-51,89,-9,-22,-94,-93,81, 
  /* [1045][0][][] */ 8,-17,14,24,42,84,-11,-6,-123,-34,-38,-59,127,-28,54,78, 
  /* [1046][0][][] */ 26,-6,84,-14,-84,97,-57,15,100,20,14,-56,-125,127,-1,37, 
  /* [1047][0][][] */ -88,47,15,127,8,-26,37,-19,-113,48,-120,94,-78,14,28,-24, 
  /* [1048][0][][] */ -58,-3,22,91,49,64,3,35,-89,-36,-11,31,26,127,-58,-15, 
  /* [1049][0][][] */ 65,50,77,-7,7,-56,-26,-127,98,20,-23,-66,-3,-88,27,95, 
  /* [1050][0][][] */ -34,-22,-84,-52,34,55,-83,-27,5,-16,23,-19,53,-14,127,-5, 
  /* [1051][0][][] */ 48,-15,-17,-12,5,18,-21,11,-22,4,-20,79,-46,127,51,54, 
  /* [1052][0][][] */ 127,-101,-33,-38,105,33,2,-38,2,60,2,79,-20,-79,-38,26, 
  /* [1053][0][][] */ 39,25,20,-64,5,-17,-127,9,30,-52,-27,12,-59,-6,34,-39, 
  /* [1054][0][][] */ 47,-39,127,28,4,-55,24,22,-117,-30,-49,-22,6,21,-42,64, 
  /* [1055][0][][] */ -54,-24,-21,12,18,3,107,34,-13,-64,127,96,54,108,56,-82, 
  /* [1056][0][][] */ 14,-58,-51,-12,107,36,-22,-53,27,-31,-14,-37,21,127,-18,-18, 
  /* [1057][0][][] */ 7,48,46,20,-16,-10,43,-127,31,71,28,13,65,37,-53,38, 
  /* [1058][0][][] */ -56,-127,54,12,-35,4,37,22,-1,34,-64,-17,25,60,-68,48, 
  /* [1059][0][][] */ 45,-53,29,42,-10,-40,-34,54,16,96,-127,-77,35,5,19,0, 
  /* [1060][0][][] */ 12,8,-48,21,-11,-34,-127,51,49,35,-94,108,-61,-9,125,-8, 
  /* [1061][0][][] */ 30,-90,111,-6,24,70,127,16,37,-28,-29,-57,-45,59,-13,27, 
  /* [1062][0][][] */ 55,-16,15,28,0,57,55,17,-19,-127,65,-82,-28,-46,8,25, 
  /* [1063][0][][] */ 5,-122,-61,74,72,-21,-71,64,-28,10,-6,-11,127,1,-113,-97, 
  /* [1064][0][][] */ 65,89,53,-24,98,21,71,-38,-17,-90,-127,-61,-3,59,23,-7, 
  /* [1065][0][][] */ -40,73,-36,13,60,20,71,-127,55,-91,-67,37,-40,39,33,-33, 
  /* [1066][0][][] */ 4,12,73,-12,-90,23,-15,-72,29,76,50,8,71,-56,25,127, 
  /* [1067][0][][] */ -90,-5,62,-78,-45,-24,90,127,-21,38,23,72,46,-35,-25,-104, 
  /* [1068][0][][] */ -9,69,-60,94,-18,41,50,-20,-63,27,-12,27,127,27,-26,-86, 
  /* [1069][0][][] */ 30,-40,85,-8,67,63,60,0,7,-84,34,-31,123,-127,43,52, 
  /* [1070][0][][] */ 12,-27,10,14,-52,24,10,14,-8,-39,-127,37,57,28,58,-25, 
  /* [1071][0][][] */ 17,3,-127,-1,33,-94,-53,85,21,-51,-49,46,7,9,-44,65, 
  /* [1072][0][][] */ 36,-127,21,56,-45,57,16,30,-113,-21,-75,-79,-4,-86,55,-87, 
  /* [1073][0][][] */ 13,-93,25,127,120,-57,-97,4,-53,27,65,48,106,-28,87,65, 
  /* [1074][0][][] */ 37,-47,-92,-8,-29,36,74,-25,-1,-61,-21,-5,-127,78,-65,7, 
  /* [1075][0][][] */ 37,38,-3,9,93,7,6,-50,17,-26,-127,62,-16,30,32,-50, 
  /* [1076][0][][] */ 19,4,53,38,86,17,-22,3,-7,127,-65,-46,34,-25,8,65, 
  /* [1077][0][][] */ 46,-82,26,127,-9,-9,-25,75,72,-117,65,-21,-48,-5,-26,70, 
  /* [1078][0][][] */ 42,-28,58,-34,42,-38,-38,71,-9,54,-40,127,6,88,-77,-102, 
  /* [1079][0][][] */ -55,-4,127,-52,104,4,39,58,-101,22,45,46,0,-37,-26,-23, 
  /* [1080][0][][] */ -69,51,45,4,26,21,43,81,114,-53,102,38,-48,-127,20,27, 
  /* [1081][0][][] */ 127,-42,8,34,-13,-21,-46,-43,64,108,-88,-39,7,-15,50,98, 
  /* [1082][0][][] */ 62,127,-30,-23,-33,63,-45,-30,34,47,59,-99,-33,47,4,-20, 
  /* [1083][0][][] */ 64,-35,15,-49,17,127,11,-29,1,-12,59,-81,28,-10,-87,51, 
  /* [1084][0][][] */ 32,80,68,20,83,-53,16,-67,-127,15,54,83,-57,-107,17,48, 
  /* [1085][0][][] */ 103,-28,-52,34,15,-93,127,-124,37,4,-123,-115,-74,109,45,-91, 
  /* [1086][0][][] */ -6,-71,-40,-51,85,-63,-48,-67,122,-29,-69,85,65,127,-112,44, 
  /* [1087][0][][] */ 22,-1,67,12,-106,-43,127,-86,36,54,-33,17,-91,30,-98,-8, 
  /* [1088][0][][] */ 39,-3,-68,-54,17,61,-6,33,-27,127,86,-48,-21,-47,-43,3, 
  /* [1089][0][][] */ 37,-12,24,46,-8,-10,-88,-32,91,-38,-27,20,25,-127,-28,1, 
  /* [1090][0][][] */ 14,-107,127,-1,-60,27,30,-31,57,-32,12,-46,2,-32,35,-105, 
  /* [1091][0][][] */ 123,28,-56,93,-7,30,-73,82,6,-47,86,116,52,81,-127,44, 
  /* [1092][0][][] */ -9,19,-67,-13,-21,-49,45,72,102,-45,17,98,-101,-35,-75,127, 
  /* [1093][0][][] */ -86,-78,7,53,59,-5,-19,34,-21,17,-112,43,-127,55,-42,-57, 
  /* [1094][0][][] */ 36,-39,-35,21,17,-8,31,-73,27,-85,30,-22,-42,99,19,-127, 
  /* [1095][0][][] */ 27,21,-46,43,-40,65,127,-65,-33,-25,17,-51,54,3,-48,-62, 
  /* [1096][0][][] */ -35,-28,-47,-39,-79,-43,16,-64,-19,-55,11,-24,12,64,127,-46, 
  /* [1097][0][][] */ -89,17,78,-15,-30,104,-38,-33,127,-18,85,-110,-85,2,-82,1, 
  /* [1098][0][][] */ 14,-31,5,-61,-34,76,26,-34,-118,1,49,-44,127,35,-22,-51, 
  /* [1099][0][][] */ -76,-46,49,124,127,91,103,-31,-45,100,-44,66,55,52,-45,-37, 
  /* [1100][0][][] */ -15,92,6,-127,-56,-86,-116,9,-53,-75,-11,90,37,-4,-51,-19, 
  /* [1101][0][][] */ -108,32,-73,33,-113,-35,-1,86,127,-32,-25,-22,-17,68,60,-34, 
  /* [1102][0][][] */ -36,-19,127,20,23,88,-6,-21,38,24,114,-5,118,-79,-82,-66, 
  /* [1103][0][][] */ 2,-6,67,-23,-37,23,-45,17,-46,-19,30,18,-35,127,38,-1, 
  /* [1104][0][][] */ 50,76,-25,-127,-18,85,34,-27,-39,10,-78,31,47,61,-45,61, 
  /* [1105][0][][] */ 5,5,-8,32,52,75,89,21,-45,-42,18,-127,-37,23,36,-44, 
  /* [1106][0][][] */ 127,34,-34,-67,-49,2,-9,45,10,6,-42,-14,30,35,75,-97, 
  /* [1107][0][][] */ -29,80,-98,-4,86,31,66,-113,34,-6,-48,29,66,-127,-3,-57, 
  /* [1108][0][][] */ 1,-40,-96,-5,16,-2,-48,127,2,67,27,-46,-53,7,0,-2, 
  /* [1109][0][][] */ 41,-35,73,81,17,-41,37,89,19,-7,-36,65,127,41,-33,-49, 
  /* [1110][0][][] */ -127,-10,36,-11,-17,11,30,-23,62,102,13,-3,-1,-43,-5,-56, 
  /* [1111][0][][] */ -78,80,-45,96,0,15,88,-72,-71,38,-127,-19,5,110,-36,-91, 
  /* [1112][0][][] */ 12,-26,-127,78,1,14,51,-93,63,66,-24,-28,20,96,-58,75, 
  /* [1113][0][][] */ 83,67,-1,75,16,6,24,-11,127,-49,-2,50,-97,-88,53,-27, 
  /* [1114][0][][] */ 41,8,-104,43,-45,-3,39,29,32,-40,-20,-60,67,127,104,85, 
  /* [1115][0][][] */ -1,28,4,-43,-13,16,-3,30,-6,49,-13,37,127,-56,22,-15, 
  /* [1116][0][][] */ 110,-3,-41,-63,-42,-9,98,-68,29,-42,-37,-45,12,10,14,-127, 
  /* [1117][0][][] */ -69,-51,55,-28,59,5,-26,13,-127,76,-39,12,25,73,-108,23, 
  /* [1118][0][][] */ -12,-21,127,-93,-30,95,28,-94,-100,17,12,-46,-21,9,28,23, 
  /* [1119][0][][] */ -3,11,86,-38,-9,84,-89,108,59,127,2,-18,-62,-28,28,74, 
  /* [1120][0][][] */ -60,42,-43,-53,26,18,34,-59,-49,-37,127,32,8,-76,2,-37, 
  /* [1121][0][][] */ -39,16,18,53,70,54,-16,-127,-23,87,2,-42,9,92,29,34, 
  /* [1122][0][][] */ -35,44,4,-122,-104,-28,-29,-127,70,9,57,28,-32,-80,54,50, 
  /* [1123][0][][] */ 5,-27,4,80,70,-37,-127,-57,47,65,-28,-28,7,3,58,2, 
  /* [1124][0][][] */ -9,51,-31,-87,11,-32,-13,-49,-22,-127,66,64,-14,58,59,-29, 
  /* [1125][0][][] */ -48,-66,127,51,33,5,-10,-54,104,-68,47,97,122,81,104,105, 
  /* [1126][0][][] */ 31,-74,51,-23,-11,-26,-65,41,14,9,-9,-16,38,127,-20,25, 
  /* [1127][0][][] */ -46,-12,52,81,-127,-23,53,-50,18,-47,-92,103,-16,5,37,-107, 
  /* [1128][0][][] */ 4,-48,1,7,-74,-76,42,35,1,-11,-4,127,-26,8,87,-67, 
  /* [1129][0][][] */ 57,23,115,54,-66,23,2,-14,48,127,111,-4,-37,22,-96,33, 
  /* [1130][0][][] */ 1,15,-35,51,-19,-78,-127,-8,-22,93,89,27,-67,6,-23,-47, 
  /* [1131][0][][] */ 18,50,-31,52,21,79,-94,-43,-10,-31,-59,43,63,-9,-127,-101, 
  /* [1132][0][][] */ -14,17,-2,-127,-52,76,-19,-2,-3,-85,54,87,112,59,-44,-38, 
  /* [1133][0][][] */ 82,4,96,-54,-73,28,25,-118,50,-1,11,32,10,-12,127,30, 
  /* [1134][0][][] */ 115,-11,-88,12,80,-37,-23,-75,127,-70,-91,-73,-15,-81,20,-97, 
  /* [1135][0][][] */ -35,-32,-118,-5,-45,-4,52,-114,78,-71,3,127,2,58,63,-88, 
  /* [1136][0][][] */ -127,62,-56,-43,53,-1,6,7,116,-41,2,71,-10,-22,-4,-118, 
  /* [1137][0][][] */ 13,49,-36,32,-1,81,8,-8,20,-127,83,95,-64,39,-34,-15, 
  /* [1138][0][][] */ 2,-8,34,43,68,127,-22,-79,-36,43,95,-122,-49,-38,-52,70, 
  /* [1139][0][][] */ -8,-127,81,8,57,8,32,-10,-30,100,-58,-62,-114,-67,19,97, 
  /* [1140][0][][] */ 91,7,34,-36,122,89,-44,-118,-127,4,-77,53,35,-71,-89,44, 
  /* [1141][0][][] */ 116,13,-29,20,25,-35,-6,-71,7,-14,42,-53,43,2,6,127, 
  /* [1142][0][][] */ 33,-54,-44,-39,16,27,7,31,61,-43,16,-127,-13,-17,61,7, 
  /* [1143][0][][] */ -9,-71,42,-31,-51,109,127,-17,3,7,100,-14,-24,108,-109,104, 
  /* [1144][0][][] */ 24,0,-52,6,-7,-11,-11,40,-7,22,-21,14,25,-56,-17,-127, 
  /* [1145][0][][] */ 85,-102,-58,48,47,-99,80,-100,49,-52,10,39,-127,65,5,-85, 
  /* [1146][0][][] */ 41,45,30,21,16,127,92,-46,25,-83,59,37,100,-42,10,-94, 
  /* [1147][0][][] */ 48,27,73,-10,78,-31,-56,-54,-30,-3,-49,36,-63,-43,127,88, 
  /* [1148][0][][] */ -105,-65,127,10,-52,-36,-56,16,6,-45,-79,57,-47,73,43,37, 
  /* [1149][0][][] */ 23,-41,127,-18,63,78,-97,37,-20,-30,33,-4,-47,5,-2,-26, 
  /* [1150][0][][] */ -15,-44,-42,8,34,-123,-127,48,4,-20,3,73,66,22,-6,6, 
  /* [1151][0][][] */ 42,-3,-81,23,-10,99,-66,-127,88,110,64,85,-6,-15,60,48, 
  /* [1152][0][][] */ -9,16,30,31,66,32,-2,-19,65,-30,-31,115,-24,80,-127,-89, 
  /* [1153][0][][] */ 86,29,-26,-43,15,27,-19,-39,127,15,89,9,-15,-57,-75,17, 
  /* [1154][0][][] */ 54,19,-89,-26,0,21,-122,-79,127,49,-39,57,12,39,34,-13, 
  /* [1155][0][][] */ -35,45,-28,-20,-22,31,16,-4,-20,-88,127,22,-17,26,-35,13, 
  /* [1156][0][][] */ -31,-102,16,-26,1,-63,7,-45,5,3,-127,-25,-11,-14,42,-7, 
  /* [1157][0][][] */ 42,60,-27,55,-65,44,-58,-127,-109,39,-58,67,58,-19,-88,-55, 
  /* [1158][0][][] */ 52,-3,75,-67,-4,127,-39,-25,23,51,-22,65,91,72,-58,37, 
  /* [1159][0][][] */ -10,-38,7,-121,-23,-30,10,-48,-93,95,-3,-127,15,77,83,-87, 
  /* [1160][0][][] */ 127,-14,1,-59,-28,-2,-44,-107,52,33,-9,59,26,21,82,97, 
  /* [1161][0][][] */ -53,127,61,55,77,-63,62,45,-53,-72,-126,-14,23,26,76,60, 
  /* [1162][0][][] */ 127,5,-80,24,-69,8,-32,-89,24,-18,-28,31,92,59,91,63, 
  /* [1163][0][][] */ -7,17,-30,37,-9,70,-52,-49,-67,62,-24,-126,-31,-127,81,-20, 
  /* [1164][0][][] */ -16,47,-127,78,59,-23,-21,-54,57,55,88,28,43,32,-62,-16, 
  /* [1165][0][][] */ -27,5,8,21,-127,0,-55,-31,60,68,-14,61,26,26,60,-30, 
  /* [1166][0][][] */ 42,-29,-56,2,-127,-9,-114,-42,30,11,-13,73,85,24,113,14, 
  /* [1167][0][][] */ -45,14,-24,-51,-114,42,-90,-60,-127,-123,-84,70,98,27,90,88, 
  /* [1168][0][][] */ 13,-77,-8,74,-51,-25,127,26,41,-69,-61,25,72,-18,35,34, 
  /* [1169][0][][] */ -63,-7,117,29,22,-15,32,-61,127,107,-58,112,-40,43,49,34, 
  /* [1170][0][][] */ 70,49,-36,16,6,-26,-18,42,80,4,-24,43,17,-127,13,-8, 
  /* [1171][0][][] */ 42,-13,-11,-15,38,-9,56,31,-23,-17,-111,2,50,-48,12,-127, 
  /* [1172][0][][] */ -13,52,24,127,-61,103,85,-88,48,-6,-119,31,11,0,2,-58, 
  /* [1173][0][][] */ 3,-16,-14,108,-21,-52,24,29,55,2,9,16,-120,127,-121,-52, 
  /* [1174][0][][] */ -78,-50,19,-61,17,59,-77,-44,-22,53,46,82,65,-21,-96,127, 
  /* [1175][0][][] */ -62,46,-19,-127,-22,24,-21,-18,-16,-33,-2,-26,25,61,-23,30, 
  /* [1176][0][][] */ 16,4,20,-45,6,-6,-72,12,-18,-22,112,-4,-1,127,-10,24, 
  /* [1177][0][][] */ 38,101,30,-12,-125,7,4,-121,13,40,37,26,4,-21,-31,127, 
  /* [1178][0][][] */ -8,-10,-90,-24,35,-45,-69,-127,103,-42,-5,-24,-18,-18,-9,34, 
  /* [1179][0][][] */ -2,-43,-127,69,36,96,81,113,80,-91,-70,100,36,-79,114,58, 
  /* [1180][0][][] */ 79,86,19,7,127,-39,-52,-61,88,-55,120,-47,-95,-55,99,-11, 
  /* [1181][0][][] */ -32,59,79,68,-114,23,-13,64,-127,-2,-9,35,22,-52,-66,11, 
  /* [1182][0][][] */ 49,-40,33,74,-41,74,-85,127,22,30,-27,-24,-47,58,-78,89, 
  /* [1183][0][][] */ -59,54,-8,-127,-66,-1,-57,0,-47,-42,-9,-8,-51,-106,81,-55, 
  /* [1184][0][][] */ 9,-20,-102,-17,-124,20,22,-30,68,16,3,2,127,39,-8,-117, 
  /* [1185][0][][] */ -39,46,5,3,17,15,-58,25,-127,119,-63,-70,54,-20,23,-10, 
  /* [1186][0][][] */ 50,-15,13,-16,25,10,32,127,28,39,-36,42,-55,26,-1,-49, 
  /* [1187][0][][] */ -8,2,-40,-117,34,24,110,-7,-38,125,127,59,-104,-76,62,28, 
  /* [1188][0][][] */ -5,42,-12,-47,127,38,5,39,-12,-8,-68,-61,-28,-30,-15,2, 
  /* [1189][0][][] */ 22,93,-29,1,127,43,113,25,-44,116,81,38,-84,9,-30,6, 
  /* [1190][0][][] */ 112,-8,-35,-40,-92,-11,11,-47,127,-72,-17,66,38,-12,14,41, 
  /* [1191][0][][] */ 24,27,-120,40,-127,-16,-37,-58,28,-34,-18,-48,52,12,47,73, 
  /* [1192][0][][] */ 31,17,51,-16,17,8,45,121,73,-75,-23,-4,-12,127,8,-41, 
  /* [1193][0][][] */ -125,63,-99,-15,-92,11,23,-127,31,-6,-76,-46,76,49,-3,90, 
  /* [1194][0][][] */ -101,70,-30,-51,-108,70,1,56,127,79,-12,-15,-57,75,-111,-80, 
  /* [1195][0][][] */ 122,69,99,127,11,-76,9,58,76,-88,-50,94,24,44,-17,-10, 
  /* [1196][0][][] */ -35,38,21,67,-7,127,-24,11,-27,-76,-127,-43,-10,-67,24,40, 
  /* [1197][0][][] */ -58,-90,-17,30,-32,-127,-4,-54,92,117,48,8,-12,2,-47,-45, 
  /* [1198][0][][] */ -53,-54,-110,96,-1,99,119,-13,58,-23,127,-113,24,-17,-63,-27, 
  /* [1199][0][][] */ 25,34,-127,-60,-19,19,120,-15,89,45,1,127,-55,-62,10,-42, 
  /* [1200][0][][] */ 15,25,121,-118,9,41,22,82,127,28,50,-47,-31,107,-82,-85, 
  /* [1201][0][][] */ 57,-86,65,88,-93,3,110,-97,-127,-7,-7,-88,-16,58,-22,78, 
  /* [1202][0][][] */ 15,46,-22,19,-11,46,-68,-21,44,-45,-32,67,-23,-127,-77,32, 
  /* [1203][0][][] */ -97,91,47,40,12,-55,41,9,-127,1,4,-3,43,82,122,-4, 
  /* [1204][0][][] */ 29,1,5,8,-25,4,71,-55,-11,18,-72,127,83,41,-95,-28, 
  /* [1205][0][][] */ -43,-5,31,-64,5,54,35,63,71,20,-96,-91,114,-127,97,123, 
  /* [1206][0][][] */ -76,-11,-7,-27,-2,-82,-54,-69,1,-41,-127,-15,42,83,-20,-37, 
  /* [1207][0][][] */ 127,103,-36,118,-11,-5,114,-69,-12,16,0,42,58,-30,-10,99, 
  /* [1208][0][][] */ -73,-122,-81,87,99,127,-31,-105,45,108,3,-39,-107,8,-105,47, 
  /* [1209][0][][] */ -43,-89,77,1,90,-54,-91,12,-75,-10,-127,-13,-9,27,-80,20, 
  /* [1210][0][][] */ 9,-89,-82,127,-31,5,50,-94,-27,-63,79,0,-16,-44,-11,-11, 
  /* [1211][0][][] */ 93,-78,-64,79,47,-39,-46,-38,-32,93,-120,108,11,-52,127,93, 
  /* [1212][0][][] */ 68,-39,-2,-9,-71,-11,-52,127,10,-63,-66,-11,33,70,-44,-9, 
  /* [1213][0][][] */ 3,-19,44,59,-105,34,-97,-75,127,-6,-10,-42,59,-27,14,-37, 
  /* [1214][0][][] */ 32,90,-127,21,-49,82,35,-36,0,78,-64,-49,21,11,17,-93, 
  /* [1215][0][][] */ -54,12,-47,55,-24,-2,-36,99,42,-30,-47,59,22,127,52,-109, 
  /* [1216][0][][] */ 13,82,-90,-9,-112,46,127,44,-41,86,-71,4,-48,21,27,50, 
  /* [1217][0][][] */ 60,-64,-87,109,-55,-46,-30,-108,-127,57,39,69,-7,-43,51,89, 
  /* [1218][0][][] */ -21,30,-7,-44,45,-127,39,-3,85,25,9,-5,-27,-7,-43,-38, 
  /* [1219][0][][] */ -127,83,2,91,59,-20,-84,-96,-101,-60,-16,-17,-105,-103,-113,-122, 
  /* [1220][0][][] */ -32,-33,-127,39,-72,-56,-2,23,-98,112,-98,43,22,1,103,-62, 
  /* [1221][0][][] */ 21,12,-41,58,-106,23,58,12,-66,-36,55,22,72,3,-127,73, 
  /* [1222][0][][] */ 21,-4,127,91,21,62,-7,-2,-28,14,65,-67,62,-86,64,4, 
  /* [1223][0][][] */ 15,41,3,87,48,-32,39,83,-30,50,-19,-8,46,15,-31,-127, 
  /* [1224][0][][] */ -40,26,-94,46,-58,76,-63,-9,-127,23,-3,-46,15,32,-32,77, 
  /* [1225][0][][] */ -8,-66,-127,117,45,-17,-58,-1,45,79,79,81,-7,17,-27,-43, 
  /* [1226][0][][] */ -119,-9,19,-99,38,-5,-127,-16,-23,18,62,-26,-23,-51,91,29, 
  /* [1227][0][][] */ 32,-96,37,-9,17,-52,83,77,-20,70,67,-37,39,-15,-127,-37, 
  /* [1228][0][][] */ -93,32,-20,-49,-81,19,-127,-96,-31,36,-42,78,53,22,-1,14, 
  /* [1229][0][][] */ 68,46,1,-23,-28,-42,48,-9,-72,-7,-8,-17,34,57,43,-127, 
  /* [1230][0][][] */ 84,6,-6,-49,63,-49,-17,-46,-85,-58,-55,112,45,-91,-31,-127, 
  /* [1231][0][][] */ 78,20,-13,59,47,26,23,104,59,-54,-27,69,-73,-127,-22,31, 
  /* [1232][0][][] */ -30,-41,14,-54,-38,48,19,29,41,16,-127,-27,-62,73,6,-53, 
  /* [1233][0][][] */ 6,127,-1,37,98,-28,-32,-22,9,3,-27,-20,-36,39,-64,-67, 
  /* [1234][0][][] */ 33,-112,127,27,84,59,17,54,85,78,110,-16,79,-59,-8,-70, 
  /* [1235][0][][] */ -5,19,-38,32,-17,83,24,-35,-79,42,-9,13,56,-17,85,127, 
  /* [1236][0][][] */ 1,23,61,-62,-97,126,-11,-64,-18,0,-17,69,-127,-16,-40,-43, 
  /* [1237][0][][] */ 79,-33,29,53,-12,56,48,-10,62,43,-47,-59,9,127,-112,43, 
  /* [1238][0][][] */ 41,-24,-44,-64,34,12,-14,5,127,-26,-17,-18,66,-54,-58,-1, 
  /* [1239][0][][] */ 35,57,-80,118,-6,3,16,-49,-10,49,-35,-127,25,68,1,-118, 
  /* [1240][0][][] */ -59,-46,42,39,127,-83,47,-113,-59,51,-2,22,-44,-14,-33,-37, 
  /* [1241][0][][] */ 20,69,-12,37,-127,58,-71,25,37,-115,-49,118,58,-79,-47,7, 
  /* [1242][0][][] */ 127,17,-26,-5,-10,-33,0,-13,87,-58,-88,-68,3,47,60,-98, 
  /* [1243][0][][] */ 6,83,-20,-15,106,47,-66,-17,127,-5,6,-42,-22,-53,65,22, 
  /* [1244][0][][] */ 71,-5,-59,-60,52,-38,-37,123,-28,-14,117,15,127,-8,15,-80, 
  /* [1245][0][][] */ -12,37,-57,-45,-84,-50,-13,51,-33,-16,-58,127,-27,28,18,8, 
  /* [1246][0][][] */ -18,103,17,16,-71,22,35,75,-127,-77,-66,-79,-7,-10,82,41, 
  /* [1247][0][][] */ 98,3,-21,-24,-83,83,88,-66,52,-110,-50,-24,-2,-127,-15,-73, 
  /* [1248][0][][] */ -15,31,-15,-29,57,37,26,-51,-54,37,-33,115,-7,22,48,-127, 
  /* [1249][0][][] */ 85,-8,-90,52,49,127,27,-89,82,-97,-81,-69,-70,121,-100,-15, 
  /* [1250][0][][] */ -77,-6,-113,47,76,-35,59,-111,102,-18,-42,-127,97,22,78,-72, 
  /* [1251][0][][] */ -23,5,12,63,30,-127,41,34,54,68,37,39,-59,48,-18,30, 
  /* [1252][0][][] */ -89,6,72,-125,-56,11,-14,127,31,79,-51,-16,24,26,14,-33, 
  /* [1253][0][][] */ 26,-29,46,-111,33,80,19,-96,99,4,70,127,28,-4,-56,-63, 
  /* [1254][0][][] */ -45,63,-2,-31,30,-52,-79,27,-68,-31,9,21,-73,-19,5,127, 
  /* [1255][0][][] */ -34,9,-22,-87,-38,-12,-127,88,-98,9,-52,-1,-34,56,52,4, 
  /* [1256][0][][] */ -127,-80,16,-42,-2,0,40,-98,-33,62,16,-59,-44,92,43,8, 
  /* [1257][0][][] */ 42,-69,84,-91,82,-117,-27,29,-11,-23,-25,6,-127,68,27,-79, 
  /* [1258][0][][] */ 127,-69,-8,106,36,47,16,-54,-52,-39,-18,7,98,67,-50,39, 
  /* [1259][0][][] */ 127,-64,-33,61,6,86,-100,-39,-72,-9,21,17,99,-57,110,-21, 
  /* [1260][0][][] */ 68,12,-6,-17,70,90,16,58,66,-126,77,40,34,53,127,-1, 
  /* [1261][0][][] */ -92,-80,37,-82,-127,56,-63,-83,-12,96,-23,-58,-2,-58,35,-77, 
  /* [1262][0][][] */ -95,9,27,-11,-4,-19,57,-13,-127,12,90,-45,-27,26,35,25, 
  /* [1263][0][][] */ 2,-53,-11,-40,-43,127,18,-36,58,58,-51,-46,92,41,-72,-68, 
  /* [1264][0][][] */ -116,-62,127,-72,2,-16,-26,-14,-39,70,77,72,1,-74,-15,31, 
  /* [1265][0][][] */ 44,-35,55,-40,38,48,-38,-19,127,53,60,-48,-40,-40,29,-78, 
  /* [1266][0][][] */ -27,29,127,8,33,11,52,-70,-16,12,-21,41,-88,-49,-22,6, 
  /* [1267][0][][] */ 9,90,48,53,127,83,44,7,64,-9,43,0,-38,0,44,32, 
  /* [1268][0][][] */ -49,-6,3,11,59,8,49,-123,11,-79,34,35,-59,39,127,-13, 
  /* [1269][0][][] */ 86,14,92,-23,57,-41,-48,37,127,-81,-24,-43,-60,86,97,-40, 
  /* [1270][0][][] */ 63,36,-54,73,56,45,127,36,-10,79,1,-19,43,-85,-108,-67, 
  /* [1271][0][][] */ -17,-2,-75,-14,34,-9,85,127,-53,65,-75,-84,16,32,13,0, 
  /* [1272][0][][] */ -34,-11,8,-28,4,-14,127,21,-100,87,33,-15,-12,-44,-5,9, 
  /* [1273][0][][] */ 82,80,-5,-23,99,77,-90,-73,87,13,120,-1,65,-20,-39,-127, 
  /* [1274][0][][] */ -127,-22,54,-100,-30,-16,42,70,54,5,-52,43,50,-88,-85,4, 
  /* [1275][0][][] */ -37,43,-127,-38,-75,-43,-31,-6,100,-122,-55,-65,27,101,-44,-39, 
  /* [1276][0][][] */ 0,11,-35,-31,-8,25,-39,41,-59,-88,127,32,18,37,-1,-11, 
  /* [1277][0][][] */ 103,-47,-112,37,-17,0,111,-43,29,-9,-90,-127,14,-49,-42,-79, 
  /* [1278][0][][] */ 127,-7,67,49,42,-26,-57,-23,-9,-55,91,-11,44,-42,-34,-4, 
  /* [1279][0][][] */ 38,7,-23,10,127,-8,55,3,-52,6,34,27,33,42,-71,4, 
};
const TfArray<4, int> tensor_dimension78 = { 4, { 1280,1,1,16 } };
const TfArray<1280, float> quant78_scale = { 1280, { 0.0054624178446829319, 0.0048649995587766171, 0.0044156373478472233, 0.005541699007153511, 0.0054893246851861477, 0.0038854514714330435, 0.0050453571602702141, 0.0045456895604729652, 0.0061046131886541843, 0.0056712259538471699, 0.0049112895503640175, 0.0053037134930491447, 0.0081344516947865486, 0.0063002845272421837, 0.0044552846811711788, 0.0063722217455506325, 0.0063237752765417099, 0.0044046887196600437, 0.0051925992593169212, 0.0053191399201750755, 0.0059966589324176311, 0.0064339255914092064, 0.0046985684894025326, 0.0055358521640300751, 0.006290665827691555, 0.0049169519916176796, 0.0045131663791835308, 0.0045546665787696838, 0.005686155054718256, 0.0054232263937592506, 0.0058970642276108265, 0.0064573776908218861, 0.0050878678448498249, 0.0048209242522716522, 0.006700118537992239, 0.0057504540309309959, 0.0065971496514976025, 0.0034967793617397547, 0.010640877299010754, 0.0050550098530948162, 0.0054680448956787586, 0.0048975236713886261, 0.0050103506073355675, 0.0063034533523023129, 0.005803172942250967, 0.0075883506797254086, 0.0083563337102532387, 0.0055174981243908405, 0.004973303060978651, 0.005140356719493866, 0.0064537241123616695, 0.005217995960265398, 0.0055944095365703106, 0.0043290602043271065, 0.0046099391765892506, 0.0064273481257259846, 0.0044057280756533146, 0.0040746349841356277, 0.0052330209873616695, 0.0047636628150939941, 0.007551973219960928, 0.0059835044667124748, 0.0056140678934752941, 0.0044305403716862202, 0.0065281111747026443, 0.0049695051275193691, 0.0071753300726413727, 0.0064825648441910744, 0.0044615021906793118, 0.0036489202175289392, 0.0067278007045388222, 0.0059308260679244995, 0.0084726857021450996, 0.005450650118291378, 0.0055360849946737289, 0.0060788844712078571, 0.0053002028726041317, 0.0060192514210939407, 0.0067670699208974838, 0.0053575462661683559, 0.0061057144775986671, 0.0040116920135915279, 0.004770270548760891, 0.0045853354968130589, 0.0045916782692074776, 0.0049113854765892029, 0.0047028809785842896, 0.0049383183941245079, 0.0056074401363730431, 0.0052025695331394672, 0.005257507786154747, 0.0059926752001047134, 0.0057750535197556019, 0.0062238010577857494, 0.0061151362024247646, 0.0043433592654764652, 0.0053692911751568317, 0.0046005160547792912, 0.0053549651056528091, 0.0072532691992819309, 0.0055765383876860142, 0.0058426619507372379, 0.0053003514185547829, 0.005640330258756876, 0.0058860122226178646, 0.0062123150564730167, 0.0062482245266437531, 0.0069812079891562462, 0.0038807536475360394, 0.0057087503373622894, 0.0056679230183362961, 0.0058265794068574905, 0.0063733942806720734, 0.0071299229748547077, 0.0058151157572865486, 0.0045233983546495438, 0.0041328929364681244, 0.0056238430552184582, 0.0043724230490624905, 0.0050340532325208187, 0.0065150801092386246, 0.0071292626671493053, 0.0052818371914327145, 0.005617520771920681, 0.0045861266553401947, 0.0056607490405440331, 0.0074078603647649288, 0.005723840557038784, 0.005455932579934597, 0.0055480087175965309, 0.0042413347400724888, 0.0057210531085729599, 0.0043877237476408482, 0.0037200120277702808, 0.0053879977203905582, 0.0064319618977606297, 0.0080508701503276825, 0.0066218962892889977, 0.0059258281253278255, 0.0048724575899541378, 0.0055315135978162289, 0.0083392970263957977, 0.0049033989198505878, 0.0057341260835528374, 0.0059025413356721401, 0.0064107622019946575, 0.0039109420031309128, 0.0062294686213135719, 0.0086613837629556656, 0.0052970023825764656, 0.0060597760602831841, 0.0047797379083931446, 0.0051139630377292633, 0.0049422904849052429, 0.0046220468357205391, 0.0079487813636660576, 0.0057183797471225262, 0.0059451982378959656, 0.0041096354834735394, 0.007111850194633007, 0.0041672480292618275, 0.0048057148233056068, 0.0072115464136004448, 0.0046056872233748436, 0.005047850776463747, 0.0076562096364796162, 0.0050051813013851643, 0.005799594335258007, 0.0085798371583223343, 0.0070232679136097431, 0.0071317777037620544, 0.0041971337050199509, 0.0068931621499359608, 0.0048811412416398525, 0.0050579681992530823, 0.0043534589931368828, 0.0049520977772772312, 0.0044445055536925793, 0.0047029312700033188, 0.0063690575771033764, 0.0049743885174393654, 0.005435361061245203, 0.005999232642352581, 0.0060278414748609066, 0.0053021889179944992, 0.0053126257844269276, 0.0052172401919960976, 0.0056620226241648197, 0.0044194464571774006, 0.0049793114885687828, 0.005710303783416748, 0.0068864421918988228, 0.0071440590545535088, 0.0033669448457658291, 0.0055032898671925068, 0.0061294520273804665, 0.0070360829122364521, 0.0047267391346395016, 0.0062593203037977219, 0.0060581071302294731, 0.0062468391843140125, 0.0076638553291559219, 0.0050504631362855434, 0.007007119245827198, 0.0046064346097409725, 0.0065132449381053448, 0.0058985454961657524, 0.0066321045160293579, 0.0041124583221971989, 0.0053450693376362324, 0.0045209997333586216, 0.0044161630794405937, 0.0073105385527014732, 0.0056946408003568649, 0.0044489940628409386, 0.0058574522845447063, 0.0044751944951713085, 0.0041897981427609921, 0.0043588243424892426, 0.0064396969974040985, 0.0065061659552156925, 0.0081356493756175041, 0.0054928194731473923, 0.0050354967825114727, 0.0066563235595822334, 0.0057086916640400887, 0.0055440883152186871, 0.0053489478304982185, 0.0041951579041779041, 0.0043850783258676529, 0.0065216794610023499, 0.0057644234038889408, 0.0055758520029485226, 0.006191047839820385, 0.0044244248420000076, 0.0060040894895792007, 0.0045557310804724693, 0.0049039833247661591, 0.0061400141566991806, 0.0051763053052127361, 0.0044506615959107876, 0.0068972385488450527, 0.0048844893462955952, 0.0045663807541131973, 0.0062830490060150623, 0.0078591732308268547, 0.0049259844236075878, 0.0049586771056056023, 0.0050555272027850151, 0.0078340219333767891, 0.0047485334798693657, 0.0044922945089638233, 0.0061613251455128193, 0.0070246430113911629, 0.0046777590177953243, 0.0063621867448091507, 0.0058639808557927608, 0.0041529033333063126, 0.0051055857911705971, 0.0050657428801059723, 0.0031260873656719923, 0.0045655295252799988, 0.0047891885042190552, 0.0079749822616577148, 0.0054048425517976284, 0.0047178040258586407, 0.0053611691109836102, 0.0058995718136429787, 0.0083518698811531067, 0.0050029554404318333, 0.0068619200028479099, 0.0062368619255721569, 0.0047611966729164124, 0.0051873647607862949, 0.0074113812297582626, 0.0063444231636822224, 0.0059935934841632843, 0.0053789014928042889, 0.005349406972527504, 0.0057890582829713821, 0.0043187374249100685, 0.0067810490727424622, 0.0063447672873735428, 0.0053567318245768547, 0.0075423973612487316, 0.006476434413343668, 0.0052858488634228706, 0.0050628571771085262, 0.0042382208630442619, 0.005709303542971611, 0.005011984147131443, 0.0076838354580104351, 0.0067055667750537395, 0.0056610633619129658, 0.0071406252682209015, 0.0056348443031311035, 0.0044288085773587227, 0.0054337368346750736, 0.0070680561475455761, 0.0061413059011101723, 0.0049333353526890278, 0.0060242107138037682, 0.0036436992231756449, 0.007223866879940033, 0.0041937394998967648, 0.0044813691638410091, 0.0066256849095225334, 0.0053703947924077511, 0.0051148529164493084, 0.0052128122188150883, 0.0047300639562308788, 0.0058710328303277493, 0.0047233924269676208, 0.0081372996792197227, 0.0068493918515741825, 0.0071048829704523087, 0.0049312105402350426, 0.0045720748603343964, 0.0056197354570031166, 0.0078356591984629631, 0.0062255403026938438, 0.0057601761072874069, 0.0064724809490144253, 0.0044619794934988022, 0.0055443928577005863, 0.0047909347340464592, 0.0046965070068836212, 0.006390728522092104, 0.0047945515252649784, 0.0048841917887330055, 0.0046418341808021069, 0.0048170853406190872, 0.0058619426563382149, 0.0047797774896025658, 0.004143737256526947, 0.0048922779969871044, 0.0056041060015559196, 0.004256347194314003, 0.0059193582274019718, 0.0044185980223119259, 0.0061382409185171127, 0.0054324055090546608, 0.0062964693643152714, 0.0064737251959741116, 0.0075331456027925014, 0.0057280273176729679, 0.0052276249043643475, 0.0048369327560067177, 0.0049965283833444118, 0.0061463667079806328, 0.0057156332768499851, 0.005387989804148674, 0.0056388913653790951, 0.0058559179306030273, 0.0056334445253014565, 0.005808577872812748, 0.005300810094922781, 0.0049734078347682953, 0.0057472730986773968, 0.0052876626141369343, 0.0051441104151308537, 0.0043051554821431637, 0.007462773472070694, 0.0042748358100652695, 0.0058165215887129307, 0.0054810200817883015, 0.0055934661068022251, 0.0050383093766868114, 0.0047536976635456085, 0.0057283905334770679, 0.0055906684137880802, 0.0054159299470484257, 0.0073887649923563004, 0.0055302544496953487, 0.0058774747885763645, 0.0068456986919045448, 0.0073417359963059425, 0.0053145410493016243, 0.0041394918225705624, 0.0053257099352777004, 0.0081631001085042953, 0.0068357894197106361, 0.0047388458624482155, 0.004884195514023304, 0.0056657092645764351, 0.0053179468959569931, 0.0053610997274518013, 0.0040848138742148876, 0.0065612778998911381, 0.0053544715046882629, 0.0054700830951333046, 0.0045820209197700024, 0.0058373156934976578, 0.0051261084154248238, 0.0060503114946186543, 0.0056143994443118572, 0.0054152733646333218, 0.0063170893117785454, 0.0064010028727352619, 0.0049721118994057178, 0.0057304864749312401, 0.0066756810992956161, 0.0047494200989603996, 0.0063017336651682854, 0.0060328245162963867, 0.0069957082159817219, 0.0044730519875884056, 0.0061548501253128052, 0.0066890055313706398, 0.0058638816699385643, 0.0050240000709891319, 0.0048710624687373638, 0.0057345498353242874, 0.0056660645641386509, 0.0039392365142703056, 0.0048662913031876087, 0.0043505956418812275, 0.0039416160434484482, 0.0033605946227908134, 0.0048279943875968456, 0.0040728910826146603, 0.0068917945027351379, 0.0066522466950118542, 0.0055616376921534538, 0.0046602324582636356, 0.0084063978865742683, 0.0053731626830995083, 0.0047300434671342373, 0.0057452470064163208, 0.0051301950588822365, 0.0036028374452143908, 0.0047270054928958416, 0.0051624076440930367, 0.0054394276812672615, 0.0059590395539999008, 0.0042122914455831051, 0.0058981101028621197, 0.0062524890527129173, 0.0053301090374588966, 0.006500626914203167, 0.0042974320240318775, 0.0076156635768711567, 0.0075170518830418587, 0.0063975406810641289, 0.0061583630740642548, 0.0054007582366466522, 0.0064535881392657757, 0.0050897486507892609, 0.0062891989946365356, 0.0050861923955380917, 0.0056220362894237041, 0.0056195883080363274, 0.0059638265520334244, 0.0074174129404127598, 0.007455076090991497, 0.0072490512393414974, 0.0056718210689723492, 0.0057172714732587337, 0.0057535418309271336, 0.0062716314569115639, 0.0058608250692486763, 0.0055158757604658604, 0.0046905670315027237, 0.0071221906691789627, 0.0047536785714328289, 0.005736607126891613, 0.0046201474033296108, 0.0044106529094278812, 0.0081420224159955978, 0.0042968443594872952, 0.0054723722860217094, 0.004065114539116621, 0.0059693441726267338, 0.0059382030740380287, 0.0091055799275636673, 0.0061931880190968513, 0.0053214165382087231, 0.0043611470609903336, 0.0063392184674739838, 0.0054572029039263725, 0.0056441072374582291, 0.0042972448281943798, 0.0048172916285693645, 0.0048473705537617207, 0.0068599139340221882, 0.0071488744579255581, 0.0069919945672154427, 0.0049857744015753269, 0.0052652382291853428, 0.0057260398752987385, 0.0051258876919746399, 0.0063779493793845177, 0.0044698012061417103, 0.0054003093391656876, 0.006053912453353405, 0.0051099741831421852, 0.0050260946154594421, 0.0052782134152948856, 0.0051255109719932079, 0.0051140305586159229, 0.0064098346047103405, 0.0052273576147854328, 0.0048975283280014992, 0.0069324448704719543, 0.0043967515230178833, 0.0047476696781814098, 0.0044030258432030678, 0.0048011890612542629, 0.0078619243577122688, 0.0062346626073122025, 0.0068178819492459297, 0.0053584561683237553, 0.0059734610840678215, 0.0053652627393603325, 0.0054852999746799469, 0.0059383180923759937, 0.0058818510733544827, 0.0074171647429466248, 0.0057039973326027393, 0.0056713661178946495, 0.0066474089398980141, 0.0038861588109284639, 0.0065317754633724689, 0.0047210310585796833, 0.0053448616527020931, 0.0048743258230388165, 0.0044323070906102657, 0.0046493667177855968, 0.0056348806247115135, 0.0069374106824398041, 0.005677585955709219, 0.0052078533917665482, 0.0061077871359884739, 0.0052485410124063492, 0.0080508431419730186, 0.0072368979454040527, 0.0068805222399532795, 0.0044838320463895798, 0.0054169911891222, 0.0043608807027339935, 0.0053390897810459137, 0.0056142718531191349, 0.0063178571872413158, 0.0063397069461643696, 0.0048963772132992744, 0.0054795173928141594, 0.0048426957800984383, 0.0050996877253055573, 0.0052986294031143188, 0.0037570025306195021, 0.0047637536190450191, 0.0054074558429419994, 0.0057565034367144108, 0.0056318598799407482, 0.0068154674954712391, 0.0059102335944771767, 0.0058922236785292625, 0.0049807601608335972, 0.0038125657010823488, 0.0064778444357216358, 0.0055418144911527634, 0.0054667256772518158, 0.0055468371137976646, 0.0061295973137021065, 0.006615872960537672, 0.0061854883097112179, 0.0069795632734894753, 0.0046652383171021938, 0.0059033208526670933, 0.0048239887692034245, 0.0048793344758450985, 0.0056904065422713757, 0.0066140550188720226, 0.0054974821396172047, 0.0070583447813987732, 0.0054152393713593483, 0.0063415719196200371, 0.0052893771789968014, 0.0040693897753953934, 0.0072080488316714764, 0.004962448962032795, 0.0059738527052104473, 0.0052845408208668232, 0.0052716056816279888, 0.0049013807438313961, 0.0057169566862285137, 0.0044721378944814205, 0.0070268083363771439, 0.0077382293529808521, 0.0063892384059727192, 0.0051252814009785652, 0.0053818207234144211, 0.0045633870176970959, 0.0066279764287173748, 0.0048278328031301498, 0.0087398495525121689, 0.0062710805796086788, 0.0066586323082447052, 0.0073208669200539589, 0.0048948274925351143, 0.0057634338736534119, 0.003880753880366683, 0.0049343258142471313, 0.0057888217270374298, 0.0039344253018498421, 0.0074158790521323681, 0.0046896189451217651, 0.0051341364160180092, 0.0063986117020249367, 0.0067242779769003391, 0.0045775482431054115, 0.0062030577100813389, 0.0064318510703742504, 0.0068133440800011158, 0.0052346247248351574, 0.0073571125976741314, 0.0051833377219736576, 0.0056412634439766407, 0.0056810779497027397, 0.0051959543488919735, 0.0059623764827847481, 0.0057648960500955582, 0.0072295726276934147, 0.0064465804025530815, 0.0066668116487562656, 0.0050574960187077522, 0.006006184034049511, 0.0058654504828155041, 0.007410561665892601, 0.0048142331652343273, 0.004303032997995615, 0.0045368922874331474, 0.0040195109322667122, 0.0051756855100393295, 0.0054620150476694107, 0.0045251450501382351, 0.0050256615504622459, 0.0063328193500638008, 0.0043816710822284222, 0.0051875729113817215, 0.0053647090680897236, 0.0050158179365098476, 0.0061470726504921913, 0.0082924719899892807, 0.0083234915509819984, 0.0071932524442672729, 0.0046494146808981895, 0.0068954690359532833, 0.0060908752493560314, 0.0063730506226420403, 0.0039240019395947456, 0.0051150801591575146, 0.0051415828056633472, 0.0061676250770688057, 0.0060406886041164398, 0.0042600519955158234, 0.0040055927820503712, 0.0066126422025263309, 0.0049558589234948158, 0.0039766565896570683, 0.0084351301193237305, 0.004372316412627697, 0.0065218242816627026, 0.0070842364802956581, 0.0051283859647810459, 0.0055354558862745762, 0.0064139463938772678, 0.0048629781231284142, 0.0052582947537302971, 0.0050526908598840237, 0.0071793738752603531, 0.0054841591045260429, 0.0048294891603291035, 0.0058131027035415173, 0.0064138798043131828, 0.0046820365823805332, 0.0072783045470714569, 0.0088421367108821869, 0.0063258009031414986, 0.0073446803726255894, 0.0046940702013671398, 0.005071085412055254, 0.0078055583871901035, 0.0081345168873667717, 0.0071515338495373726, 0.0048805875703692436, 0.0047274357639253139, 0.006277517881244421, 0.0069296322762966156, 0.0040356344543397427, 0.0062719620764255524, 0.0051460321992635727, 0.0036687410902231932, 0.0061365966685116291, 0.0055985595099627972, 0.0066051366738975048, 0.0063108485192060471, 0.0067942114546895027, 0.0051527498289942741, 0.0054248818196356297, 0.0043637882918119431, 0.0071481680497527122, 0.0062711392529308796, 0.0039936951361596584, 0.0051308628171682358, 0.0079534398391842842, 0.0069149606861174107, 0.0071326154284179211, 0.0053353086113929749, 0.0062374952249228954, 0.0053601204417645931, 0.0054949186742305756, 0.0050068739801645279, 0.0032684849575161934, 0.0066048768348991871, 0.0051914500072598457, 0.005906024482101202, 0.0041127698495984077, 0.0060105584561824799, 0.006387670524418354, 0.0069281053729355335, 0.0061651156283915043, 0.0046973899006843567, 0.0073617985472083092, 0.0059448597021400928, 0.0081607550382614136, 0.0063528609462082386, 0.0052075674757361412, 0.0069100251421332359, 0.0046933572739362717, 0.0052632256411015987, 0.0044186986051499844, 0.0050831963308155537, 0.0053728870116174221, 0.005440631415694952, 0.0045045483857393265, 0.0055447309277951717, 0.0052283024415373802, 0.0051716845482587814, 0.005202094092965126, 0.0049796435050666332, 0.007816363126039505, 0.0076216571033000946, 0.0037586868274956942, 0.004451017826795578, 0.006453078705817461, 0.0049800379201769829, 0.0060954759828746319, 0.0036335831973701715, 0.0057687037624418736, 0.0063641858287155628, 0.0055381227284669876, 0.0048788595013320446, 0.006356656551361084, 0.0061929826624691486, 0.0053428476676344872, 0.0053637996315956116, 0.0050468649715185165, 0.0049841012805700302, 0.005917668342590332, 0.0061937593854963779, 0.0058369915932416916, 0.0045051658526062965, 0.0043023540638387203, 0.0049200709909200668, 0.0056335902772843838, 0.0056006205268204212, 0.0043690372258424759, 0.0055847880430519581, 0.0047268001362681389, 0.0057245665229856968, 0.008684900589287281, 0.0060821119695901871, 0.0047989632003009319, 0.0062671881169080734, 0.0067392787896096706, 0.0074072275310754776, 0.0069285472854971886, 0.0052701220847666264, 0.0082525461912155151, 0.0063399956561625004, 0.0053803198970854282, 0.0065661263652145863, 0.0047540590167045593, 0.0076407566666603088, 0.0055770245380699635, 0.0058317752555012703, 0.004838594701141119, 0.006707068532705307, 0.0056207305751740932, 0.0064598466269671917, 0.0065826545469462872, 0.0046713314950466156, 0.0038006904069334269, 0.0062518157064914703, 0.0046175657771527767, 0.0045796516351401806, 0.0046338485553860664, 0.0064977239817380905, 0.0065613212063908577, 0.0059500751085579395, 0.0039181937463581562, 0.0042421487160027027, 0.0067585962824523449, 0.0060085100121796131, 0.0059521952643990517, 0.0050296965055167675, 0.0041673281230032444, 0.0063047078438103199, 0.0046389610506594181, 0.0044050808064639568, 0.0049532484263181686, 0.0060606533661484718, 0.0052665285766124725, 0.0071499613113701344, 0.006518916692584753, 0.0062671652995049953, 0.0072156870737671852, 0.004908247385174036, 0.0048405281268060207, 0.005201416090130806, 0.0064823310822248459, 0.0051574446260929108, 0.0057009677402675152, 0.0079958066344261169, 0.0072739589959383011, 0.0046523315832018852, 0.0052864206954836845, 0.0062625342980027199, 0.0054066404700279236, 0.0045939665287733078, 0.0040443027392029762, 0.0048505198210477829, 0.0048920698463916779, 0.0054155038669705391, 0.0050921747460961342, 0.0063043748959898949, 0.0079086394980549812, 0.0048689860850572586, 0.0068338890559971333, 0.006611670833081007, 0.0042716683819890022, 0.005033781286329031, 0.0048642102628946304, 0.0059546255506575108, 0.0064616468735039234, 0.0047938940115272999, 0.0064602014608681202, 0.0047037433832883835, 0.0049660811200737953, 0.0046969829127192497, 0.0055807903409004211, 0.0052505778148770332, 0.006345655769109726, 0.004585533868521452, 0.0061955372802913189, 0.0041476846672594547, 0.0050782244652509689, 0.0056482916697859764, 0.0057270885445177555, 0.0044999285601079464, 0.0041219731792807579, 0.0052427751943469048, 0.0057086958549916744, 0.0062745730392634869, 0.0064322063699364662, 0.0070917326956987381, 0.0051416852511465549, 0.0040576965548098087, 0.0058914176188409328, 0.0044915224425494671, 0.0071053542196750641, 0.008442276157438755, 0.004498722031712532, 0.004793989472091198, 0.0053835362195968628, 0.0087039833888411522, 0.0044729495421051979, 0.0066671576350927353, 0.0047910218127071857, 0.006434375885874033, 0.0048106848262250423, 0.0052980789914727211, 0.0044451882131397724, 0.006176370196044445, 0.0053104450926184654, 0.0059689409099519253, 0.0056569422595202923, 0.0055100196041166782, 0.006880459375679493, 0.0052912244573235512, 0.0068148849532008171, 0.0053938613273203373, 0.0066785616800189018, 0.0057102581486105919, 0.0046359328553080559, 0.005783627275377512, 0.0044178287498652935, 0.0044061881490051746, 0.005166168324649334, 0.0049242507666349411, 0.0041038836352527142, 0.005856118630617857, 0.0047058234922587872, 0.0044202040880918503, 0.0049909153021872044, 0.0057675037533044815, 0.0052607511170208454, 0.003985745832324028, 0.0043594827875494957, 0.0076760300435125828, 0.0066827861592173576, 0.0058256182819604874, 0.0056514223106205463, 0.0072329803369939327, 0.0048041380941867828, 0.0055279224179685116, 0.0053872098214924335, 0.0051414989866316319, 0.0063130781054496765, 0.0060784122906625271, 0.0054227150976657867, 0.0075894379988312721, 0.0074407570064067841, 0.0055550877004861832, 0.0057885586284101009, 0.0051336195319890976, 0.0050551365129649639, 0.0066286167129874229, 0.0050092604942619801, 0.0051188613288104534, 0.006261094007641077, 0.0065356739796698093, 0.0047413730062544346, 0.0050964532420039177, 0.0060841874219477177, 0.0049243113026022911, 0.0062052560970187187, 0.0058343489654362202, 0.005369940772652626, 0.0060094408690929413, 0.0062456405721604824, 0.0061534172855317593, 0.004753507673740387, 0.004384244792163372, 0.0034097745083272457, 0.0042285704985260963, 0.008072209544479847, 0.0051980232819914818, 0.0082943104207515717, 0.0066258059814572334, 0.0042989258654415607, 0.0059459595941007137, 0.0038514940533787012, 0.0053925639949738979, 0.0057803969830274582, 0.0081713041290640831, 0.0055227135308086872, 0.0050118342041969299, 0.0069944141432642937, 0.0052195703610777855, 0.0061996071599423885, 0.0036574495024979115, 0.0045647691003978252, 0.0054806140251457691, 0.0060267909429967403, 0.0063457861542701721, 0.0055663571693003178, 0.0050113331526517868, 0.0074031371623277664, 0.0042444164864718914, 0.0075138057582080364, 0.0056095249019563198, 0.0051263612695038319, 0.0054698586463928223, 0.0047214245423674583, 0.004926933441311121, 0.0056158257648348808, 0.0055478415451943874, 0.0051869824528694153, 0.0076895556412637234, 0.0044343508780002594, 0.0061956131830811501, 0.0059154503978788853, 0.0056905616074800491, 0.0048598493449389935, 0.0075370040722191334, 0.0076516633853316307, 0.0069961459375917912, 0.0052952910773456097, 0.0059597552753984928, 0.0057886852882802486, 0.0065381154417991638, 0.0047576408833265305, 0.0057680150493979454, 0.0057298545725643635, 0.006276013795286417, 0.0033820769749581814, 0.0055714412592351437, 0.0076240203343331814, 0.005131034180521965, 0.0051115485839545727, 0.0055130212567746639, 0.0050728358328342438, 0.0068391012027859688, 0.0046377731487154961, 0.0056691528297960758, 0.0059107602573931217, 0.0064630620181560516, 0.0045616957359015942, 0.0057078278623521328, 0.0067717209458351135, 0.0042270030826330185, 0.0055191740393638611, 0.0069895838387310505, 0.0047153271734714508, 0.0037430024240165949, 0.0045232344418764114, 0.0083308015018701553, 0.0049303984269499779, 0.0057705007493495941, 0.0066055883653461933, 0.0055227065458893776, 0.0047979955561459064, 0.0046008378267288208, 0.0050591640174388885, 0.0040156035684049129, 0.0045655802823603153, 0.0053255101665854454, 0.0046682120300829411, 0.0063976095989346504, 0.00659149419516325, 0.0052763065323233604, 0.0057526919990777969, 0.0051862658001482487, 0.005042793694883585, 0.0066794520244002342, 0.0076256790198385715, 0.0048389839939773083, 0.0051340237259864807, 0.0051134643144905567, 0.0070667951367795467, 0.005717041902244091, 0.0050743189640343189, 0.0053230472840368748, 0.005932654719799757, 0.0047578415833413601, 0.0050648646429181099, 0.0061545665375888348, 0.0050203492864966393, 0.0065697883255779743, 0.0067148786038160324, 0.00434076227247715, 0.0083044087514281273, 0.0058736596256494522, 0.0049127526581287384, 0.0060848179273307323, 0.0056342813186347485, 0.0061167292296886444, 0.010320562869310379, 0.0050997813232243061, 0.0069095059297978878, 0.0071480539627373219, 0.0046477466821670532, 0.0046087526716291904, 0.0057852664031088352, 0.0057455948553979397, 0.0044844076037406921, 0.0055248052813112736, 0.0043775220401585102, 0.006775406189262867, 0.006404312327504158, 0.0046222084201872349, 0.0055638942867517471, 0.0065779248252511024, 0.0061741857789456844, 0.0074644014239311218, 0.0057527776807546616, 0.0061687794514000416, 0.005733993835747242, 0.0044181463308632374, 0.0055334665812551975, 0.0056276870891451836, 0.0090783042833209038, 0.0050406618975102901, 0.0044149081222712994, 0.0039852247573435307, 0.0061222813092172146, 0.0052481107413768768, 0.005811858456581831, 0.0053535862825810909, 0.0048624202609062195, 0.0048191477544605732, 0.0055485102348029613, 0.0062565715052187443, 0.0068770013749599457, 0.005505985114723444, 0.0046556126326322556, 0.0056073609739542007, 0.0040243156254291534, 0.0044866143725812435, 0.0050249933265149593, 0.0051592467352747917, 0.0075156548991799355, 0.0053070965223014355, 0.0066413283348083496, 0.0053930329158902168, 0.0051837954670190811, 0.0053176875226199627, 0.0060262894257903099, 0.0059992498718202114, 0.0048262360505759716, 0.0048692729324102402, 0.0052803452126681805, 0.0043916041031479836, 0.010083907283842564, 0.005923375952988863, 0.0053199753165245056, 0.0060761305503547192, 0.0049596680328249931, 0.007651014719158411, 0.0056462706997990608, 0.0044458629563450813, 0.006838903296738863, 0.0061960984021425247, 0.0032388006802648306, 0.0067719481885433197, 0.0045472853817045689, 0.0061234943568706512, 0.0059217456728219986, 0.0051981909200549126, 0.0049758558161556721, 0.0056782420724630356, 0.0054469499737024307, 0.0046150661073625088, 0.0046640210784971714, 0.0051781721413135529, 0.0074357003904879093, 0.0058335592038929462, 0.0056416196748614311, 0.0042478363029658794, 0.0057902298867702484, 0.0097188474610447884, 0.0051367832347750664, 0.0069410344585776329, 0.0055893193930387497, 0.0049347737804055214, 0.0060254880227148533, 0.0043230559676885605, 0.0076630511321127415, 0.0074038305319845676, 0.0046449340879917145, 0.005097127053886652, 0.0062137539498507977, 0.0058601135388016701, 0.00735808489844203, 0.0078007080592215061, 0.0043216850608587265, 0.0060473312623798847, 0.0054092030040919781, 0.0051648872904479504, 0.0041946251876652241, 0.0047438782639801502, 0.0063898200169205666, 0.00539039121940732, 0.0062892120331525803, 0.0060633840039372444, 0.0049989186227321625, 0.0051755979657173157, 0.0041115046478807926, 0.0060004382394254208, 0.0055600577034056187, 0.0046403319574892521, 0.0060680410824716091, 0.0055883242748677731, 0.0076784077100455761, 0.0064250095747411251, 0.005108668003231287, 0.0067855226807296276, 0.0035092714242637157, 0.0052617103792726994, 0.0051438105292618275, 0.0050645256415009499, 0.0055627282708883286, 0.0052488036453723907, 0.0061864526942372322, 0.0068110954016447067, 0.0037014540284872055, 0.0069158878177404404, 0.0040885778144001961, 0.005951752420514822, 0.0090059395879507065, 0.0062866830267012119, 0.0047367843799293041, 0.0050798971205949783, 0.0051363869570195675, 0.0053317518904805183, 0.0052207866683602333, 0.0048694931901991367, 0.0036717241164296865, 0.0045208707451820374, 0.0045247385278344154, 0.0058838538825511932, 0.0057976981624960899, 0.006185420323163271, 0.0038871283177286386, 0.0061673638410866261, 0.0047576059587299824, 0.0035915372427552938, 0.0046453266404569149, 0.0069430433213710785, 0.0039809364825487137, 0.0058703464455902576, 0.0050019635818898678, 0.0048834211193025112, 0.005038263276219368, 0.0052656759507954121, 0.0048654335550963879, 0.0071239653043448925, 0.0034739228431135416, 0.0047516212798655033, 0.0064642950892448425, 0.006146247498691082, 0.0059766387566924095, 0.0059140012599527836, 0.0052118147723376751, 0.0055360165424644947, 0.005951837170869112, 0.0063745412044227123, 0.0058240760117769241, 0.004507897887378931, 0.0048098247498273849, 0.0067143505439162254, 0.007013875525444746, 0.0047260443679988384, 0.006367760244756937, 0.0054885586723685265, 0.0065366695635020733, 0.0066073676571249962, 0.0049254633486270905, 0.0054590646177530289, 0.0046853171661496162, 0.0051266388036310673, 0.0065336604602634907, 0.0057803457602858543, 0.007661561481654644, 0.0054392558522522449, 0.0050474596209824085, 0.0058515053242444992, 0.0038702930323779583, 0.00422297278419137, 0.0070990808308124542, 0.0055649359710514545, 0.0043750545009970665, 0.0055451802909374237, 0.0050896629691123962, 0.0057470975443720818, 0.0056826621294021606, 0.0046735317446291447, 0.0059964223764836788, 0.0042662280611693859, 0.0052359038963913918, 0.006293080747127533, 0.0053556058555841446, 0.0044303662143647671, 0.0064764539711177349, 0.006834227591753006, 0.0061141140758991241, 0.0059108245186507702, 0.0049240258522331715, 0.004476543515920639, 0.005582831334322691, 0.0069895512424409389, 0.0044566802680492401, 0.004842701368033886, 0.0055303103290498257, 0.0072104022838175297, 0.0048096789978444576, 0.0069491253234446049, 0.0067108375951647758, } };
const TfArray<1280, int> quant78_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const ALIGN(8) int8_t tensor_data79[1*3*3*8] = { 
  /* [0][0][][] */ 0,-1,7,-18,13,1,15,-9, 127,-11,29,41,19,-5,-13,127, -5,1,3,-12,9,1,19,0, 
  /* [0][1][][] */ -2,75,36,48,15,127,18,-8, -35,127,-127,-127,-127,-89,-127,0, 1,-18,51,44,24,-27,16,1, 
  /* [0][2][][] */ 0,1,-2,-14,13,-3,25,-4, 4,-16,-8,-45,26,-1,-15,-20, 0,9,-7,-13,10,2,18,-6, 
};
const TfArray<4, int> tensor_dimension79 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant79_scale = { 8, { 0.005186338908970356, 0.0063708256930112839, 0.022887788712978363, 0.01245578657835722, 0.092743851244449615, 0.065874278545379639, 0.0189167819917202, 0.0054054036736488342, } };
const TfArray<8, int> quant79_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 3 };
const ALIGN(8) int32_t tensor_data80[8] = { 13104, 1124, -23198, 13280, -1826, -26198, 373, 9030, };
const TfArray<1, int> tensor_dimension80 = { 1, { 8 } };
const TfArray<8, float> quant80_scale = { 8, { 0.00012335101200733334, 0.00013242836575955153, 0.00015995871217455715, 0.00031744243460707366, 0.00035524109262041748, 0.00024344456323888153, 0.00019254596554674208, 0.00025618376093916595, } };
const TfArray<8, int> quant80_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const ALIGN(8) int8_t tensor_data81[1*3*3*48] = { 
  /* [0][0][][] */ 32,-105,50,81,-70,7,-35,-104,50,-20,26,44,98,-119,-69,-127,-3,33,80,0,-101,-127,83,-42,56,101,-56,33,-121,1,76,127,-79,40,82,-20,-21,-21,97,-43,-2,-84,62,-15,27,-13,-31,-18, -127,-127,106,127,-115,-9,-8,120,16,127,52,114,127,16,-82,85,61,91,127,-34,-127,-125,-54,16,127,127,127,70,-127,51,-117,-52,-127,80,81,-29,26,38,127,-63,-101,-86,100,-87,51,-74,-59,-14, 76,-35,1,30,-41,-19,69,1,-23,-68,5,80,28,4,-26,12,37,52,48,-9,-63,-3,-14,11,77,14,-73,57,38,78,36,-39,-121,54,49,-20,-4,-18,46,2,10,-35,25,-49,3,-92,-40,-32, 
  /* [0][1][][] */ 8,-33,116,68,64,68,60,98,-77,16,83,40,105,-127,-114,113,114,37,-38,-59,42,-107,127,-71,62,7,-17,66,-79,-18,79,120,39,75,63,-82,-99,-69,22,-30,-4,-100,127,-20,-74,-64,85,-81, -79,-46,127,104,127,127,25,-127,-127,-117,127,127,90,-2,-127,-67,127,127,-27,-95,48,-117,-99,127,120,29,-4,127,-85,-52,-127,-39,68,127,127,-127,127,127,34,-32,-127,-127,109,-127,-127,-127,127,-127, 66,-21,49,69,45,18,-127,0,59,70,62,94,41,18,-30,-17,42,65,9,-54,17,40,-40,-80,110,1,16,36,-2,127,61,-63,68,78,53,-53,-24,-59,-6,-45,22,-27,7,-93,-83,-94,85,-64, 
  /* [0][2][][] */ -18,56,12,-9,8,87,-27,-4,57,3,86,-17,-13,-52,-49,17,52,19,-74,-82,31,1,61,91,4,-84,3,41,13,-21,33,12,8,18,-94,-50,-9,-37,-89,-106,14,-44,75,-2,52,-51,-66,-50, -7,76,31,-43,-21,125,-16,22,67,-9,103,26,-45,24,-59,-19,61,40,-82,-127,47,-3,-71,-124,24,-104,-9,65,-5,-25,-63,16,16,36,37,-69,2,67,-122,-127,-65,-48,73,-60,85,-91,-68,-122, 19,27,13,-8,5,39,59,-7,-6,1,33,25,10,-4,-13,4,6,19,-39,-74,32,30,-18,73,27,-43,8,40,-21,111,22,-35,9,31,50,-60,7,-30,-74,-35,13,-1,21,-22,68,-49,-47,-59, 
};
const TfArray<4, int> tensor_dimension81 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant81_scale = { 48, { 0.011723890900611877, 0.0063107442110776901, 0.006146059837192297, 0.002949658315628767, 0.014826935715973377, 0.0032013317104429007, 0.013222606852650642, 0.053796693682670593, 0.0095146484673023224, 0.0169786736369133, 0.0034879078157246113, 0.0033490548375993967, 0.0088292704895138741, 0.0066729066893458366, 0.0087053794413805008, 0.026235954836010933, 0.0034944508224725723, 0.0050853914581239223, 0.0079548526555299759, 0.0045939045958220959, 0.010531787760555744, 0.0017606191104277968, 0.019270820543169975, 0.016802595928311348, 0.0036359936930239201, 0.0042892051860690117, 0.016481777653098106, 0.0031520489137619734, 0.0021185085643082857, 0.0084266401827335358, 0.030212853103876114, 0.007303241640329361, 0.029540244489908218, 0.0049574566073715687, 0.0044610751792788506, 0.010882852599024773, 0.018255621194839478, 0.011171173304319382, 0.0079568587243556976, 0.0036897445097565651, 0.0056063691154122353, 0.0023189645726233721, 0.0041413563303649426, 0.005444022361189127, 0.0064883679151535034, 0.002295629819855094, 0.0092051569372415543, 0.0037806627806276083, } };
const TfArray<48, int> quant81_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 3 };
const ALIGN(8) int32_t tensor_data82[8] = { -19529, 1748, -3752, 7147, 5285, -9288, 3883, 1239, };
const TfArray<1, int> tensor_dimension82 = { 1, { 8 } };
const TfArray<8, float> quant82_scale = { 8, { 0.00011359041673131287, 0.00015855429228395224, 0.00012027590855723247, 0.00014395096513908356, 0.00011593144154176116, 0.0001500981452409178, 9.0146961156278849e-05, 0.00013081931683700532, } };
const TfArray<8, int> quant82_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const ALIGN(8) int8_t tensor_data83[1*3*3*48] = { 
  /* [0][0][][] */ 22,11,-18,-14,-13,20,119,6,-4,-35,-47,-16,13,-3,1,13,4,-12,-18,25,95,-13,17,-77,-22,109,-127,34,-39,-3,12,-51,-11,51,-12,91,-18,-14,-56,5,-4,13,49,-21,-1,78,-7,-28, 53,53,51,-64,-3,-11,-127,38,-26,34,-97,-4,-127,-33,-124,68,53,-38,81,-94,85,-54,-17,106,-63,-127,47,-40,34,-17,127,-63,110,127,-80,-79,-127,44,-124,-14,66,80,127,121,-14,1,53,71, 12,4,-11,-7,31,-11,-78,-7,5,3,-38,4,30,28,6,-10,-8,37,-101,-19,74,7,-23,110,-20,-8,-107,30,0,18,-17,-21,6,30,-5,-36,-20,-16,-19,-7,3,10,46,-1,-1,-2,-6,-21, 
  /* [0][1][][] */ -110,35,-84,31,2,-127,-69,42,-11,-105,-80,1,-34,42,13,79,30,24,127,127,-8,-82,113,-90,-41,-107,-19,-10,38,32,50,-63,2,21,47,115,41,-127,-70,-76,90,46,116,-39,-7,127,9,49, -127,-127,127,127,127,123,50,-127,127,127,-127,-127,-85,76,127,127,127,-85,76,-25,127,67,-127,45,127,110,26,120,-127,-127,62,127,-127,-18,127,-127,98,-97,-18,-127,127,49,-114,17,127,9,127,127, -74,12,-60,20,-69,12,91,37,-10,-23,-114,36,18,-127,-1,-7,51,127,-101,65,-9,-127,33,127,-48,6,-38,-38,68,100,0,-34,-5,13,19,34,30,-25,-11,28,50,22,-51,127,-13,16,55,-6, 
  /* [0][2][][] */ 69,5,-15,-15,57,-11,-33,-4,3,-21,5,5,4,-16,21,14,-17,-4,-1,4,11,17,15,-15,-19,-16,-18,-7,3,-16,-5,-14,13,-85,-24,44,6,100,92,-7,-76,-127,83,-21,-1,62,-5,-34, 96,49,40,-64,-77,12,77,42,18,13,29,23,-50,-30,5,-77,58,-13,-26,-103,-67,-22,-1,-64,40,19,-47,127,4,17,-1,-40,1,-117,-93,-44,-22,123,127,10,-97,-31,37,-10,-20,20,11,2, 57,15,5,-18,21,1,-12,-15,18,17,24,6,4,34,22,5,22,4,-32,-54,-8,13,-28,-22,-15,5,-31,-33,-23,-2,8,-11,-4,-50,-13,-16,9,24,54,-16,-86,-99,-37,-10,0,3,-2,-22, 
};
const TfArray<4, int> tensor_dimension83 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant83_scale = { 48, { 0.011230808682739735, 0.006152014248073101, 0.0126750273630023, 0.0093698380514979362, 0.010718660429120064, 0.015927286818623543, 0.0080122929066419601, 0.036125913262367249, 0.041790138930082321, 0.0081356577575206757, 0.0057205245830118656, 0.010221889242529869, 0.010376709513366222, 0.028292495757341385, 0.008596138097345829, 0.0063659297302365303, 0.0047221067361533642, 0.030411470681428909, 0.0073989857919514179, 0.0081048719584941864, 0.0041018193587660789, 0.0040368628688156605, 0.012165217660367489, 0.0047855782322585583, 0.00902510154992342, 0.013611528091132641, 0.0052992478013038635, 0.0050684856250882149, 0.018665134906768799, 0.023127846419811249, 0.0076605034992098808, 0.008820204995572567, 0.026994926854968071, 0.0068045970983803272, 0.017788872122764587, 0.0084924036636948586, 0.010501468554139137, 0.020529119297862053, 0.0063670719973742962, 0.0051732789725065231, 0.0071159661747515202, 0.0075202994048595428, 0.0043249749578535557, 0.0062242988497018814, 0.055724594742059708, 0.0084309857338666916, 0.007802960928529501, 0.0135048758238554, } };
const TfArray<48, int> quant83_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 3 };
const ALIGN(8) int32_t tensor_data84[8] = { 12344, 9937, -5034, -9204, -10296, -8698, 3927, 2690, };
const TfArray<1, int> tensor_dimension84 = { 1, { 8 } };
const TfArray<8, float> quant84_scale = { 8, { 0.00019205451826564968, 0.00015710800653323531, 0.00014917728549335152, 0.00032865861430764198, 8.2377053331583738e-05, 0.00017062996630556881, 0.00023177362163551152, 0.00017808783741202205, } };
const TfArray<8, int> quant84_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const ALIGN(8) int8_t tensor_data85[1*3*3*48] = { 
  /* [0][0][][] */ -101,-39,-99,69,65,-69,68,78,-58,-67,98,-83,58,-61,-39,69,92,98,-48,59,-68,82,68,105,52,-79,53,87,67,-55,-48,78,51,-61,-17,-84,-74,-50,127,-61,-64,-106,-55,-81,91,40,-119,-62, -101,-61,-112,103,95,-97,93,95,-61,-92,119,-124,67,-69,-41,99,122,111,-74,84,-83,103,90,127,74,-117,91,92,84,-97,-79,107,80,-93,111,-100,-87,-61,123,-82,-92,-90,-91,-103,-43,74,-122,-70, -80,-25,-43,52,47,-42,51,40,-40,-30,74,-59,23,-24,-26,33,34,-6,-46,60,-9,41,20,31,29,-71,48,43,21,-32,-20,53,39,-41,-86,-48,-53,-29,102,-22,-49,-39,-24,-23,-62,32,-61,-43, 
  /* [0][1][][] */ -127,-80,-126,96,79,-89,91,104,-90,-94,91,-69,100,-106,-110,90,90,113,-83,83,-112,97,91,103,82,-114,75,117,106,-69,-102,87,87,-81,-10,-106,-86,-96,-63,-87,-91,-127,-70,-103,127,82,-119,-111, -125,-127,-127,127,127,-127,127,127,-127,-127,127,-127,127,-127,-127,127,127,127,-127,127,-127,127,127,123,127,-127,127,127,127,-127,-127,127,127,-127,119,-127,-127,-127,-78,-127,-127,-82,-127,-127,-42,127,-127,-127, -94,-55,-71,50,50,-53,67,51,-65,-52,60,-67,38,-43,-32,48,48,-10,-57,74,-39,60,41,34,41,-95,76,58,43,-49,-52,65,60,-51,-127,-60,-64,-88,-66,-44,-70,-79,-51,-32,-112,59,-57,-81, 
  /* [0][2][][] */ -37,-56,-56,25,22,-42,30,40,-48,-40,49,-19,53,-35,-57,28,14,43,-49,14,-65,23,26,35,27,-48,32,61,44,-18,-39,22,39,-42,-3,-57,-24,-62,-111,-30,-39,-94,-34,-47,74,42,-60,-51, -38,-82,-60,33,33,-62,51,54,-87,-73,69,-44,56,-54,-77,43,38,41,-76,29,-80,34,40,23,36,-77,52,60,46,-45,-55,38,57,-43,50,-87,-69,-99,-127,-40,-69,-72,-53,-54,21,60,-66,-85, -25,-42,-31,1,3,-23,29,18,-32,-25,5,-40,15,-16,-25,19,33,-26,-28,26,-31,15,21,10,7,-42,39,6,19,-24,-41,12,27,-15,-80,-28,-36,-74,-86,-32,-21,-39,-28,-14,-63,35,-17,-38, 
};
const TfArray<4, int> tensor_dimension85 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant85_scale = { 48, { 0.0047111101448535919, 0.0048126140609383583, 0.0044279466383159161, 0.0041982973925769329, 0.0037723479326814413, 0.0026899690274149179, 0.0043665249831974506, 0.0046906829811632633, 0.0029903461690992117, 0.0056031392887234688, 0.0039076916873455048, 0.0029835130553692579, 0.0035137019585818052, 0.003030506195500493, 0.0047085229307413101, 0.0032910916488617659, 0.010195574723184109, 0.01287421677261591, 0.0044222716242074966, 0.0031019418966025114, 0.0033605655189603567, 0.0053832670673727989, 0.011925419792532921, 0.011972002685070038, 0.0030926866456866264, 0.0032339582685381174, 0.0059753940440714359, 0.0095516899600625038, 0.0026906623970717192, 0.0045575331896543503, 0.0035381780471652746, 0.0046480116434395313, 0.0077126058749854565, 0.0027925369795411825, 0.0070684193633496761, 0.00477595254778862, 0.003592037595808506, 0.0030456306412816048, 0.0046658283099532127, 0.0055568753741681576, 0.005120876245200634, 0.0028353852685540915, 0.0031196554191410542, 0.0051990887150168419, 0.0072908992879092693, 0.0034118511248379946, 0.0027875537052750587, 0.0045354906469583511, } };
const TfArray<48, int> quant85_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 3 };
const ALIGN(8) int32_t tensor_data86[8] = { 11776, -2494, 10771, 8286, -2813, 24713, 1923, 5326, };
const TfArray<1, int> tensor_dimension86 = { 1, { 8 } };
const TfArray<8, float> quant86_scale = { 8, { 9.4151662779040635e-05, 0.00013471262354869395, 8.8947213953360915e-05, 0.00015061718295328319, 0.00010890537669183686, 0.0001160766914836131, 8.6806219769641757e-05, 0.00010707476758398116, } };
const TfArray<8, int> quant86_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const ALIGN(8) int8_t tensor_data87[1*3*3*48] = { 
  /* [0][0][][] */ -54,-12,-5,95,-9,40,31,125,13,-1,-83,27,-59,-99,-52,-27,12,-89,-15,-31,0,-31,-111,42,-4,80,-120,-34,75,10,33,61,-40,16,0,61,-9,-32,20,45,-59,32,69,-30,-58,24,1,-8, 16,19,-127,127,-50,-14,47,23,-10,127,-127,59,-57,-127,-48,-58,4,26,4,47,-127,21,-100,127,-28,127,23,-3,-98,5,23,-32,-4,127,-114,-10,12,-19,30,-9,-85,127,127,80,-15,127,-31,-74, 26,6,2,75,10,-27,15,95,13,3,-73,23,112,-63,-83,-21,4,-67,-16,-35,28,-33,-63,37,7,56,-110,-28,63,-6,-104,-31,37,2,14,-61,-10,-34,-10,49,-72,16,32,-37,32,19,10,-31, 
  /* [0][1][][] */ -127,-57,2,-7,-26,127,42,90,5,-47,87,72,-127,-68,-3,-49,-18,-105,-103,3,-61,3,-127,94,-25,-18,18,-10,-121,127,127,127,-115,-12,-127,127,58,-12,68,17,-120,23,37,25,-52,-11,-24,6, 12,-56,97,23,-127,1,-127,21,-127,-63,101,-35,22,-51,30,127,127,-18,-34,127,-52,127,-15,67,-127,-3,38,127,-122,-102,-31,-20,-5,-89,-76,-1,-127,127,127,-127,127,-11,-97,127,127,-102,-127,-127, 103,127,-13,-20,19,-123,54,127,5,-49,74,82,110,-82,7,-77,-47,-127,-127,3,-59,-21,-60,15,84,-29,-24,-19,-61,-9,-126,-102,127,5,-93,-119,76,-42,56,27,-116,16,26,27,3,-9,16,17, 
  /* [0][2][][] */ -14,-17,-6,-77,9,52,25,97,32,-21,8,-7,-3,-96,-127,-23,-27,-1,0,22,3,-54,-61,-38,30,-76,-127,-37,101,22,67,35,-22,1,16,43,-10,-36,-70,-5,-52,17,-83,41,-51,-13,6,13, 12,-17,39,-126,73,-24,40,-19,-24,50,34,127,-38,10,-20,-37,-56,-61,-24,25,-85,7,-68,56,89,-93,26,11,-127,-26,73,-14,15,-46,-98,-10,-24,5,74,-47,-89,24,-86,-69,-69,-23,3,-7, 28,34,-2,-50,-4,-29,23,80,36,-22,-8,-24,37,-82,-111,-21,-13,-4,5,36,30,-27,-55,-14,-20,-45,-101,-32,100,0,-70,-19,11,2,28,-33,-15,-36,-80,7,-46,10,-70,35,29,-13,3,8, 
};
const TfArray<4, int> tensor_dimension87 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant87_scale = { 48, { 0.0092826671898365021, 0.011735020205378532, 0.013972418382763863, 0.0052219056524336338, 0.0086911153048276901, 0.010048477910459042, 0.0048747016116976738, 0.002102184109389782, 0.015797177329659462, 0.016289617866277695, 0.0097305513918399811, 0.0034652403555810452, 0.0084083182737231255, 0.0042249062098562717, 0.0040208045393228531, 0.0050469804555177689, 0.014270021580159664, 0.0036279689520597458, 0.0067765549756586552, 0.0051830043084919453, 0.0061395908705890179, 0.021048756316304207, 0.0030483035370707512, 0.011967591010034084, 0.013625537976622581, 0.0059691770002245903, 0.0049608326517045498, 0.011072821915149689, 0.0037204765249043703, 0.017417917028069496, 0.0076066371984779835, 0.011844756081700325, 0.009694177657365799, 0.013915592804551125, 0.0083041498437523842, 0.0079742036759853363, 0.0086403088644146919, 0.010500561445951462, 0.0048288567923009396, 0.011916806921362877, 0.004110321868211031, 0.0054734149016439915, 0.0053349612280726433, 0.007450595498085022, 0.053828306496143341, 0.015790544450283051, 0.010271363891661167, 0.004942174069583416, } };
const TfArray<48, int> quant87_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 3 };
const ALIGN(8) int32_t tensor_data88[8] = { -5033, -8009, -6966, 9073, 4863, -4129, 8578, 412, };
const TfArray<1, int> tensor_dimension88 = { 1, { 8 } };
const TfArray<8, float> quant88_scale = { 8, { 0.0001278779236599803, 0.00020086432050447911, 9.2572117864619941e-05, 0.00017485718126408756, 0.00016737275291234255, 8.7883963715285063e-05, 0.00015088391955941916, 0.00018603610806167126, } };
const TfArray<8, int> quant88_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const ALIGN(8) int8_t tensor_data89[1*3*3*48] = { 
  /* [0][0][][] */ 68,-4,-33,-77,12,22,-72,34,22,36,-79,28,37,-19,-76,12,-127,54,26,104,-18,34,-28,-51,35,-13,4,48,9,18,-20,80,11,62,-2,21,-95,1,18,-121,-8,-50,1,-25,-59,-30,51,-78, 68,18,-127,-20,127,12,-127,21,-31,2,-46,127,60,14,-83,127,-62,48,-127,127,69,85,-72,-49,-29,-37,127,-15,127,127,-91,127,127,-95,2,-11,-56,-127,5,-24,28,-127,-5,-4,3,127,61,66, 35,-15,-33,-84,-14,11,-46,3,19,44,-127,-21,32,37,-56,0,-68,40,17,49,-32,-118,-12,-43,31,-8,-29,52,-14,8,-21,47,7,28,5,25,-57,22,-8,-127,-1,2,-11,-23,37,-45,3,-93, 
  /* [0][1][][] */ 31,37,-107,-13,51,12,-29,30,-68,45,-70,73,66,-124,-127,30,-101,52,-31,117,-39,50,-29,-73,18,-18,93,-18,104,57,19,66,-96,-84,109,11,-66,-85,115,-38,83,-94,-127,-26,-9,-14,20,-1, -127,127,-53,103,-37,127,54,-127,127,127,-123,46,127,6,111,-15,-102,-127,73,-46,110,75,127,-127,-127,21,52,-127,10,55,-32,42,32,-127,69,127,-80,80,-108,-104,68,-64,-114,127,-17,66,95,56, 15,15,-92,-36,49,16,-4,-56,-32,27,12,-25,44,127,-85,35,-25,44,-18,78,-56,-127,-29,-1,7,-16,60,-21,73,63,24,94,-110,-80,67,1,-21,-90,127,35,79,-55,-126,-22,127,-28,-64,-3, 
  /* [0][2][][] */ 5,10,-3,-123,24,-10,-21,-10,-6,21,-33,-8,14,3,4,-9,7,38,4,30,-73,-85,-22,91,28,37,20,42,70,64,-8,30,50,18,-78,0,-127,-45,26,-56,-108,-19,-28,-30,-43,-8,-19,-26, 6,-23,-26,-53,-5,-9,-44,-65,8,-3,20,0,18,8,22,0,5,35,57,21,-127,-115,-32,109,-32,127,42,-27,112,96,127,90,-28,-94,-127,23,-78,-92,6,92,-127,-11,-3,-29,40,87,-127,127, 1,4,-18,-127,13,-7,-9,-51,12,19,-80,-29,-9,2,-16,-10,35,25,0,-16,-82,42,-16,41,27,20,9,47,51,47,-1,-6,29,-17,-45,-2,-62,-34,-27,-69,-96,26,-43,-27,51,-31,-16,-8, 
};
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant89_scale = { 48, { 0.0082892784848809242, 0.011148725636303425, 0.0044097327627241611, 0.003756482619792223, 0.011323588900268078, 0.0083583975210785866, 0.0035207332111895084, 0.004650516901165247, 0.01402628980576992, 0.0091595333069562912, 0.0045566372573375702, 0.017581960186362267, 0.0061346925795078278, 0.0095064472407102585, 0.0040111811831593513, 0.0098919328302145004, 0.0028277139645069838, 0.006930910050868988, 0.019204018637537956, 0.0062918481417000294, 0.010095847770571709, 0.021712398156523705, 0.0062573598697781563, 0.0059163332916796207, 0.011240578256547451, 0.0065366826020181179, 0.012577380985021591, 0.012726765125989914, 0.0037265114951878786, 0.0049889450892806053, 0.01197841577231884, 0.0035586708690971136, 0.010297323577105999, 0.0042036185041069984, 0.01026950404047966, 0.0098379291594028473, 0.0037030298262834549, 0.0066215232945978642, 0.006876776460558176, 0.0033284907694905996, 0.005591981578618288, 0.0036060870625078678, 0.0035282643511891365, 0.0066487835720181465, 0.0072187273763120174, 0.0080739157274365425, 0.0067389192990958691, 0.011548480018973351, } };
const TfArray<48, int> quant89_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 3 };
const ALIGN(8) int32_t tensor_data90[8] = { -7367, -13946, -19666, 20101, -2975, -15459, -6017, -8425, };
const TfArray<1, int> tensor_dimension90 = { 1, { 8 } };
const TfArray<8, float> quant90_scale = { 8, { 8.1780781329143792e-05, 9.6687443146947771e-05, 8.8046137534547597e-05, 8.9549830590840429e-05, 0.00021202105563133955, 0.0001063990275724791, 0.00012572070409078151, 7.5011354056186974e-05, } };
const TfArray<8, int> quant90_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const ALIGN(8) int8_t tensor_data91[1*3*3*48] = { 
  /* [0][0][][] */ 77,74,-127,-102,-94,125,109,112,96,88,91,-64,78,29,-86,94,30,92,-97,-90,-102,-62,-99,63,76,66,120,94,119,94,-1,-115,-88,-94,65,-75,-97,-69,-66,77,-72,-127,37,-89,52,-99,96,94, 91,88,-124,-118,-87,127,127,120,107,90,98,-80,127,29,-98,112,58,127,-99,-109,-113,-82,-110,91,101,99,110,108,-31,127,44,-122,-99,-78,79,-76,-113,-84,-92,78,-83,17,29,-96,62,-117,107,98, 28,22,-92,-18,-41,21,50,0,37,33,41,-20,51,6,-27,33,32,63,-23,-19,-38,-22,-25,35,38,54,72,37,-92,55,10,-49,-22,-33,35,-29,-49,-50,-11,25,-29,76,9,-34,33,-51,47,48, 
  /* [0][1][][] */ 113,105,-126,-98,-127,108,125,127,112,127,101,-103,56,50,-117,103,78,-60,-121,-111,-126,-108,-127,96,91,94,127,116,127,85,-120,-127,-112,-123,106,-124,-106,-108,-84,127,-101,-113,109,-109,89,-109,120,127, 127,127,-123,-127,-109,101,125,91,127,123,127,-127,84,52,-127,127,127,-45,-127,-127,-127,-127,-119,127,127,127,110,127,-54,121,-108,-126,-127,-127,127,-127,-127,-127,-127,117,-127,82,127,-127,127,-127,127,117, 39,39,-74,-1,-50,40,31,4,43,44,52,-29,14,15,-28,52,73,-4,-49,-43,-40,-33,-24,46,50,76,59,44,-95,57,-104,-51,-32,-43,47,-73,-49,-81,-26,36,-45,113,48,-53,65,-47,59,50, 
  /* [0][2][][] */ 59,51,-64,-43,-29,26,21,58,43,82,27,-41,-39,-53,-51,29,35,-90,-63,-50,-52,-24,-43,42,29,64,38,48,45,17,-126,-37,-45,-64,57,-59,-29,-68,-42,83,-40,-56,92,-48,58,-29,37,46, 61,67,-75,-69,-32,27,19,18,35,95,58,-39,-52,-73,-47,40,63,-70,-75,-51,-55,-53,-39,57,48,74,28,55,-20,23,-127,-33,-57,-75,74,-83,-48,-86,-54,88,-62,30,102,-49,79,-37,55,43, 33,28,-20,-5,0,9,-3,46,14,34,21,-12,-17,-127,0,35,41,-47,-25,-27,-39,-11,-8,24,25,46,30,22,-31,17,-91,-14,-19,-11,34,-16,-9,-12,-19,23,-22,68,50,-13,29,1,27,19, 
};
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant91_scale = { 48, { 0.0032931461464613676, 0.0034082538913935423, 0.0023945886641740799, 0.0049170074053108692, 0.0033909361809492111, 0.011414460837841034, 0.0025441001635044813, 0.0070937713608145714, 0.0059477938339114189, 0.0048094466328620911, 0.019482197239995003, 0.0041584987193346024, 0.0035136963706463575, 0.0097171328961849213, 0.0041038170456886292, 0.0030349583830684423, 0.0032834378071129322, 0.0090106688439846039, 0.004594879224896431, 0.0027849744074046612, 0.0014690202660858631, 0.0029273098334670067, 0.0026496355421841145, 0.0035646667238324881, 0.0033074133098125458, 0.0047575142234563828, 0.0023924235720187426, 0.0039341170340776443, 0.0055675022304058075, 0.0031155871693044901, 0.0026431488804519176, 0.0030464541632682085, 0.0026844635140150785, 0.002577625447884202, 0.0037672084290534258, 0.0035650557838380337, 0.0019636647775769234, 0.0036528692580759525, 0.0035788482055068016, 0.0040106088854372501, 0.0024132025428116322, 0.0045206504873931408, 0.0041131232865154743, 0.0051007303409278393, 0.020982209593057632, 0.0022738887928426266, 0.0028059405740350485, 0.0034049940295517445, } };
const TfArray<48, int> quant91_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 3 };
const ALIGN(8) int32_t tensor_data92[8] = { -12521, 325, -17174, 12447, -8309, 3152, -12284, 12723, };
const TfArray<1, int> tensor_dimension92 = { 1, { 8 } };
const TfArray<8, float> quant92_scale = { 8, { 0.00011146523320348933, 0.00011578277189983055, 0.00014345988165587187, 0.0001862117787823081, 0.00012521239113993943, 0.00012421683641150594, 0.00016024295473471284, 0.00015396530216094106, } };
const TfArray<8, int> quant92_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const ALIGN(8) int8_t tensor_data93[1*3*3*48] = { 
  /* [0][0][][] */ 15,-10,-7,-23,-25,-65,-10,-52,-82,13,-39,-59,-52,-8,34,8,-13,-66,44,-13,33,18,-1,-52,105,-24,-116,18,1,44,-38,32,-5,-43,-46,29,1,-33,12,69,-102,-46,2,10,-8,56,-8,-10, 127,-47,63,14,6,-127,-57,22,-127,-127,-100,1,-127,-22,74,41,10,-78,-24,-16,71,3,49,46,-36,-54,24,-6,16,-53,52,-70,-55,-26,-9,-42,-28,-50,-26,-24,-24,53,38,-127,-6,10,-13,-91, 3,-5,-8,20,-9,-58,-17,-48,-88,7,-39,-55,-43,-7,48,3,-27,-57,-14,-4,11,13,7,-37,-38,-6,1,17,9,28,23,16,-7,-51,-48,19,-4,30,12,63,0,-37,-29,1,-13,-53,-3,64, 
  /* [0][1][][] */ 6,-51,96,-111,-4,7,32,37,58,-51,-127,14,13,-4,93,-2,-127,64,-18,7,25,23,-17,80,0,-38,-64,-13,0,35,-12,-35,-80,-54,-12,127,-2,-98,10,27,-127,33,-22,-67,13,127,-2,-71, -100,-127,-85,-21,127,74,127,-94,-94,-1,-23,-127,101,-127,-127,127,-26,-127,2,127,-127,-127,58,127,-25,-127,47,127,127,127,-106,-127,-96,127,127,-50,127,33,13,6,33,127,127,26,127,-71,127,-47, 6,15,127,127,-18,46,19,69,96,-20,-100,-10,21,28,73,-35,-100,59,18,11,-41,40,-10,92,3,-6,127,-25,-11,-5,28,-34,-51,-69,-20,-73,-14,-127,25,40,16,19,-32,-56,-37,-86,-17,127, 
  /* [0][2][][] */ -9,-4,14,-7,-50,22,-2,36,7,-22,19,-69,9,12,56,5,11,-8,-125,4,28,20,-32,-32,127,29,-43,5,-2,-1,-54,-45,103,-87,-42,-34,36,-44,59,-30,-77,2,-38,-5,-26,65,-13,20, -12,-12,53,-8,-3,87,57,-127,65,-31,-104,5,114,38,127,-14,59,-88,-11,15,-10,80,127,87,13,-66,86,-22,4,67,127,-65,127,-59,-26,4,34,-78,-127,-127,-5,44,-46,-110,-35,23,-50,-48, 0,-1,43,20,-29,16,-20,75,-6,-61,-1,-61,19,1,61,9,5,-1,127,8,-92,-10,-45,-27,-101,25,-31,-6,-8,-20,36,-19,68,-61,-44,18,27,-65,50,12,31,-15,-24,-25,-40,-67,-2,19, 
};
const TfArray<4, int> tensor_dimension93 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant93_scale = { 48, { 0.012799304910004139, 0.0048058549873530865, 0.0038305425550788641, 0.010019060224294662, 0.02022203616797924, 0.0077460627071559429, 0.0084449518471956253, 0.010158216580748558, 0.0067000449635088444, 0.0054761678911745548, 0.005077076144516468, 0.0066489935852587223, 0.0052449102513492107, 0.015625409781932831, 0.0045977053232491016, 0.012239088304340839, 0.0065259803086519241, 0.0059012183919548988, 0.011373098008334637, 0.0090106381103396416, 0.0086457645520567894, 0.028815180063247681, 0.010221862234175205, 0.0056030559353530407, 0.0091207502409815788, 0.0074496404267847538, 0.012388719245791435, 0.01443376112729311, 0.010711008682847023, 0.0068903756327927113, 0.0095618888735771179, 0.0044898181222379208, 0.010165913961827755, 0.0086886221542954445, 0.0090318601578474045, 0.010234938003122807, 0.0068753296509385109, 0.0032013317104429007, 0.014228411018848419, 0.0079269567504525185, 0.0051860087551176548, 0.0062900884076952934, 0.012252590619027615, 0.012590270489454269, 0.01626051589846611, 0.0071680028922855854, 0.016960736364126205, 0.0089892856776714325, } };
const TfArray<48, int> quant93_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 3 };
const ALIGN(8) int32_t tensor_data94[8] = { 28156, 22636, 6712, 13057, -6716, 16284, -8171, 18950, };
const TfArray<1, int> tensor_dimension94 = { 1, { 8 } };
const TfArray<8, float> quant94_scale = { 8, { 7.6938405982218683e-05, 0.00010471807036083192, 5.2714207413373515e-05, 6.4934596593957394e-05, 6.2576116761192679e-05, 5.1618513680296019e-05, 6.2082755903247744e-05, 4.2067000322276726e-05, } };
const TfArray<8, int> quant94_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const ALIGN(8) int8_t tensor_data95[1*3*3*48] = { 
  /* [0][0][][] */ -12,17,-66,127,13,20,6,-39,-33,49,38,38,19,-85,51,-6,27,-127,13,42,81,-66,-5,29,23,8,-38,-100,-59,50,21,-108,-111,15,-15,-102,-3,-115,-69,-1,-46,58,-10,12,29,-20,-72,9, -62,-127,0,-27,12,56,12,82,43,-26,94,-8,127,55,32,-96,-127,39,87,12,61,-47,23,20,50,78,-45,-28,-114,127,127,-127,-127,13,34,-77,-127,-47,-88,66,30,-61,44,29,32,127,-127,-14, 44,37,-51,-73,2,23,3,-19,-14,62,53,-45,21,-54,68,-16,3,-60,17,35,90,-39,-13,28,-88,19,-36,-127,-51,25,21,-76,-122,17,-9,-94,63,-110,-53,13,-60,47,11,-10,14,-4,-80,6, 
  /* [0][1][][] */ 22,26,9,68,51,65,43,12,125,89,119,96,4,-68,7,-78,-75,-10,71,42,90,-68,13,-108,104,81,-30,-15,7,72,32,-43,-8,25,17,26,23,-68,41,3,-102,32,53,-49,68,-37,-80,-8, -127,-13,-127,4,127,-127,-127,127,-12,-127,-127,-127,51,77,127,127,-22,115,61,-127,-95,64,127,-127,14,-127,-127,-94,25,97,-54,-22,117,127,-127,127,43,-127,127,127,16,127,-62,-85,127,-22,-106,127, 53,35,-38,-77,51,62,46,-69,-127,83,99,-19,-1,-127,-8,53,-82,-5,81,52,108,-127,30,-106,-127,-38,-26,-35,8,22,25,-51,26,15,-19,10,-23,-64,19,33,-105,24,3,-49,83,-51,-92,-3, 
  /* [0][2][][] */ -16,19,-59,80,-21,7,1,-63,5,100,34,77,-7,-59,71,-24,11,-22,-11,44,67,-104,-14,4,-7,40,-36,-77,11,-33,3,-2,48,10,-5,-74,0,-51,-14,-7,34,53,-24,-6,18,-6,-113,-34, 111,11,-27,-46,19,53,33,-1,-14,42,54,8,5,-126,41,34,-108,-72,127,59,127,-25,24,-36,38,-12,-51,-71,127,3,-1,-39,52,-8,7,-38,77,-116,15,83,-127,-7,127,127,23,119,-105,-83, -32,25,-48,-17,-29,19,8,-32,-7,64,56,-81,-7,-45,77,19,-4,-32,-9,31,104,-76,-2,-14,-30,5,-38,-111,10,-33,3,-7,65,21,-22,-76,-38,-70,-10,-7,29,48,-4,-8,13,19,-101,-16, 
};
const TfArray<4, int> tensor_dimension95 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant95_scale = { 48, { 0.010847466066479683, 0.022631661966443062, 0.0050223912112414837, 0.0068189390003681183, 0.0084231942892074585, 0.0078029539436101913, 0.025044847279787064, 0.010279384441673756, 0.0092744631692767143, 0.0047978213988244534, 0.0047771590761840343, 0.0082154786214232445, 0.0080930180847644806, 0.0027433231007307768, 0.0046464577317237854, 0.012625091709196568, 0.0065213446505367756, 0.01001087948679924, 0.0085519840940833092, 0.010315217077732086, 0.0032726081553846598, 0.0044228057377040386, 0.0073797092773020267, 0.0066452166065573692, 0.015073678456246853, 0.01488074753433466, 0.0064179021865129471, 0.0042059645056724548, 0.008446570485830307, 0.0046178116463124752, 0.0084463534876704216, 0.0039109843783080578, 0.0058956630527973175, 0.0074577829800546169, 0.0072761243209242821, 0.006551448255777359, 0.014061150141060352, 0.0024545572232455015, 0.0094726644456386566, 0.0054113557562232018, 0.0048051243647933006, 0.0072913188487291336, 0.012089473195374012, 0.0076320082880556583, 0.012936153449118137, 0.009142925962805748, 0.0052696005441248417, 0.015069902874529362, } };
const TfArray<48, int> quant95_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 3 };
const ALIGN(8) int32_t tensor_data96[8] = { -18784, -15986, -3017, -7389, 10885, 1177, -4374, -10976, };
const TfArray<1, int> tensor_dimension96 = { 1, { 8 } };
const TfArray<8, float> quant96_scale = { 8, { 6.6864486143458635e-05, 5.7243774790549651e-05, 6.630460120504722e-05, 6.3749852415639907e-05, 7.1623690018896013e-05, 7.0830144977662712e-05, 6.8504559749271721e-05, 6.554005085490644e-05, } };
const TfArray<8, int> quant96_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const ALIGN(8) int8_t tensor_data97[1*3*3*48] = { 
  /* [0][0][][] */ 55,-14,5,1,19,-96,-33,7,43,0,34,-31,10,-51,8,54,-48,-109,-67,26,16,20,-22,115,127,8,-60,3,31,6,-32,-54,-17,-21,-23,-25,-22,-28,60,19,14,-20,-26,-14,24,-57,30,-29, 127,-1,-29,1,18,-4,-17,-42,-34,-14,48,-26,37,-127,21,-126,-60,-124,-44,127,127,-4,-44,-32,111,-47,-58,-78,75,34,-43,-28,22,-20,-127,40,-99,37,21,-93,107,-22,-77,-15,102,-127,-127,55, 66,-10,-2,-21,27,82,-46,4,53,5,39,-24,-9,-35,9,60,-36,-116,-57,17,31,-29,-10,-127,106,1,127,19,25,6,-48,1,-49,-17,-44,-5,-9,-20,52,45,17,-10,-13,2,29,-46,24,-17, 
  /* [0][1][][] */ 82,-20,-95,78,-13,-125,24,-17,-5,-127,79,-4,-9,15,-8,127,25,-93,-32,2,10,-127,-50,-58,-17,29,-25,12,60,30,32,-101,-13,-3,16,-76,70,104,127,-84,-30,-14,-8,-5,17,63,-121,127, 14,-60,81,127,-127,43,-127,-23,127,81,24,127,-57,-82,127,40,48,64,127,-126,-35,63,127,10,-49,127,30,4,127,127,-127,55,127,127,-9,127,-75,69,-61,-64,-127,127,127,-127,-127,-13,40,0, 57,6,-99,23,4,127,12,127,-26,65,76,-30,23,3,-29,78,26,-127,-26,3,2,68,-58,5,22,-30,14,-40,31,26,4,127,-67,-33,12,-1,71,-127,126,-35,-36,-15,-33,19,18,64,-106,60, 
  /* [0][2][][] */ 67,74,19,13,12,-27,16,-2,-28,-25,-127,-19,-7,76,-32,-4,27,-55,-45,-21,-31,4,-19,-105,-73,-42,-36,-28,-15,4,-21,-35,-8,-6,74,4,0,-92,64,51,18,-8,-15,-44,-25,44,-14,67, 46,127,-127,-47,21,40,0,-35,-95,-22,15,-1,-127,127,-73,1,127,-71,-8,-8,-60,18,-40,-24,-114,70,-56,-127,13,12,124,100,5,-13,-2,-4,-127,-58,-53,-127,-42,-15,-5,-60,-19,40,-86,-91, 80,51,21,-4,22,-27,13,-12,-13,35,-115,-24,34,66,-29,0,34,-88,-15,-20,-43,-29,-20,102,-90,-78,106,-3,-14,-2,2,-67,-27,0,70,17,-12,117,65,99,18,-1,-14,-23,-36,39,-54,61, 
};
const TfArray<4, int> tensor_dimension97 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant97_scale = { 48, { 0.0036940791178494692, 0.0072162770666182041, 0.0078842714428901672, 0.0083055673167109489, 0.014185047708451748, 0.0060268123634159565, 0.011666618287563324, 0.014616242609918118, 0.018812520429491997, 0.0084921857342123985, 0.0059130508452653885, 0.024473853409290314, 0.0086153075098991394, 0.005607210099697113, 0.01111957523971796, 0.0058516510762274265, 0.012400963343679905, 0.0032506282441318035, 0.008832249790430069, 0.010892798192799091, 0.0081805754452943802, 0.017516337335109711, 0.0087290136143565178, 0.0071270600892603397, 0.0048949224874377251, 0.012460805475711823, 0.0076427701860666275, 0.0048968344926834106, 0.0061420896090567112, 0.0071438788436353207, 0.0076979533769190311, 0.0071239476092159748, 0.013582265935838223, 0.020425675436854362, 0.010721390135586262, 0.010914099402725697, 0.0064850267954170704, 0.010700809769332409, 0.0040860064327716827, 0.0059745116159319878, 0.011823057197034359, 0.021304469555616379, 0.014186717569828033, 0.0072930632159113884, 0.00891855638474226, 0.0081547079607844353, 0.0048020249232649803, 0.010405878536403179, } };
const TfArray<48, int> quant97_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 3 };
const ALIGN(8) int32_t tensor_data98[8] = { -7125, -379, -2196, -3412, 24, -19974, 2090, 3905, };
const TfArray<1, int> tensor_dimension98 = { 1, { 8 } };
const TfArray<8, float> quant98_scale = { 8, { 6.6470631281845272e-05, 5.4524090955965221e-05, 0.00010568329162197188, 0.00012630099081434309, 8.7862717919051647e-05, 7.9704186646267772e-05, 8.1334917922504246e-05, 8.9546985691413283e-05, } };
const TfArray<8, int> quant98_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const ALIGN(8) int8_t tensor_data99[1*3*3*48] = { 
  /* [0][0][][] */ -37,6,21,77,-8,48,34,1,-19,-7,-56,2,-123,-28,-124,37,-86,102,-57,48,99,36,20,58,-7,14,-22,14,-36,-16,18,41,4,-18,-28,-43,67,123,52,-66,-64,79,-6,31,-10,-13,-15,35, -38,4,-10,92,-13,58,-69,-111,2,-44,-30,18,127,127,-7,-9,126,49,-59,54,-126,-21,-13,40,12,85,-50,45,-51,-120,23,45,-127,-127,15,105,17,116,-77,-62,-89,-35,42,5,52,127,-16,-12, -44,14,25,53,3,47,10,8,-11,-13,-47,15,81,-3,-12,26,-68,87,-63,10,104,39,-13,49,10,-1,-16,30,-35,7,16,27,0,-28,-34,-47,-115,103,-2,-62,-87,75,-75,26,-19,-19,-6,22, 
  /* [0][1][][] */ -13,21,17,8,-75,32,127,86,-12,34,-23,54,-122,-119,-26,53,104,57,14,63,110,44,100,100,127,-11,-43,-56,-61,-42,28,14,-18,-8,-48,18,90,-68,112,-66,-98,51,60,-8,20,121,-48,8, -127,-127,127,127,-113,-127,10,127,127,10,-127,127,22,-60,109,127,90,127,-79,127,-12,-127,-127,-127,15,-5,127,10,127,-127,-127,-127,112,94,127,-127,49,37,27,-16,33,127,127,56,127,6,127,109, 30,24,30,16,-88,27,4,58,1,28,-9,32,53,-93,127,32,76,46,127,21,127,65,9,86,97,5,-57,-37,-3,-21,12,34,-18,-7,-66,18,-127,-66,-127,-127,-50,49,-42,4,6,101,25,6, 
  /* [0][2][][] */ 63,20,-4,28,48,-31,-4,8,-6,26,98,6,-70,57,-109,41,-95,49,4,-16,-62,40,25,37,-12,19,-36,17,-61,-33,16,12,11,-2,-38,-56,10,-50,23,-37,-68,57,-18,-24,-56,46,-36,-32, 81,-3,36,-104,-127,-50,-37,72,24,127,20,23,44,-70,-24,13,127,-31,60,-11,-99,-11,12,45,46,-127,-46,127,-73,-110,24,-9,-3,20,6,6,25,-127,-58,-108,-127,21,16,127,-85,-15,-21,127, 70,22,-6,-2,68,-31,8,-16,2,28,92,3,39,47,-1,24,-83,44,-6,-65,-65,44,-8,28,-13,9,-16,28,-58,-10,18,15,14,-4,-42,-65,-40,-42,14,-69,-67,49,-65,-1,-52,77,-24,-45, 
};
const TfArray<4, int> tensor_dimension99 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant99_scale = { 48, { 0.010322372429072857, 0.016117334365844727, 0.0075923111289739609, 0.0066896835342049599, 0.0044069285504519939, 0.0069820503704249859, 0.01018951553851366, 0.0054894261993467808, 0.01152320858091116, 0.017365057021379471, 0.0058749536983668804, 0.013045437633991241, 0.0049704308621585369, 0.0057919840328395367, 0.0054944898001849651, 0.010082901455461979, 0.0063884961418807507, 0.0050933179445564747, 0.006726972758769989, 0.0054839374497532845, 0.00563800148665905, 0.015937022864818573, 0.01267265435308218, 0.0055755609646439552, 0.012137850746512413, 0.016394022852182388, 0.012120469473302364, 0.007961619645357132, 0.0062053268775343895, 0.0048324749805033207, 0.015520118176937103, 0.011338425800204277, 0.016108937561511993, 0.0095119178295135498, 0.015415477566421032, 0.0056661730632185936, 0.0054006772115826607, 0.0042159045115113258, 0.0079602068290114403, 0.0032673294190317392, 0.0061471289955079556, 0.0032318802550435066, 0.0073992270044982433, 0.0053029689006507397, 0.0099541023373603821, 0.0096490709111094475, 0.01248389296233654, 0.0067144623026251793, } };
const TfArray<48, int> quant99_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 3 };
const ALIGN(8) int32_t tensor_data100[8] = { -4160, -115, -16323, 13717, -8255, -6807, -6522, -7365, };
const TfArray<1, int> tensor_dimension100 = { 1, { 8 } };
const TfArray<8, float> quant100_scale = { 8, { 0.00010746012412710115, 0.00016931522986851633, 8.8185130152851343e-05, 0.00011630898370640352, 6.681463128188625e-05, 0.00011250819807173684, 0.00010218303941655904, 0.00011669129162328318, } };
const TfArray<8, int> quant100_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const ALIGN(8) int8_t tensor_data101[1*3*3*48] = { 
  /* [0][0][][] */ -37,-79,-9,127,-62,17,3,-38,24,-17,-30,-44,-28,-14,45,-2,-46,-40,-1,-116,35,61,27,23,6,62,-120,8,16,4,72,-9,25,87,-23,32,15,-13,6,10,-105,97,11,-63,25,-43,-88,39, -33,-96,-107,110,-73,27,19,-57,71,-112,-47,77,127,93,65,45,-68,-127,6,-36,127,81,-33,13,127,113,-89,22,3,36,109,35,0,127,3,84,82,-3,2,58,-55,53,-2,47,90,23,113,127, -24,-17,-9,111,-73,0,12,-29,9,-10,-24,-37,-47,-40,38,-22,-46,-4,22,-127,23,55,40,16,-3,51,-127,2,11,-10,40,-7,22,26,-21,0,12,-8,-6,5,-62,75,7,23,9,-33,-72,4, 
  /* [0][1][][] */ -56,-127,-119,97,-63,7,21,-66,103,-91,-37,-32,3,76,-73,42,-110,116,120,-65,-14,60,90,-31,-41,-20,-26,21,-17,75,127,3,8,49,21,50,96,6,127,62,-94,5,-35,-127,71,-46,58,1, -104,-29,77,106,-127,127,-127,127,127,-127,-127,-2,-123,127,127,127,-44,-6,85,-33,-28,127,-127,-127,-23,54,-112,127,127,127,-33,127,-127,122,127,127,-127,127,-19,-127,127,-127,127,116,127,-127,127,-17, -80,-94,-124,51,-67,0,20,-29,60,-98,-46,-17,-55,89,34,-6,-111,126,127,-86,-20,66,65,-24,-40,-25,-60,20,-24,58,14,13,-4,-7,5,31,81,-12,-124,57,-86,7,-28,20,19,-39,33,0, 
  /* [0][2][][] */ 29,-7,-41,57,-45,13,1,-58,8,-28,25,-44,-89,62,20,12,-75,10,33,-94,-98,47,47,40,-20,127,-86,15,2,8,-16,-53,23,-21,5,-34,21,-39,15,14,-13,7,-18,-18,13,72,-21,84, -127,-12,-127,-2,-61,10,21,-78,-73,-50,-77,127,-95,-28,-12,-13,-127,76,70,-50,63,79,-47,107,-2,64,-4,23,-41,49,-27,-72,-20,-17,0,-15,57,8,0,35,-110,-21,-42,-8,-37,96,-86,-10, 26,1,-46,67,-49,-3,8,-57,11,-47,16,-8,-110,72,-19,3,-48,1,37,-93,10,26,68,25,-19,121,-71,13,5,-10,-32,-37,17,-15,13,-44,12,-30,-14,12,60,13,-5,13,23,51,-4,75, 
};
const TfArray<4, int> tensor_dimension101 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant101_scale = { 48, { 0.004137551411986351, 0.0047174207866191864, 0.0063479309901595116, 0.002746649319306016, 0.0054748998954892159, 0.012767378240823746, 0.011918612755835056, 0.0070377341471612453, 0.0064129382371902466, 0.0034022512845695019, 0.0060264500789344311, 0.010368623770773411, 0.003066538367420435, 0.0079823918640613556, 0.015448444522917271, 0.019472599029541016, 0.0024224722292274237, 0.0072477785870432854, 0.004781003575772047, 0.0041683190502226353, 0.010527795180678368, 0.005894525907933712, 0.0065679480321705341, 0.012187649495899677, 0.010318320244550705, 0.0040589259006083012, 0.0028004019986838102, 0.010526054538786411, 0.012949566356837749, 0.0062419869937002659, 0.0054561789147555828, 0.0096184713765978813, 0.010302821174263954, 0.0060773477889597416, 0.010609213262796402, 0.007226207759231329, 0.0062303212471306324, 0.014161257073283195, 0.0075056822970509529, 0.0099921589717268944, 0.00407802639529109, 0.0092225419357419014, 0.010916293598711491, 0.0077938400208950043, 0.0082402611151337624, 0.0066991550847887993, 0.012604511342942715, 0.0065724235028028488, } };
const TfArray<48, int> quant101_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 3 };
const ALIGN(8) int32_t tensor_data102[8] = { 2170, 21472, 7744, -6297, -7014, 17118, 3247, -14161, };
const TfArray<1, int> tensor_dimension102 = { 1, { 8 } };
const TfArray<8, float> quant102_scale = { 8, { 8.540076669305563e-05, 0.00011770849960157648, 9.2759939434472471e-05, 0.00011367470870027319, 0.00019079465710092336, 0.00011457740038167685, 0.00012811296619474888, 0.00011549066402949393, } };
const TfArray<8, int> quant102_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const ALIGN(8) int8_t tensor_data103[1*3*3*48] = { 
  /* [0][0][][] */ 127,-51,-40,-91,-28,-71,-89,57,46,38,46,21,-28,2,84,-86,81,-127,-127,-44,26,47,41,80,-36,-36,-9,61,-6,-19,25,-1,-86,-53,-43,72,-97,-27,27,44,28,6,92,-66,5,19,61,-21, -58,-7,-11,-52,3,-116,-113,20,127,9,127,31,127,59,-29,12,7,-33,32,-84,26,53,28,-32,-53,15,-11,-28,-91,31,-27,-15,-122,-127,-73,-1,-4,-28,39,127,-81,38,80,-16,-20,16,1,-108, 108,-44,-28,-94,-11,-64,-14,39,24,31,24,18,-35,30,88,-101,74,-101,-87,-40,15,35,40,83,-22,-25,0,60,3,-22,17,-2,-50,-39,-37,73,75,-27,22,18,30,1,75,-67,-3,2,59,5, 
  /* [0][1][][] */ 41,17,61,-58,57,44,-1,-2,80,3,93,20,69,61,75,1,30,-11,37,-55,21,83,31,-5,38,-33,-5,-18,127,19,39,-22,-84,-55,127,8,-100,1,16,89,-19,47,56,-77,-16,-127,12,45, 24,127,-15,-127,127,-127,-94,127,54,-127,-30,-127,1,-47,-127,-127,-127,14,103,127,-127,-127,-127,-127,127,127,127,-127,-29,127,127,-127,127,39,14,-127,127,127,-127,-50,-127,-32,-127,-127,127,-5,-127,127, 36,-1,43,-80,36,33,-14,-30,89,5,69,30,64,43,20,-13,22,-28,29,-62,15,80,27,-20,19,-32,-8,-26,96,-4,25,-18,-70,-23,110,-3,-18,7,24,82,-1,49,35,-80,-13,56,-4,21, 
  /* [0][2][][] */ -123,-12,-7,-51,-14,32,-127,-92,17,35,-23,29,-13,127,105,-92,53,-70,-40,-38,34,-23,38,57,-10,3,-20,80,3,-37,44,0,-102,-81,-28,61,-96,-15,19,56,27,0,-20,-31,22,2,70,7, -74,2,127,18,7,95,-1,-2,-79,-12,-25,24,-18,54,-16,-23,-6,-67,14,-38,-13,-42,2,-17,-27,-8,-29,-12,-126,-65,8,22,-32,-66,-108,7,22,38,7,32,37,-127,-9,-15,-10,8,8,-53, -117,-5,-13,-60,0,22,-79,-103,-12,34,-16,23,-20,107,107,-84,57,-68,-34,-37,27,-21,37,58,-3,9,-23,81,7,-23,47,1,-81,-98,-21,52,26,-10,15,45,23,-3,-18,-34,17,25,67,11, 
};
const TfArray<4, int> tensor_dimension103 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant103_scale = { 48, { 0.0065879900939762592, 0.01112144161015749, 0.0086369458585977554, 0.0022051660344004631, 0.0068020620383322239, 0.0044282171875238419, 0.0042649214155972004, 0.011173101142048836, 0.0033470054622739553, 0.013102766126394272, 0.0053431019186973572, 0.012136517092585564, 0.0079055503010749817, 0.0046414807438850403, 0.0049966052174568176, 0.0040797153487801552, 0.010173317044973373, 0.0044698589481413364, 0.009180762805044651, 0.0042298855260014534, 0.011875426396727562, 0.0071905776858329773, 0.010177223943173885, 0.0071535021997988224, 0.01211631391197443, 0.012304903008043766, 0.011839350685477257, 0.0060411454178392887, 0.010947201400995255, 0.011529481038451195, 0.011715348809957504, 0.0077579445205628872, 0.0025715634692460299, 0.0019520019413903356, 0.010873517952859402, 0.0093059167265892029, 0.0065492885187268257, 0.015861375257372856, 0.011960712261497974, 0.0041819051839411259, 0.0086128413677215576, 0.011683957651257515, 0.0081959431990981102, 0.0042116804979741573, 0.02830875851213932, 0.012976040132343769, 0.0084234094247221947, 0.01390734501183033, } };
const TfArray<48, int> quant103_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 3 };
const ALIGN(8) int32_t tensor_data104[8] = { -12812, 20643, 7528, 7196, -8971, 745, 2360, -23586, };
const TfArray<1, int> tensor_dimension104 = { 1, { 8 } };
const TfArray<8, float> quant104_scale = { 8, { 0.00012741763202939183, 0.0001420804182998836, 0.00011564740270841867, 0.00011384324898244813, 0.00011340148193994537, 0.00014243260375224054, 0.00011597891716519371, 9.5497627626173198e-05, } };
const TfArray<8, int> quant104_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const ALIGN(8) int8_t tensor_data105[1*3*3*48] = { 
  /* [0][0][][] */ 100,30,-77,-68,116,25,126,112,-83,106,-127,109,-127,-96,-81,114,115,96,100,-75,87,-84,-113,87,113,89,-121,-69,106,102,117,117,127,115,112,97,127,98,126,118,-127,-54,-96,117,-111,104,-127,126, 111,62,-63,-57,127,35,127,113,-94,113,-125,112,-111,-100,-78,103,109,110,117,-96,91,-102,-99,89,111,105,-117,-50,127,112,117,101,107,114,116,97,124,103,124,124,-117,-79,-97,127,-72,108,-94,127, 22,-34,-48,-23,25,-46,-18,30,-31,0,-18,13,3,-14,-24,15,21,-1,18,7,16,-66,-34,22,14,-14,-66,-25,-15,-1,42,42,58,50,0,1,5,1,15,26,-22,27,-22,-22,-111,11,-61,29, 
  /* [0][1][][] */ 118,99,-127,-99,122,84,107,126,-110,124,-83,127,-78,-127,-127,127,127,123,110,-106,117,-100,-123,117,127,123,-112,-127,48,122,127,127,119,125,127,107,111,123,127,127,-92,-88,-127,106,-79,122,-119,98, 127,127,-104,-127,106,89,119,127,-127,127,-77,126,-52,-126,-122,115,116,127,127,-127,127,-127,-127,127,126,127,-81,-107,59,127,126,116,97,127,126,127,115,127,118,125,-68,-127,-127,103,-27,127,-77,85, 19,-39,-33,-9,3,-35,-4,24,-35,1,-24,26,-49,-19,-32,26,29,6,12,-3,26,17,18,28,10,-13,-32,-24,20,10,26,41,35,42,22,17,20,16,28,20,-54,-41,-34,-6,-71,11,-21,43, 
  /* [0][2][][] */ 36,-107,-73,34,66,-110,-2,52,-50,-4,-25,31,-109,-30,-31,21,46,17,45,-4,63,-47,-31,58,27,-31,-127,-51,21,8,51,54,61,75,37,25,27,14,26,16,-51,-32,-42,4,-127,58,-117,62, 43,-83,-47,-4,46,-127,-10,48,-46,-1,-21,32,-79,-28,-59,17,39,18,50,-15,68,-62,-37,59,20,-1,-104,-37,37,20,50,38,37,59,40,20,34,24,20,16,-60,-63,-40,-2,-101,52,-44,36, 16,11,-11,32,36,-80,-19,17,-38,9,7,2,-20,-18,16,9,20,-9,16,8,21,19,-5,20,6,-19,-58,-16,-9,-14,28,9,30,49,12,7,1,-9,5,12,26,-9,-15,2,-68,9,-115,62, 
};
const TfArray<4, int> tensor_dimension105 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant105_scale = { 48, { 0.0030655218288302422, 0.0040510073304176331, 0.0022886977531015873, 0.0039133364334702492, 0.0018496739212423563, 0.0030583629850298166, 0.0056118732318282127, 0.0028689994942396879, 0.0031098648905754089, 0.011864171363413334, 0.0027365805581212044, 0.0032377741299569607, 0.0034340936690568924, 0.0037466853391379118, 0.0023849299177527428, 0.0037851023953408003, 0.0023118497338145971, 0.0059574814513325691, 0.0040913154371082783, 0.0025453325361013412, 0.0022779086139053106, 0.0037817258853465319, 0.0020470691379159689, 0.003434416139498353, 0.0029282644391059875, 0.021245479583740234, 0.00099792890250682831, 0.0020221418235450983, 0.0072991061024367809, 0.0060088112950325012, 0.0029764503706246614, 0.0021655077580362558, 0.001816238509491086, 0.002780216746032238, 0.003871748223900795, 0.0030266002286225557, 0.0049575241282582283, 0.0038933667819947004, 0.0025677839294075966, 0.0050873993895947933, 0.0019078957848250866, 0.0029698172584176064, 0.0036602583713829517, 0.0024720195215195417, 0.0015561017207801342, 0.0031625269912183285, 0.0021174135617911816, 0.0030674582812935114, } };
const TfArray<48, int> quant105_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 3 };
const ALIGN(8) int32_t tensor_data106[8] = { 15277, -24145, 3110, -16771, -10012, -5428, -2451, -2708, };
const TfArray<1, int> tensor_dimension106 = { 1, { 8 } };
const TfArray<8, float> quant106_scale = { 8, { 0.00012323839473538101, 0.00011047462612623349, 0.0001030769053613767, 0.00013967922131996602, 9.9429664260242134e-05, 6.5018466557376087e-05, 8.5794774349778891e-05, 8.4937622887082398e-05, } };
const TfArray<8, int> quant106_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const ALIGN(8) int8_t tensor_data107[1*3*3*48] = { 
  /* [0][0][][] */ -7,-3,5,11,-16,-46,-28,2,-25,23,-15,-39,-2,6,-17,1,-29,3,27,13,85,30,30,5,-25,-13,-85,-34,7,7,2,22,-22,49,-36,-11,27,-33,41,-59,-18,32,-12,-46,-68,-3,-19,3, 24,-52,30,-112,12,-69,-10,88,14,4,-11,-66,-45,127,-76,-66,10,127,127,127,-30,26,38,4,-126,-15,-18,26,38,-27,-68,7,-11,-103,-16,-10,68,-24,-13,-98,-61,104,-35,-58,-77,-127,57,100, -6,-6,-2,17,4,-45,-28,-6,-24,-27,-13,-47,-4,8,-9,9,-31,7,5,20,81,16,8,14,-27,-15,-127,12,-2,1,2,26,-26,45,7,-13,28,-33,-34,-55,-20,47,-19,-71,-67,-8,-7,-10, 
  /* [0][1][][] */ 41,-63,-39,-111,-98,65,-45,72,-127,92,-17,-122,-27,13,-120,-9,-58,-12,42,0,127,109,19,19,-127,-30,26,-119,-53,-12,24,62,-38,99,-89,-51,109,3,127,40,-71,13,-27,75,-127,-33,101,121, -127,127,127,42,21,-13,127,-45,93,21,127,21,127,62,-24,127,127,-111,43,48,-68,-54,127,127,-23,127,-67,1,-127,127,127,-127,127,-19,127,127,-15,127,-6,127,127,55,127,9,-11,97,-57,-66, 43,-77,-37,-118,-127,55,-38,86,-125,-127,-18,-127,-38,17,-127,-15,-67,-18,31,10,119,127,32,72,-119,-36,-24,127,-28,-4,27,71,-48,99,-33,-64,127,-6,-122,37,-72,12,-34,45,-118,-26,111,127, 
  /* [0][2][][] */ 5,-5,-10,20,-22,-22,-22,20,-10,20,-9,-39,10,-15,-14,10,-33,-6,16,10,61,19,-81,4,-10,-6,-93,-30,-22,-35,-50,23,-20,66,-39,-11,28,-48,28,-46,-29,-35,-8,26,-41,-70,4,-11, 33,-63,-27,-127,40,127,-28,127,-6,3,-10,-82,-51,31,-86,-83,1,13,33,111,0,60,-125,13,-122,-25,-41,25,1,-56,-83,74,-25,-127,-17,-21,34,-28,1,-92,-45,127,-30,127,-99,-65,127,118, 3,-2,-16,23,-5,-12,-23,20,-11,-16,-9,-36,3,-19,-12,6,-40,-5,8,17,60,11,-74,10,-23,-10,-80,8,-20,-40,-38,26,-22,59,13,-9,30,-48,-31,-30,-36,-22,-21,10,-57,-68,21,-13, 
};
const TfArray<4, int> tensor_dimension107 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant107_scale = { 48, { 0.032479271292686462, 0.012853185646235943, 0.012021715752780437, 0.010495113208889961, 0.012335131876170635, 0.008017255924642086, 0.015149586834013462, 0.0042676324956119061, 0.013229439035058022, 0.0095453383401036263, 0.01027700025588274, 0.0081694042310118675, 0.015239166095852852, 0.011563395150005817, 0.012673981487751007, 0.013407755643129349, 0.012535815127193928, 0.01888335682451725, 0.0051914281211793423, 0.0036855272483080626, 0.0040640472434461117, 0.00699238246306777, 0.0055084768682718277, 0.0061807013116776943, 0.0095338830724358559, 0.018625080585479736, 0.004243592731654644, 0.0098414523527026176, 0.0074823107570409775, 0.016096873208880424, 0.011161536909639835, 0.011082601733505726, 0.01593291200697422, 0.0083157038316130638, 0.010314140468835831, 0.01915227435529232, 0.006306835450232029, 0.015295036137104034, 0.0092011746019124985, 0.0065040080808103085, 0.012369489297270775, 0.0057087680324912071, 0.012955366633832455, 0.0073971780948340893, 0.0048757139593362808, 0.0092558255419135094, 0.0047578830271959305, 0.0077950614504516125, } };
const TfArray<48, int> quant107_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 3 };
const ALIGN(8) int32_t tensor_data108[8] = { 20800, 4902, 17399, -21118, -4577, -14400, -10238, 1432, };
const TfArray<1, int> tensor_dimension108 = { 1, { 8 } };
const TfArray<8, float> quant108_scale = { 8, { 8.2335129263810813e-05, 4.6391927753575146e-05, 4.6097862650640309e-05, 7.1910457336343825e-05, 4.2753079469548538e-05, 6.5460502810310572e-05, 4.1992829210357741e-05, 4.4043546949978918e-05, } };
const TfArray<8, int> quant108_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 0 };
const ALIGN(8) int8_t tensor_data109[1*3*3*48] = { 
  /* [0][0][][] */ -127,-6,-24,-108,-5,61,-12,28,96,3,53,-32,22,-63,75,-74,-93,31,44,83,20,-52,17,59,2,29,0,0,65,63,-47,-66,-42,-73,21,13,8,9,-127,-23,-7,10,58,-8,-76,-49,72,-72, -75,127,-81,-77,14,42,23,39,105,97,32,-59,124,-127,86,23,-127,84,81,-19,-12,-96,-15,6,20,-127,127,-27,15,127,9,32,127,-57,34,26,-46,115,41,50,-3,-127,127,24,-92,81,20,40, -118,0,-20,-112,-8,-127,-8,16,96,19,64,-44,17,-69,59,37,-83,37,50,90,-31,-40,26,-68,4,31,-8,21,-95,60,22,55,-42,-64,-61,-3,8,32,30,-20,-4,8,50,4,-55,-47,68,-83, 
  /* [0][1][][] */ 17,68,-55,-127,-35,96,25,108,42,113,52,-71,87,-58,100,-127,-44,127,121,36,53,-37,89,112,-5,69,-7,-97,92,80,-127,-109,80,-112,53,28,-1,116,32,-61,-24,87,21,-46,-88,127,93,-67, 74,-62,-127,93,127,23,127,-11,-9,127,127,127,-62,123,55,-60,113,-99,-44,-31,82,127,-73,-1,-127,-50,-49,127,54,8,99,20,-77,-28,91,-127,127,-56,-31,-127,127,18,33,127,-110,-31,101,127, 57,107,-51,-104,-66,-105,31,125,22,106,41,-84,127,-37,126,68,-63,106,127,52,-127,-39,127,-127,-2,77,-5,-117,-127,56,61,127,110,-87,-127,-23,-5,123,-96,-72,-20,82,17,-23,-34,126,127,-70, 
  /* [0][2][][] */ 91,-23,-27,-93,-2,45,18,17,-91,37,44,-43,38,-42,127,-87,15,-10,1,119,13,-16,37,49,13,27,3,34,75,32,-36,-107,-74,-124,-6,-2,-32,107,8,-32,0,-38,-82,-9,114,0,97,-17, 98,34,-90,-89,-82,3,32,127,-127,104,15,-57,127,-12,70,-44,33,-10,43,36,11,18,30,27,45,-37,3,52,9,84,-96,47,119,-84,-75,-11,-67,69,40,-77,-31,-57,-75,4,116,67,49,40, 90,-14,-19,-67,-2,-92,22,6,-87,28,38,-47,36,-55,104,33,17,10,10,127,-47,-18,53,-72,12,28,5,43,-65,22,-18,70,-82,-127,-28,-25,-20,127,-58,-40,2,-46,-96,3,127,5,90,-13, 
};
const TfArray<4, int> tensor_dimension109 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant109_scale = { 48, { 0.0052164052613079548, 0.008472515270113945, 0.0060592461377382278, 0.0057103708386421204, 0.014072483405470848, 0.0052074943669140339, 0.0091066043823957443, 0.0048933369107544422, 0.0054459879174828529, 0.0037922307383269072, 0.0052445465698838234, 0.0096337385475635529, 0.0053984373807907104, 0.0059618926607072353, 0.0033701048232614994, 0.0060226339846849442, 0.0081295585259795189, 0.0050793294794857502, 0.0058675440959632397, 0.0051809931173920631, 0.0074928821995854378, 0.013485525734722614, 0.0066664731130003929, 0.0074666617438197136, 0.034720204770565033, 0.010117711499333382, 0.012242930009961128, 0.0083087887614965439, 0.0064699067734181881, 0.0048491209745407104, 0.011682160198688507, 0.0064376778900623322, 0.0088604120537638664, 0.0045670345425605774, 0.010803899727761745, 0.0071657742373645306, 0.0097024692222476006, 0.0057683247141540051, 0.022361943498253822, 0.0060465768910944462, 0.011301670223474503, 0.011889124289155006, 0.0062132570892572403, 0.013598368503153324, 0.0045922361314296722, 0.0060595390386879444, 0.0035707787610590458, 0.0070569030940532684, } };
const TfArray<48, int> quant109_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 3 };
const ALIGN(8) int32_t tensor_data110[8] = { -23516, 18962, 26175, -12716, 6087, -15794, 17593, -8476, };
const TfArray<1, int> tensor_dimension110 = { 1, { 8 } };
const TfArray<8, float> quant110_scale = { 8, { 2.674097049748525e-05, 1.8689712305786088e-05, 1.7732567357597873e-05, 2.0117187887080945e-05, 2.9977660233271308e-05, 2.551625766500365e-05, 2.1158730305614881e-05, 2.1931273295194842e-05, } };
const TfArray<8, int> quant110_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const ALIGN(8) int8_t tensor_data111[1*3*3*48] = { 
  /* [0][0][][] */ 0,-44,-12,24,23,-18,13,-17,7,-84,3,8,-68,-2,-53,-65,-18,-30,27,-109,15,2,9,-49,-2,-60,-5,3,16,-6,-12,-5,-2,37,52,27,-7,4,1,-23,1,-16,1,10,42,-7,36,36, -15,-59,28,53,37,-38,11,2,23,-127,-6,24,-118,-6,-80,-127,-4,-66,48,-96,-19,-1,33,-98,-5,-90,-30,-8,33,-4,-64,-32,-11,2,26,127,-8,-108,0,-32,23,-127,6,45,-17,-41,127,-50, 1,-9,-15,23,21,-14,8,15,9,-66,3,8,-73,-1,-53,-55,-18,-11,31,-110,15,1,8,-63,-4,-58,-5,4,16,-6,-10,-3,0,36,44,24,-5,11,1,-22,2,-15,0,10,-48,-5,40,8, 
  /* [0][1][][] */ 7,23,-11,4,26,-23,18,-127,35,-90,-22,24,-127,9,-106,26,3,-80,35,-112,5,2,28,-86,20,-70,13,17,24,6,42,-41,14,55,127,-12,-1,55,-2,-51,25,13,25,15,127,-39,-24,127, 127,54,127,112,127,-127,127,-28,127,-66,-127,127,-124,127,-99,45,127,-127,127,-93,-127,-127,127,-115,127,-78,127,127,127,127,127,-127,127,-127,70,-40,127,41,127,-127,127,-68,127,127,8,127,-7,-67, 20,96,-19,0,22,-19,17,-34,35,-85,-24,24,-127,5,-110,28,-2,-66,51,-122,9,2,23,-113,22,-71,12,16,19,6,44,-43,21,59,126,-13,-6,59,-2,-56,22,12,24,14,-114,-34,-20,-55, 
  /* [0][2][][] */ -4,2,-4,-38,13,13,5,-34,7,-36,-6,-6,-18,-8,-116,38,-2,-46,-34,-122,18,0,-8,-61,-1,-72,-3,4,-4,-7,8,-29,3,20,76,-3,-4,50,0,7,2,29,-2,-7,32,0,-22,23, -20,127,63,-127,18,21,5,-102,24,-69,-16,19,-92,-6,-97,106,28,-101,-7,-113,-9,-5,27,-127,24,-127,37,7,-4,7,52,-21,-13,12,108,-6,13,127,10,-31,15,90,18,-8,5,-14,-87,-60, -2,25,-7,-35,14,12,3,-13,5,-34,-7,-6,-25,-8,-127,37,-5,-37,-26,-127,17,0,-9,-73,0,-72,-4,6,-5,-7,11,-28,0,18,69,-3,-2,50,0,2,2,26,-3,-6,-29,1,-25,31, 
};
const TfArray<4, int> tensor_dimension111 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant111_scale = { 48, { 0.0095288213342428207, 0.004557192325592041, 0.0063090710900723934, 0.0053065172396600246, 0.0060054492205381393, 0.0037394722457975149, 0.0074340510182082653, 0.0028697878587990999, 0.0063454280607402325, 0.0035800810437649488, 0.014902696013450623, 0.0073059452697634697, 0.0020561008714139462, 0.00806416105479002, 0.013558359816670418, 0.006862142588943243, 0.010950159281492233, 0.0034229978919029236, 0.0044202222488820553, 0.0023435628972947598, 0.005713549442589283, 0.035142429172992706, 0.013799860142171383, 0.002822899492457509, 0.0066959117539227009, 0.0030867811292409897, 0.0074467947706580162, 0.0089008379727602005, 0.0079198982566595078, 0.0088949743658304214, 0.0046725827269256115, 0.0049152201972901821, 0.0088243782520294189, 0.0089205335825681686, 0.0028317610267549753, 0.012881707400083542, 0.010101803578436375, 0.0045679784379899502, 0.009508911520242691, 0.0059731584042310715, 0.011033454909920692, 0.0089736618101596832, 0.0090257897973060608, 0.0080148382112383842, 0.0056706620380282402, 0.011716718785464764, 0.008546886034309864, 0.0064575993455946445, } };
const TfArray<48, int> quant111_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 3 };
const ALIGN(8) int32_t tensor_data112[16] = { 26063, 42395, 30961, -33694, -31947, -2432, -20114, 25952, 16501, -24311, -22910, 25853, -26143, -16734, -49885, -17977, };
const TfArray<1, int> tensor_dimension112 = { 1, { 16 } };
const TfArray<16, float> quant112_scale = { 16, { 9.8272408649791032e-05, 0.00013450872211251408, 0.00012351821351330727, 0.00010705502063501626, 0.00010029117402154952, 0.00016252175555564463, 0.00013606254651676863, 0.00010414762800792232, 7.2831899160519242e-05, 0.00010010740516008809, 0.00011539320985320956, 0.00011051606270484626, 0.00010415440192446113, 9.6143288828898221e-05, 9.5968905952759087e-05, 9.0678237029351294e-05, } };
const TfArray<16, int> quant112_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant114_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.061358466744422913, } };
const TfArray<1, int> quant115_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant116_scale = { 1, { 0.062304843217134476, } };
const TfArray<1, int> quant116_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant120_scale = { 1, { 0.038251180201768875, } };
const TfArray<1, int> quant120_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant122_scale = { 1, { 0.023338411003351212, } };
const TfArray<1, int> quant122_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.07127545028924942, } };
const TfArray<1, int> quant123_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant124_scale = { 1, { 0.080381311476230621, } };
const TfArray<1, int> quant124_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.018679950386285782, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant128_scale = { 1, { 0.039936505258083344, } };
const TfArray<1, int> quant128_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.015774600207805634, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant130_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant130_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.036307211965322495, } };
const TfArray<1, int> quant131_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant132_scale = { 1, { 0.055469140410423279, } };
const TfArray<1, int> quant132_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.015284420922398567, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant134_scale = { 1, { 0.019188061356544495, } };
const TfArray<1, int> quant134_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.042171254754066467, } };
const TfArray<1, int> quant135_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant136_scale = { 1, { 0.057412389665842056, } };
const TfArray<1, int> quant136_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.016878128051757812, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,7,7,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.016878128051757812, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant140_scale = { 1, { 0.048423651605844498, } };
const TfArray<1, int> quant140_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.014472581446170807, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant142_scale = { 1, { 0.016031157225370407, } };
const TfArray<1, int> quant142_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.019838714972138405, } };
const TfArray<1, int> quant143_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant144_scale = { 1, { 0.056609008461236954, } };
const TfArray<1, int> quant144_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.01673896424472332, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant146_scale = { 1, { 0.018916459754109383, } };
const TfArray<1, int> quant146_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.018279191106557846, } };
const TfArray<1, int> quant147_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant148_scale = { 1, { 0.057524841278791428, } };
const TfArray<1, int> quant148_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.01305700745433569, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant150_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant150_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.027318496257066727, } };
const TfArray<1, int> quant151_zero = { 1, { -37 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant152_scale = { 1, { 0.065114311873912811, } };
const TfArray<1, int> quant152_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.014457843266427517, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant154_scale = { 1, { 0.020379805937409401, } };
const TfArray<1, int> quant154_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant155_scale = { 1, { 0.031242011114954948, } };
const TfArray<1, int> quant155_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant156_scale = { 1, { 0.073041550815105438, } };
const TfArray<1, int> quant156_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant157_scale = { 1, { 0.01755039393901825, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant158_scale = { 1, { 0.020515704527497292, } };
const TfArray<1, int> quant158_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant159_scale = { 1, { 0.033433977514505386, } };
const TfArray<1, int> quant159_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant160_scale = { 1, { 0.064175970852375031, } };
const TfArray<1, int> quant160_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant161_scale = { 1, { 0.014000431634485722, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant162_scale = { 1, { 0.017840076237916946, } };
const TfArray<1, int> quant162_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant163_scale = { 1, { 0.038956586271524429, } };
const TfArray<1, int> quant163_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant164_scale = { 1, { 0.059957563877105713, } };
const TfArray<1, int> quant164_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant165_scale = { 1, { 0.019270738586783409, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant166_scale = { 1, { 0.019270738586783409, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant167_scale = { 1, { 0.013737646862864494, } };
const TfArray<1, int> quant167_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant168_scale = { 1, { 0.024777995422482491, } };
const TfArray<1, int> quant168_zero = { 1, { -40 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant169_scale = { 1, { 0.0092368610203266144, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant170_scale = { 1, { 0.015676151961088181, } };
const TfArray<1, int> quant170_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant171_scale = { 1, { 0.014730392023921013, } };
const TfArray<1, int> quant171_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant172_scale = { 1, { 0.025439916178584099, } };
const TfArray<1, int> quant172_zero = { 1, { -56 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant173_scale = { 1, { 0.012876421213150024, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant174_scale = { 1, { 0.0095976637676358223, } };
const TfArray<1, int> quant174_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant175_scale = { 1, { 0.0055361059494316578, } };
const TfArray<1, int> quant175_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant176_scale = { 1, { 0.027409268543124199, } };
const TfArray<1, int> quant176_zero = { 1, { -44 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant177_scale = { 1, { 0.011063951998949051, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant178_scale = { 1, { 0.012059018015861511, } };
const TfArray<1, int> quant178_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant179_scale = { 1, { 0.032543975859880447, } };
const TfArray<1, int> quant179_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<4, int> tensor_dimension180 = { 4, { 1,2,2,1280 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 4,1280 } };
const TfArray<1, float> quant181_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant181_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 4,8 } };
const TfArray<1, float> quant182_scale = { 1, { 0.024146053940057755, } };
const TfArray<1, int> quant182_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,32 } };
const TfArray<1, float> quant183_scale = { 1, { 0.024146053940057755, } };
const TfArray<1, int> quant183_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfArray<2, int> tensor_dimension184 = { 2, { 1,3 } };
const TfArray<1, float> quant184_scale = { 1, { 0.022163731977343559, } };
const TfArray<1, int> quant184_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant184 = { (TfLiteFloatArray*)&quant184_scale, (TfLiteIntArray*)&quant184_zero, 0 };
const TfArray<2, int> tensor_dimension185 = { 2, { 1,3 } };
const TfArray<1, float> quant185_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant185_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant185 = { (TfLiteFloatArray*)&quant185_scale, (TfLiteIntArray*)&quant185_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,44,7 } };
const TfArray<1, int> outputs0 = { 1, { 113 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 113,79,36 } };
const TfArray<1, int> outputs1 = { 1, { 114 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 114,45,80 } };
const TfArray<1, int> outputs2 = { 1, { 115 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 113,115 } };
const TfArray<1, int> outputs3 = { 1, { 116 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 116,46,14 } };
const TfArray<1, int> outputs4 = { 1, { 117 } };
const TfArray<2, int> inputs5 = { 2, { 117,3 } };
const TfArray<1, int> outputs5 = { 1, { 118 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 118,81,22 } };
const TfArray<1, int> outputs6 = { 1, { 119 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 119,47,82 } };
const TfArray<1, int> outputs7 = { 1, { 120 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 120,48,33 } };
const TfArray<1, int> outputs8 = { 1, { 121 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 121,83,34 } };
const TfArray<1, int> outputs9 = { 1, { 122 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 122,49,84 } };
const TfArray<1, int> outputs10 = { 1, { 123 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 120,123 } };
const TfArray<1, int> outputs11 = { 1, { 124 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 124,50,35 } };
const TfArray<1, int> outputs12 = { 1, { 125 } };
const TfArray<2, int> inputs13 = { 2, { 125,3 } };
const TfArray<1, int> outputs13 = { 1, { 126 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 126,85,37 } };
const TfArray<1, int> outputs14 = { 1, { 127 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 127,51,86 } };
const TfArray<1, int> outputs15 = { 1, { 128 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 128,52,38 } };
const TfArray<1, int> outputs16 = { 1, { 129 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 129,87,39 } };
const TfArray<1, int> outputs17 = { 1, { 130 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 130,53,88 } };
const TfArray<1, int> outputs18 = { 1, { 131 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 128,131 } };
const TfArray<1, int> outputs19 = { 1, { 132 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 132,54,40 } };
const TfArray<1, int> outputs20 = { 1, { 133 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 133,89,41 } };
const TfArray<1, int> outputs21 = { 1, { 134 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 134,55,90 } };
const TfArray<1, int> outputs22 = { 1, { 135 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 132,135 } };
const TfArray<1, int> outputs23 = { 1, { 136 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 136,56,42 } };
const TfArray<1, int> outputs24 = { 1, { 137 } };
const TfArray<2, int> inputs25 = { 2, { 137,3 } };
const TfArray<1, int> outputs25 = { 1, { 138 } };
const TfLiteDepthwiseConvParams opdata26 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 138,91,43 } };
const TfArray<1, int> outputs26 = { 1, { 139 } };
const TfLiteConvParams opdata27 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 139,57,92 } };
const TfArray<1, int> outputs27 = { 1, { 140 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 140,58,8 } };
const TfArray<1, int> outputs28 = { 1, { 141 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 141,93,9 } };
const TfArray<1, int> outputs29 = { 1, { 142 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 142,59,94 } };
const TfArray<1, int> outputs30 = { 1, { 143 } };
const TfLiteAddParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 140,143 } };
const TfArray<1, int> outputs31 = { 1, { 144 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 144,60,10 } };
const TfArray<1, int> outputs32 = { 1, { 145 } };
const TfLiteDepthwiseConvParams opdata33 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 145,95,11 } };
const TfArray<1, int> outputs33 = { 1, { 146 } };
const TfLiteConvParams opdata34 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 146,61,96 } };
const TfArray<1, int> outputs34 = { 1, { 147 } };
const TfLiteAddParams opdata35 = { kTfLiteActNone };
const TfArray<2, int> inputs35 = { 2, { 144,147 } };
const TfArray<1, int> outputs35 = { 1, { 148 } };
const TfLiteConvParams opdata36 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs36 = { 3, { 148,62,12 } };
const TfArray<1, int> outputs36 = { 1, { 149 } };
const TfLiteDepthwiseConvParams opdata37 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 149,97,13 } };
const TfArray<1, int> outputs37 = { 1, { 150 } };
const TfLiteConvParams opdata38 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 150,63,98 } };
const TfArray<1, int> outputs38 = { 1, { 151 } };
const TfLiteAddParams opdata39 = { kTfLiteActNone };
const TfArray<2, int> inputs39 = { 2, { 148,151 } };
const TfArray<1, int> outputs39 = { 1, { 152 } };
const TfLiteConvParams opdata40 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs40 = { 3, { 152,64,15 } };
const TfArray<1, int> outputs40 = { 1, { 153 } };
const TfLiteDepthwiseConvParams opdata41 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 153,99,16 } };
const TfArray<1, int> outputs41 = { 1, { 154 } };
const TfLiteConvParams opdata42 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 154,65,100 } };
const TfArray<1, int> outputs42 = { 1, { 155 } };
const TfLiteAddParams opdata43 = { kTfLiteActNone };
const TfArray<2, int> inputs43 = { 2, { 152,155 } };
const TfArray<1, int> outputs43 = { 1, { 156 } };
const TfLiteConvParams opdata44 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 156,66,17 } };
const TfArray<1, int> outputs44 = { 1, { 157 } };
const TfLiteDepthwiseConvParams opdata45 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 157,101,18 } };
const TfArray<1, int> outputs45 = { 1, { 158 } };
const TfLiteConvParams opdata46 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 158,67,102 } };
const TfArray<1, int> outputs46 = { 1, { 159 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 156,159 } };
const TfArray<1, int> outputs47 = { 1, { 160 } };
const TfLiteConvParams opdata48 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 160,68,19 } };
const TfArray<1, int> outputs48 = { 1, { 161 } };
const TfLiteDepthwiseConvParams opdata49 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 161,103,20 } };
const TfArray<1, int> outputs49 = { 1, { 162 } };
const TfLiteConvParams opdata50 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 162,69,104 } };
const TfArray<1, int> outputs50 = { 1, { 163 } };
const TfLiteAddParams opdata51 = { kTfLiteActNone };
const TfArray<2, int> inputs51 = { 2, { 160,163 } };
const TfArray<1, int> outputs51 = { 1, { 164 } };
const TfLiteConvParams opdata52 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs52 = { 3, { 164,70,21 } };
const TfArray<1, int> outputs52 = { 1, { 165 } };
const TfArray<2, int> inputs53 = { 2, { 165,2 } };
const TfArray<1, int> outputs53 = { 1, { 166 } };
const TfLiteDepthwiseConvParams opdata54 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 166,105,23 } };
const TfArray<1, int> outputs54 = { 1, { 167 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 167,71,106 } };
const TfArray<1, int> outputs55 = { 1, { 168 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 168,72,24 } };
const TfArray<1, int> outputs56 = { 1, { 169 } };
const TfLiteDepthwiseConvParams opdata57 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 169,107,25 } };
const TfArray<1, int> outputs57 = { 1, { 170 } };
const TfLiteConvParams opdata58 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 170,73,108 } };
const TfArray<1, int> outputs58 = { 1, { 171 } };
const TfLiteAddParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 168,171 } };
const TfArray<1, int> outputs59 = { 1, { 172 } };
const TfLiteConvParams opdata60 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 172,74,26 } };
const TfArray<1, int> outputs60 = { 1, { 173 } };
const TfLiteDepthwiseConvParams opdata61 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 173,109,27 } };
const TfArray<1, int> outputs61 = { 1, { 174 } };
const TfLiteConvParams opdata62 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 174,75,110 } };
const TfArray<1, int> outputs62 = { 1, { 175 } };
const TfLiteAddParams opdata63 = { kTfLiteActNone };
const TfArray<2, int> inputs63 = { 2, { 172,175 } };
const TfArray<1, int> outputs63 = { 1, { 176 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 176,76,28 } };
const TfArray<1, int> outputs64 = { 1, { 177 } };
const TfLiteDepthwiseConvParams opdata65 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 177,111,29 } };
const TfArray<1, int> outputs65 = { 1, { 178 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 178,77,112 } };
const TfArray<1, int> outputs66 = { 1, { 179 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 179,78,30 } };
const TfArray<1, int> outputs67 = { 1, { 180 } };
const TfLiteReshapeParams opdata68 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs68 = { 2, { 180,6 } };
const TfArray<1, int> outputs68 = { 1, { 181 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 181,31,4 } };
const TfArray<1, int> outputs69 = { 1, { 182 } };
const TfLiteReshapeParams opdata70 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs70 = { 2, { 182,1 } };
const TfArray<1, int> outputs70 = { 1, { 183 } };
const TfLiteFullyConnectedParams opdata71 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs71 = { 3, { 183,32,5 } };
const TfArray<1, int> outputs71 = { 1, { 184 } };
const TfLiteSoftmaxParams opdata72 = { 1 };
const TfArray<1, int> inputs72 = { 1, { 184 } };
const TfArray<1, int> outputs72 = { 1, { 185 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 10240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 20480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data111, (TfLiteIntArray*)&tensor_dimension111, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data112, (TfLiteIntArray*)&tensor_dimension112, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension113, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension114, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension115, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension116, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension117, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension118, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension119, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension120, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension121, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension122, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension123, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension124, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension125, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension126, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension127, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3744, (TfLiteIntArray*)&tensor_dimension128, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension129, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension130, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension131, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension132, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension133, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension134, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension135, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension136, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2352, (TfLiteIntArray*)&tensor_dimension137, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension138, 2352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2352, (TfLiteIntArray*)&tensor_dimension139, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension140, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension141, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension142, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension143, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 864, (TfLiteIntArray*)&tensor_dimension144, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension145, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension146, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension147, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension148, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension149, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension150, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension151, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 864, (TfLiteIntArray*)&tensor_dimension152, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension153, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension154, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension155, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension156, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension157, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension158, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension159, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 864, (TfLiteIntArray*)&tensor_dimension160, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension161, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension162, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension163, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension164, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension165, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension166, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension167, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension168, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension169, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension170, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension171, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension172, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension173, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension174, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension175, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension176, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension177, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension178, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension179, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension180, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension181, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension182, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension183, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant183))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension184, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant184))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension185, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant185))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_ADD, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_ADD, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_ADD, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_ADD, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_ADD, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_ADD, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_ADD, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 186;
  for(size_t i = 0; i < 186; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 73; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 73; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  185, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 73; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
